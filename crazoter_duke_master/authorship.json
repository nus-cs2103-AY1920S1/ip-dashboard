[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    runtimeOnly \"org.openjfx:javafx-graphics:$javafx.version:win\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    runtimeOnly \"org.openjfx:javafx-graphics:$javafx.version:linux\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    runtimeOnly \"org.openjfx:javafx-graphics:$javafx.version:mac\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    from {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 42,
      "-": 12
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# A User Guide for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/crazoter/duke/master/docs/Ui.png\" alt\u003d\"image of ui\" width\u003d\"200\"/\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Download the latest release [here](https://github.com/crazoter/duke/releases)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### Manage todos, events and deadlines"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* With Duke, you can add different types of tasks your list using [todo](#task), [deadline](#task) or [event](#task) commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can also view your list of tasks by using the [list](#list) command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can mark a task as done using [done](#done), or [delete](#delete) to remove tasks, or [clear](#clear) to remove all tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can also look for relevant tasks using the [find](#find) command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### Auto-saves after every change"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* All your changes are [automatically saved](#autosave). These changes persist even after you shut down the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### Do it fast with autocorrect"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The [autocorrect](#autocorrect) feature allows you to input commands quickly."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* It also allows you to quickly glance through all the features in the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Autocorrect works with cursor keys and enter buttons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Your most recently used commands will be pushed to the top."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### Get help from the app"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The app contains the [help](#help) command to help you get acquainted with the commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "## User Manual"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"help\"\u003e\u003c/a\u003e Feature 1: Display Help"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Shows list of functions and purpose."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "A list of functions and their purposes is displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"list\"\u003e\u003c/a\u003e Feature 2: Display List"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "List tasks that are on the todo list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The application displays a list of the tasks you have recorded."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"task\"\u003e\u003c/a\u003e Feature 3: Adding tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Add different types of tasks to be cleared (e.g. todo, event, deadline)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`todo {description}`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`event {description} /at {date}`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`deadline {description} /by {date}`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The task (todo, event or deadline) is added to the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"delete\"\u003e\u003c/a\u003eFeature 4: Task deletion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Delete tasks by index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`delete {index}`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The task is removed from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Alternatively, you can also use `clear` to delete all tasks from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"done\"\u003e\u003c/a\u003eFeature 5: Find tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Find tasks by search phrase. Any task that contains said search phrase will appear."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`find {keyword}`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "All tasks that contain the search phrase will be listed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"done\"\u003e\u003c/a\u003eFeature 6: Mark Task as done"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Mark tasks by index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`done {index}`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The task correlating to the index is marked as done."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"autosave\"\u003e\u003c/a\u003eFeature 7: Saving"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "All tasks are automatically saved whenever a task is added or modified."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### \u003ca name\u003d\"autocorrect\"\u003e\u003c/a\u003eFeature 8: Autocorrected commands"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "A list of possible commands will appear. Use the up and down arrow keys to navigate and press enter or right arrow key to autofill the command into the textbox."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "### Feature 9: Exit"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Window closes and Duke terminates."
      }
    ],
    "authorContributionMap": {
      "crazoter": 93,
      "-": 16
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "crazoter": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String WORKING_DIRECTORY \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String SAVE_FILE_NAME \u003d \"save.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String ABSOLUTE_PATH_TO_SAVE_FILE \u003d WORKING_DIRECTORY + File.separator + SAVE_FILE_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        new Duke(ABSOLUTE_PATH_TO_SAVE_FILE).run();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Storage storage \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TaskList taskList \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Ui ui \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Parser parser \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an instance of Duke which runs the program. Uses the default path to save file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Required for Launcher.java to work."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this(ABSOLUTE_PATH_TO_SAVE_FILE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an instance of Duke which runs the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param saveFilePath Save file path to be used for saving / loading tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Duke(String saveFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage \u003d new Storage(saveFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList \u003d storage.loadTaskListFromSaveFile(ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.printError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (taskList \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Run the Duke instance (CLI version)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.setEnabled(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        while (isRunning()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String line \u003d ui.readLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Command cmd \u003d parser.parse(line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                cmd.execute(this, taskList, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ui.printError(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Initialize duke and return initial greeting (for GUI implementation)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return greeting"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String initAndGreet() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.setEnabled(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ui.flushBuffer();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isRunning;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setRunning(boolean running) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isRunning \u003d running;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Function to generate response to user input (meant for GUI, but also used by JUnit)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Command cmd \u003d parser.parse(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            cmd.execute(this, taskList, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.printError(e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ui.flushBuffer();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 103
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.ErrorMsg;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.ErrorMsgWithParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DukeException(ErrorMsg msgCode) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(msgCode.getDescription());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DukeException(ErrorMsgWithParams msgCode, String... parameters) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(msgCode.getDescription(parameters));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert parameters.length \u003e 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 15
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 13
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsg.UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the line from a scanner, returns a Command based on the line."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line from scanner (see ui.readLine())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return Command subclass based on line"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception that contains error message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        switch (line) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"bye\"://exit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"list\"://list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Observe that line.equals and startsWith are used in tandem."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //line.equals is used for proper error handling (if command called without args)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (line.equals(\"done\") || line.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Set task to done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new DoneCommand(line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.equals(\"delete\") || line.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new DeleteCommand(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.equals(\"todo\") || line.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new AddTodoCommand(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.equals(\"event\") || line.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new AddEventCommand(line);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.equals(\"deadline\") || line.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new AddDeadlineCommand(line);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.equals(\"find\") || line.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new FindCommand(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 57
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.ErrorMsg;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.InvalidPropertiesFormatException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final int NUMBER_OF_SAVE_PARAMS_TASK \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Load from save file (txt file in hard disk) (path currently hardcoded)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui ui object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IOException IO exception"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TaskList loadTaskListFromSaveFile(Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        TaskList results \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Read the content from file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(path));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Process"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                processLineFromSaveFile(results, ui, line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.storageFileNotFoundError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (InvalidPropertiesFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.storageInvalidLineError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.storageIoExceptionError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Return this by default"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Process line(s) obtained from loadFromSaveFile."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskList List of tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui  ui object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line String, a line from the save text file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void processLineFromSaveFile(TaskList taskList, Ui ui, String line) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] data \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (data.length \u003d\u003d NUMBER_OF_SAVE_PARAMS_TASK) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList.insertByCommand(ui, data[0], data[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList.get(taskList.size() - 1).markAsDone(data[2].equals(\"true\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(ErrorMsg.ERROR_IN_PARSING_SAVEFILE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Save task list to txt file in hard disk (path currently hardcoded)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskList List of tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void saveTaskListToFile(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PrintWriter writer \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            writer \u003d new PrintWriter(path, \"UTF-8\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Each line is saved as like \"input\", so that saving and input can use the same code"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList.stream().map((task) -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String taskCommand \u003d task.getTaskName().toLowerCase();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(taskCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(\"|\").append(taskCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(\" \").append(task.getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (task instanceof Event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    sb.append(\" /at \").append(((TaskWithDate) task).getParseableDateToString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    sb.append(\" /by \").append(((TaskWithDate) task).getParseableDateToString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(\"|\").append(task.isDone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return sb;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }).forEach((writer::println));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(ErrorMsg.ERROR_IN_WRITING_TO_SAVEFILE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (writer !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 105
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.ErrorMsg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsg.INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Old implementation without the use of Commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Currently in use by Storage to import tasks from text file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui ui object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskName name of task e.g. todo, event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line (e.g. event dancing /at date)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void insertByCommand(Ui ui, String taskName, String line) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String data \u003d line.replaceFirst(\"^.*?\\\\s\",\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If no change, then it\u0027s either empty, or invalid command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (line.equals(data)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (line.equals(\"todo\") || line.equals(\"event\") || line.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                data \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(ErrorMsg.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] splitData;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            switch (taskName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (Task.validateData(data, \"todo\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    insertNewTask(ui, new Todo(data));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                splitData \u003d TaskWithDate.extractDataFromLine(data, \" /at \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (TaskWithDate.validateData(splitData, \"event\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    insertNewTask(ui, new Event(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                splitData \u003d TaskWithDate.extractDataFromLine(data, \" /by \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (TaskWithDate.validateData(splitData, \"deadline\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    insertNewTask(ui, new Deadline(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //throw new DukeException(\"Invalid command.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(ErrorMsg.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Insert a new task into the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui ui object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskToInsert task to insert"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void insertNewTask(Ui ui, Task taskToInsert) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert taskToInsert !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.add(taskToInsert);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"  \" + taskToInsert.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"Now you have \" + this.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 82
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsgWithParams.BAD_DATE_FORMAT_WITH_PARAMS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddDeadlineCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DISPLAY_COMMAND \u003d COMMAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add a deadline command (extended from text based command)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic error with message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddDeadlineCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND, AddTodoCommand.LINE_DESCRIPTOR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String[] splitData \u003d TaskWithDate.extractDataFromLine(remainingLine, \" /by \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (TaskWithDate.validateData(splitData, DISPLAY_COMMAND)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                taskList.insertNewTask(ui, new Deadline(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(BAD_DATE_FORMAT_WITH_PARAMS, \"Deadline\", \"deadline\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 42
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsgWithParams.BAD_DATE_FORMAT_WITH_PARAMS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddEventCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DISPLAY_COMMAND \u003d COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create event command (extended from text based command)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic error with message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddEventCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND, AddTodoCommand.LINE_DESCRIPTOR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String[] splitData \u003d TaskWithDate.extractDataFromLine(remainingLine, \" /at \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (TaskWithDate.validateData(splitData, DISPLAY_COMMAND)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                taskList.insertNewTask(ui, new Event(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(BAD_DATE_FORMAT_WITH_PARAMS, \"Event\", \"event\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 41
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddTodoCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String LINE_DESCRIPTOR \u003d \"description\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create todo command (extended from text based command)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic error with message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddTodoCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND, LINE_DESCRIPTOR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        taskList.insertNewTask(ui, new Todo(remainingLine));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"Emptied task list.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 17
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public abstract void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsg.INVALID_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DeleteCommand extends IndexBasedCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DeleteCommand(String line) throws IndexOutOfBoundsException, NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Task t \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"  \" + t.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsg.INVALID_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DoneCommand extends IndexBasedCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DoneCommand(String line) throws IndexOutOfBoundsException, NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Task t \u003d taskList.get(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            t.markAsDone(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"  \" + t);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.setRunning(false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 14
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class FindCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String LINE_DESCRIPTOR \u003d \"search phrase\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Find command for finding a particular string in tasks in the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line entire line of input by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FindCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND, LINE_DESCRIPTOR);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"_________________________________________\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //I\u0027m assuming index matches the index in the list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String taskDetails \u003d taskList.get(i).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (taskDetails.contains(remainingLine)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ui.println((i + 1) + \". \" + taskDetails);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"_________________________________________\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 36
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 13
    }
  },
  {
    "path": "src/main/java/duke/command/IndexBasedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsg.INVALID_NUMBER_ARGS__FOR_INDEX_CMD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class IndexBasedCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create Index based command (e.g. done 1)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of input by user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IndexOutOfBoundsException index out of bounds exception which may occur"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws NumberFormatException may occur when parsing int from the string arr after splitting line"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public IndexBasedCommand(String line) throws IndexOutOfBoundsException, NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] data \u003d line.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (data.length !\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(INVALID_NUMBER_ARGS__FOR_INDEX_CMD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        index \u003d Integer.parseInt(data[1].trim()) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(i + 1).append(\" \").append(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ui.println(sb.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 24
    }
  },
  {
    "path": "src/main/java/duke/command/TextBasedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.ErrorMsgWithParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class TextBasedCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String remainingLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a text based command e.g. todo event deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line entire input line by user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param command extracted command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param lineDescriptor name of the description e.g. \"description\" or \"search phrase\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TextBasedCommand(String line, String command, String lineDescriptor) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!line.contains(\" \")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (this instanceof FindCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(ErrorMsgWithParams.EMPTY_DESCRIPT, command, lineDescriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(ErrorMsgWithParams.EMPTY_DESCRIPT, command,  lineDescriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remainingLine \u003d line.replaceFirst(command + \" \",\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (remainingLine.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(ErrorMsgWithParams.EMPTY_DESCRIPT, command,  lineDescriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 32
    }
  },
  {
    "path": "src/main/java/duke/gui/AutoCompleteNode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AutoCompleteNode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private String actualValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private String displayValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AutoCompleteNode(String actualValue, String displayValue) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.actualValue \u003d actualValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.displayValue \u003d displayValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getActualValue() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return actualValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setActualValue(String actualValue) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.actualValue \u003d actualValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDisplayValue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return displayValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDisplayValue(String displayValue) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.displayValue \u003d displayValue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 27
    }
  },
  {
    "path": "src/main/java/duke/gui/AutoCompleteVBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * VBox container for auto completion options."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AutoCompleteVBox extends VBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private LinkedList\u003cAutoCompleteNode\u003e autoCompleteNodeLinkedList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private HashMap\u003cString, AutoCompleteNode\u003e displayValAutoCompleteNodeHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private AutoCompleteNode selectedNode \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private int selectedIndex \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label selectedLabel \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Initializes the autocomplete vbox and its options. Begins expanded."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AutoCompleteVBox() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        initAutoCompleteOptions();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateList(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        toggleVisibilityByActiveness();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void initAutoCompleteOptions() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Note the space behind some of the actual values"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"list\", \"list\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"help\", \"help\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"clear\", \"clear\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"find \", \"find {search phrase}\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"done \", \"done {index}\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"delete \", \"delete {index}\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"todo \", \"todo {description}\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"event \", \"event {description} /at {date}\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"deadline \", \"deadline {description} /by {date}\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        autoCompleteNodeLinkedList.add(new AutoCompleteNode(\"bye\", \"bye\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (AutoCompleteNode node : autoCompleteNodeLinkedList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            displayValAutoCompleteNodeHashMap.put(node.getDisplayValue(), node);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Update list of auto complete options based on cli text."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text cli text"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void updateList(String text) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Inefficient but sufficient way"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.getChildren().clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (AutoCompleteNode node : autoCompleteNodeLinkedList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //We want to autocorrect it to the actual value while preventing it from blocking functionality"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (node.getActualValue().startsWith(text) \u0026\u0026 !node.getActualValue().equals(text)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                addListItem(node);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        toggleVisibilityByActiveness();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateSelectedNodeAndIndex();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Automatically sort list based on frequency of use and return string to autocomplete."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Also hides auto complete."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return String to autocomplete."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String requestAutoCompleteResult() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (selectedIndex \u003e\u003d 0 \u0026\u0026 selectedIndex \u003c this.getChildren().size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            AutoCompleteNode node \u003d getNodeFromChildrenIndex(selectedIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            autoCompleteNodeLinkedList.remove(node);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            autoCompleteNodeLinkedList.addFirst(node);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return node.getActualValue();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return if auto completion box is active."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return boolean isActive"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this.getChildren().size() \u003e 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void upButtonPressed() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int newIndex \u003d (selectedIndex - 1 + this.getChildren().size()) % this.getChildren().size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        changeSelectedIndex(newIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void downButtonPressed() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int newIndex \u003d (selectedIndex + 1) % this.getChildren().size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        changeSelectedIndex(newIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void updateSelectedNodeAndIndex() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If no node selected but there are children"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (this.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (selectedNode \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                changeSelectedIndex(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                int nodeIndex \u003d getIndexOfNodeInChildren(selectedNode);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (nodeIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    changeSelectedIndex(0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    changeSelectedIndex(nodeIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private AutoCompleteNode getNodeFromChildrenIndex(int index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String textSelected \u003d ((Label) this.getChildren().get(index)).getText();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return displayValAutoCompleteNodeHashMap.get(textSelected);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Find index of AutoCompleteNode in children; -1 if not found."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param node node to search for"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return index"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private int getIndexOfNodeInChildren(AutoCompleteNode node) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (node !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cNode\u003e children \u003d this.getChildren();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (int i \u003d 0; i \u003c children.size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Label label \u003d (Label) children.get(i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (label.getText().equals(node.getDisplayValue())) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add list item to VBox children based on cli text."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param node auto complete node that is to be added"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void addListItem(AutoCompleteNode node) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Label label \u003d new Label(node.getDisplayValue());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.getChildren().add(label);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Show if active, hide if inactive."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void toggleVisibilityByActiveness() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.setVisible(isActive());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The currently selected index will be highlighted. This changes the highlighted label."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param newIndex new index to highlight"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void changeSelectedIndex(int newIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (newIndex \u003e\u003d 0 \u0026\u0026 newIndex \u003c this.getChildren().size()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //If can find selected node, then selected label still exists, thus we need to clear it"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (selectedLabel !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                selectedLabel.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Apply new changes"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            selectedIndex \u003d newIndex;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            selectedNode \u003d getNodeFromChildrenIndex(newIndex);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            selectedLabel \u003d (Label) this.getChildren().get(selectedIndex);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            selectedLabel.setStyle(\"-fx-text-fill: red\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 180
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public enum DialogType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    USER, DUKE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.controllers.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Refer to https://github.com/nus-cs2103-AY1920S1/duke/blob/master/tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setController(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            AnchorPane pane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Scene scene \u003d new Scene(pane);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 36
    }
  },
  {
    "path": "src/main/java/duke/gui/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String NAME_USER \u003d \"User\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String NAME_DUKE \u003d \"Duke\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label usernameLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Circle displayPictureCircle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private DialogBox(String text, Image img, String username) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        usernameLabel.setText(username);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        displayPictureCircle.setFill(pattern);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Fix for cropped text"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dialog.setMinSize(Label.USE_COMPUTED_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.setMinHeight(dialog.getMinHeight());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return user dialog (GUI) object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text text to display"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param img user image to display"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return DialogBox user dialog"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new DialogBox(text, img, NAME_USER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return duke dialog (GUI) object but flipped."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text text to display"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param img duke image to display"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return DialogBox duke dialog"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        var db \u003d new DialogBox(text, img, NAME_DUKE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 89
    }
  },
  {
    "path": "src/main/java/duke/gui/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.AutoCompleteVBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.DialogType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private AutoCompleteVBox autoCompleteVBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a mainwindow GUI object which will be added into a stage in Main.class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke object to be linked together with this GUI object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public MainWindow(Duke duke) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Upon initializing the controller, add initial dialog for duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        initializeAutoCompleteListeners();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Add initial dialog from duke"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String initGreeting \u003d duke.initAndGreet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addDialog(DialogType.DUKE, initGreeting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Setup auto complete listeners for auto complete vbox display."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void initializeAutoCompleteListeners() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            autoCompleteVBox.updateList(newValue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput.setOnKeyPressed(e -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (autoCompleteVBox.isActive()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (e.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    autoCompleteVBox.upButtonPressed();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (e.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    autoCompleteVBox.downButtonPressed();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (e.getCode() \u003d\u003d KeyCode.RIGHT) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    userInput.setText(autoCompleteVBox.requestAutoCompleteResult());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (autoCompleteVBox.isActive()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            userInput.setText(autoCompleteVBox.requestAutoCompleteResult());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!duke.isRunning()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add a dialog box."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param type type of dialog (enum)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text Text to add"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void addDialog(DialogType type, String text) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DialogBox dialogBox;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case USER:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            dialogBox \u003d DialogBox.getUserDialog(text, userImage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            dialogBox \u003d DialogBox.getDukeDialog(text, dukeImage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dialogContainer.getChildren().add(dialogBox);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 133
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Deadline extends TaskWithDate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Deadline(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + TASK_WITH_DATE_FORMATTER.format(date) + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Event extends TaskWithDate {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Event(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + TASK_WITH_DATE_FORMATTER.format(date) + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.ErrorMsgWithParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Unicode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return (isDone ? Unicode.TICK : Unicode.CROSS); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void markAsDone(boolean done) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getStatusWithDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Validate the input from the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskName Name of the task e.g. event or deadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean validateData(String description, String taskName) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (description.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(ErrorMsgWithParams.EMPTY_DESCRIPT, taskName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return getStatusWithDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Gets the task name, used by storage to identify tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return String denoting task name e.g. todo, event, deadline. In low caps;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public abstract String getTaskName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 70
    }
  },
  {
    "path": "src/main/java/duke/task/TaskWithDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsgWithParams.EMPTY_DESCRIPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.ui.ErrorMsgWithParams.EMPTY_DESCRIPT_AND_OR_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class TaskWithDate extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final SimpleDateFormat TASK_WITH_DATE_FORMATTER \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, K:mma\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final SimpleDateFormat TASK_WITH_DATE_PARSER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TaskWithDate(String description, boolean isDone, String date) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.date \u003d TASK_WITH_DATE_PARSER.parse(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TaskWithDate(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.date \u003d TASK_WITH_DATE_PARSER.parse(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The current format of input for a task with date is to add a /at or /on. This extracts the data from that format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line Line of input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param delimiter delimiter provided [\" /at \" or \" /on \"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static String[] extractDataFromLine(String line, String delimiter) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return line.split(delimiter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Verify that the data is correct before creating a task with data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param data the data as extracted from extractDataFromLine"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskName Name of the task e.g. event or deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean validateData(String[] data, String taskName) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (data[0].length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPT, taskName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else if (data.length \u003c\u003d 1 || data[1].length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPT_AND_OR_DATE, taskName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getFormattedDateToString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return TASK_WITH_DATE_FORMATTER.format(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getParseableDateToString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return TASK_WITH_DATE_PARSER.format(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/main/java/duke/ui/ErrorMsg.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public enum ErrorMsg {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    UNKNOWN_COMMAND(\"I\u0027m sorry, but I don\u0027t know what that means :-(\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    BAD_DATE_FORMAT(\"Deadline is ill formatted. Example: deadline return book /by 2/12/2019 1800.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    INVALID_DATE_FORMAT(\"Failed to add task because date is not in the right format (should be in dd/MM/yyyy HHmm).\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    INVALID_NUMBER_ARGS__FOR_INDEX_CMD(\"Invalid number of arguments in an index based command.\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    INVALID_INDEX(\"The index is invalid.\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ERROR_IN_PARSING_SAVEFILE(\"Error in parsing line from save file.\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ERROR_IN_WRITING_TO_SAVEFILE(\"An exception occurred when saving to file.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private String description \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ErrorMsg(String desc) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/main/java/duke/ui/ErrorMsgWithParams.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public enum ErrorMsgWithParams {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    EMPTY_DESCRIPT(Constants.PARAM_PLACEHOLDER + \" cannot have an empty \" + Constants.PARAM_PLACEHOLDER + \".\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    EMPTY_DESCRIPT_AND_OR_DATE(\"The description and date of a \" + Constants.PARAM_PLACEHOLDER + \" cannot be empty.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    BAD_DATE_FORMAT_WITH_PARAMS(Constants.PARAM_PLACEHOLDER + \" is ill formatted. Example: \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + Constants.PARAM_PLACEHOLDER + \" return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static class Constants {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public static final String PARAM_PLACEHOLDER \u003d \"#\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private String description \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ErrorMsgWithParams(String desc) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns description of error message (with parameters embedded inside)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * CAUTION: Please pay attention to the PARAM_PLACEHOLDER used as this function"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * does not account for this placeholder in the parameter provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param parameters parameters to replace the PARAM_PLACEHOLDER"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDescription(String... parameters) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String parameterizedDescription \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (String parameter : parameters) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (parameterizedDescription.contains(Constants.PARAM_PLACEHOLDER)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parameterizedDescription \u003d parameterizedDescription"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .replaceFirst(Constants.PARAM_PLACEHOLDER, parameter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return parameterizedDescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean isEnabled;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean errorLogsEnabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StringBuilder outputBuffer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a Ui object that controls I/O for user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isEnabled \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        errorLogsEnabled \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Read line using private scanner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return line input by user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints greeting."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints help."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Here is the list of instructions: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\nlist (list all tasks)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\nfind (find tasks by search phrase)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\nbye (exit program)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\ndone (mark an task as done by index)\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\ndelete (delete all tasks by index)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\nclear (remove all tasks from list)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\ntodo (add a todo to the list)\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\nevent (add an event to the list)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\ndeadline (add a deadline to the list)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints bye."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints storage file not found error."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageFileNotFoundError() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //println(\"Error: Save found not found.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints IO exception error."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageIoExceptionError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Error: Unable to load save file.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints storage invalid line error."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageInvalidLineError() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Error: Save file is corrupted.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints line if ui is isEnabled."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line to be printed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void println(String line) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isEnabled) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //System.out.println(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            outputBuffer.append(line).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Print error if errorLogsEnabled."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param e DukeException error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printError(DukeException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (errorLogsEnabled) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            outputBuffer.append(Unicode.SAD_FACE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .append(\"OOPS!!! \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .append(e.getMessage())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isEnabled() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isEnabled;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setEnabled(boolean isEnabled) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isEnabled \u003d isEnabled;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Whenever UI \"prints\" something it puts it into the outputBuffer (StringBuilder). This also resets the buffer."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return string ui output"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String flushBuffer() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String result \u003d outputBuffer.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Set length to 0 (resetting buffer)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        outputBuffer.setLength(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 135
    }
  },
  {
    "path": "src/main/java/duke/ui/Unicode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A class for special unicode characters definitions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Despite what Checkstyle says, these only work when they are escaped."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Unicode {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String TICK \u003d \"\\u2713\";//\"✓\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String CROSS \u003d \"\\u2718\";//\"✘\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String SAD_FACE \u003d \"\\u2639\";//\"☹\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cInsets top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cCircle fx:id\u003d\"displayPictureCircle\" fill\u003d\"DODGERBLUE\" radius\u003d\"49.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"usernameLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"98.0\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cInsets left\u003d\"6.0\" right\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 28
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import duke.gui.AutoCompleteVBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"564.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cAutoCompleteVBox fx:id\u003d\"autoCompleteVBox\" alignment\u003d\"BOTTOM_CENTER\" prefHeight\u003d\"0.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: white; -fx-border-width: 1;\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cHBox alignment\u003d\"BOTTOM_CENTER\" maxHeight\u003d\"43.0\" prefHeight\u003d\"43.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" maxWidth\u003d\"1.7976931348623157E308\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 30
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.ui.Unicode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.Duke.SAVE_FILE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static duke.Duke.WORKING_DIRECTORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This test should test the output generated for greeting."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void shouldOutputGreeting() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(duke.initAndGreet(), \"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This test tests the clear and todo functions, as well as the save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void clearTodoShouldUpdateAndOutputAndSaveCorrectly() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addSampleTodosToTasklist(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldBeEmpty(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void basicCheckingOfEventsValidation() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addSampleEventsToTasklist(duke);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response \u003d duke.getResponse(\"list\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1 [E][\" + Unicode.CROSS + \"] text (at: 02 of December 2019, 7:00PM)\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void basicCheckingOfDeadlinesValidation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addSampleDeadlinesToTasklist(duke);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response \u003d duke.getResponse(\"list\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1 [D][\" + Unicode.CROSS + \"] text (by: 01 of March 2019, 8:00PM)\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void basicCheckingOfDoneWithAllTypesOfTasks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        populateDukeTasklistWithSamples(duke);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setDoneOutOfAndWithinBounds(duke);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response \u003d duke.getResponse(\"list\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1 [T][\" + Unicode.TICK + \"] /at\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"2 [T][\" + Unicode.TICK + \"] lmao\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"3 [E][\" + Unicode.CROSS + \"] text (at: 02 of December 2019, 7:00PM)\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"4 [D][\" + Unicode.TICK + \"] text (by: 01 of March 2019, 8:00PM)\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void basicCheckingOfPersistentFileSaving() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        populateDukeTasklistWithSamples(duke);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setDoneOutOfAndWithinBounds(duke);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke nextDuke \u003d new Duke();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        nextDuke.initAndGreet();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response \u003d nextDuke.getResponse(\"list\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1 [T][\" + Unicode.TICK + \"] /at\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"2 [T][\" + Unicode.TICK + \"] lmao\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"3 [E][\" + Unicode.CROSS + \"] text (at: 02 of December 2019, 7:00PM)\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"4 [D][\" + Unicode.TICK + \"] text (by: 01 of March 2019, 8:00PM)\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(nextDuke);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void populateAndDelete() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        populateDukeTasklistWithSamples(duke);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setDeleteOutOfAndWithinBounds(duke);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response \u003d duke.getResponse(\"list\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1 [T][\" + Unicode.CROSS + \"] lmao\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void populateAndFind() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d initializeEmptyDuke();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        populateDukeTasklistWithSamples(duke);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"find \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, Unicode.SAD_FACE + \"OOPS!!! find cannot have an empty search phrase.\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"find ooof\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"_________________________________________\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"_________________________________________\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"find a\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"_________________________________________\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1. [T][\" + Unicode.CROSS + \"] /at\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"2. [T][\" + Unicode.CROSS + \"] lmao\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"3. [E][\" + Unicode.CROSS + \"] text (at: 02 of December 2019, 7:00PM)\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"4. [D][\" + Unicode.CROSS + \"] text (by: 01 of March 2019, 8:00PM)\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"_________________________________________\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"find lmao\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"_________________________________________\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"2. [T][\" + Unicode.CROSS + \"] lmao\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"_________________________________________\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return a duke ready for testing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return duke"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Duke initializeEmptyDuke() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.initAndGreet();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        clearAndCheckTasklistIsEmpty(duke);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return duke;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add sample todo tasks to tasklist."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void addSampleTodosToTasklist(Duke duke) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"todo\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, Unicode.SAD_FACE + \"OOPS!!! todo cannot have an empty description.\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"todo /at\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"  [T][\" + Unicode.CROSS + \"] /at\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Now you have 1 tasks in the list.\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldExist(duke);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldNotBeEmpty(duke);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"todo lmao\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"  [T][\" + Unicode.CROSS + \"] lmao\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Now you have 2 tasks in the list.\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"list\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"1 [T][\" + Unicode.CROSS + \"] /at\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"2 [T][\" + Unicode.CROSS + \"] lmao\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add sample events tasks."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void addSampleEventsToTasklist(Duke duke) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"event\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"event \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"event text\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"event text /at\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"event text /at text\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"event text /at 2/12/2019 1900\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldExist(duke);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldNotBeEmpty(duke);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add sample deadline tasks."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void addSampleDeadlinesToTasklist(Duke duke) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"deadline\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"deadline \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"deadline text\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"deadline text /by\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"deadline text /by text\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"deadline text /by 1/3/2019 2000\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldExist(duke);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldNotBeEmpty(duke);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Tests the clear function while also clearing the tasklist in duke."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void clearAndCheckTasklistIsEmpty(Duke duke) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"clear\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"Emptied task list.\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        response \u003d duke.getResponse(\"list\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(response, \"There are no tasks in your list.\\n\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Checks the save file has been created."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void saveFileShouldExist(Duke duke) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        File file \u003d new File(WORKING_DIRECTORY + File.separator + SAVE_FILE_NAME);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(file.exists());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void saveFileShouldBeEmpty(Duke duke) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldExist(duke);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        File file \u003d new File(WORKING_DIRECTORY + File.separator + SAVE_FILE_NAME);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(file.length(), 0);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void saveFileShouldNotBeEmpty(Duke duke) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        saveFileShouldExist(duke);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        File file \u003d new File(WORKING_DIRECTORY + File.separator + SAVE_FILE_NAME);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(file.length(), 0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Ensure the done feature updates properly."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setDoneOutOfAndWithinBounds(Duke duke) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"done -1\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"done 0\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"done 1\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"done 2\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"done 4\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"done 99\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Ensure the delete feature updates properly."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setDeleteOutOfAndWithinBounds(Duke duke) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"delete -1\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"delete 4\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"delete 0\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"delete 1\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"delete 2\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.getResponse(\"delete 99\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Populate duke with various tasks."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param duke duke to be tested"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void populateDukeTasklistWithSamples(Duke duke) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addSampleTodosToTasklist(duke);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addSampleEventsToTasklist(duke);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addSampleDeadlinesToTasklist(duke);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 272
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "event"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo something"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "event dinner /at mondays"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deadline project /by thursdays"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "crazoter": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "javac -cp ..\\src\\main\\java -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "crazoter": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "crazoter": 34
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "-": 106
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 292
    }
  }
]
