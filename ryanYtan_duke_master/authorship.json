[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 22,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalInstructionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ui.showLoadingSuccess();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                ui.print("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    new String[]{},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    new String[]{},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    e.getMessage()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            } catch (IllegalInstructionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                ui.print("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    new String[]{},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    new String[]{},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    e.getMessage()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 51,
      "-": 4
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "T | N | a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "T | N | b"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "T | N | a"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalInstructionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public AddCommand(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void execute(TaskList t, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            Task task \u003d TaskFactory.createTask(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            t.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            storage.writeToFile(t.asFileFormattedList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ui.print("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{\"Got it. I\u0027ve added this task:\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{String.format(\"Now you have %d tasks in the list\", t.size())},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                task.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Saving to file failed.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IllegalInstructionException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Invalid syntax! Did you forget a keyword in there?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 33
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return this.command.equals(EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public abstract void execute(TaskList t, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 27
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public DeleteCommand(String command, int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void execute(TaskList t, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            Task removed \u003d t.remove(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ui.print("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{\"Note. I\u0027ve removed this task:\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{String.format(\"You now have %d tasks in the list.\", t.size())},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                removed.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            storage.writeToFile(t.asFileFormattedList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String.format(\"That task does not exist! You have %d tasks in the list.\", t.size())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Saving to file failed.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public DoneCommand(String command, int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void execute(TaskList t, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            t.done(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ui.print("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{\"Nice! I\u0027ve marked this task as done:\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                t.get(index)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            storage.writeToFile(t.asFileFormattedList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String.format(\"That task does not exist! You have %d tasks in the list.\", t.size())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Saving to file failed.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void execute(TaskList t, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            storage.writeToFile(t.asFileFormattedList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ui.print("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{\"Thank you for using Duke!\", \"These are your tasks:\"},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                new String[]{\"Duke is exiting...\"},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                t.asFormattedList().toArray(new String[t.size()])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Saving to file failed.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void execute(TaskList t, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ui.print("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[]{\"Here are the tasks in your list:\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[0],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            t.asFormattedList().toArray(new String[t.size()])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class IllegalDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public IllegalDateException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class IllegalInstructionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public IllegalInstructionException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 7
    }
  },
  {
    "path": "src/main/java/duke/io/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static final String EXPECTED_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            \"The expected format is [dd/mm/yyyy hhmm], where \\\"hhmm\\\" is in 24-hrs\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Private constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Constructs a dateTime object with the specified dateTime string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param dateTime"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws IllegalDateException if dateTime is not in the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private DateTime(String dateTime) throws IllegalDateException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] separated \u003d dateTime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (separated.length !\u003d 2 || !isValidDate(separated[0]) || !isValidTime(separated[1]))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                throw new IllegalDateException(\"Invalid date format. \" + EXPECTED_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d dateTime.split(\"[/|\\\\s]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.day \u003d Integer.parseInt(el[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.month \u003d Integer.parseInt(el[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.year \u003d Integer.parseInt(el[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.hours \u003d Integer.parseInt(el[3].substring(0, 2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.minutes \u003d Integer.parseInt(el[3].substring(2, 4));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new IllegalDateException(\"Invalid date format. \" + EXPECTED_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory Method. Use this to construct this object. Returns a DateTime object with the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * specified DateTime string. The expected format is:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \"dd/mm/yyyy hhmm\" where hhmm is in 24hr time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param dateTime String in format [dd/mm/yyyy hhmm]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new DateTime object with the specified dateTime"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws IllegalDateException if dateTime is not in the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static DateTime of(String dateTime) throws IllegalDateException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Allowed formats:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     d/m/yyyy"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     dd/m/yyyy"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     d/mm/yyyy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     dd/mm/yyyy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Expected input format: \"dd/mm/yyyy\"."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static boolean isValidDate(String ddmmyyyy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d ddmmyyyy.split(\"[/]\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (el.length !\u003d 3 || el[0].length() \u003e 2 || el[1].length() \u003e 2 || el[2].length() !\u003d 4) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int dd \u003d Integer.parseInt(el[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int mm \u003d Integer.parseInt(el[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int yyyy \u003d Integer.parseInt(el[2]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int[] days \u003d {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (!(1 \u003c\u003d mm \u0026\u0026 mm \u003c\u003d 12 \u0026\u0026 1 \u003c\u003d dd \u0026\u0026 dd \u003c\u003d days[mm - 1])) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (!isLeapYear(yyyy) \u0026\u0026 mm \u003d\u003d 2 \u0026\u0026 dd \u003d\u003d 29) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Allowed formats:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     hhmm"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * with regard to standard time rules (between 0000 and 2359)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Expected input format: \"hhmm\"."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static boolean isValidTime(String hhmm) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (hhmm.length() !\u003d 4) return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int hour \u003d Integer.parseInt(hhmm.substring(0, 2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int minute \u003d Integer.parseInt(hhmm.substring(2, 4));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (0 \u003c\u003d hour \u0026\u0026 hour \u003c\u003d 23 \u0026\u0026 0 \u003c\u003d minute \u0026\u0026 minute \u003c\u003d 59) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Determines if the given year is a leap year."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this dateTime object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * The output format is \"dd/mm/yyyy hh:mm\"."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"%02d/%02d/%d %02d:%02d\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                day, month, year, hours, minutes);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 117
    }
  },
  {
    "path": "src/main/java/duke/io/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalInstructionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Handles parsing of user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new Task represented by the input, null otherwise"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws IllegalInstructionException"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static Command parse(String input)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws IllegalInstructionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String[] strings \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String command \u003d strings[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new AddCommand(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                int index \u003d Integer.parseInt(strings[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return new DoneCommand(command, index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                throw new IllegalInstructionException(\"Please enter a number after \\\"done\\\"!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                int index \u003d Integer.parseInt(strings[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return new DeleteCommand(command, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                throw new IllegalInstructionException(\"Please enter a number after \\\"delete\\\"!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new ExitCommand(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new IllegalInstructionException(\"Sorry! I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 51
    }
  },
  {
    "path": "src/main/java/duke/io/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public ArrayList\u003cString\u003e load()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return readFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Loading from file failed.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Writes the contents of the given List into a file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param list the list to be written"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void writeToFile(ArrayList\u003cString\u003e list)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String path \u003d filePath.substring(0, 7);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        File dir \u003d new File(path);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        if (!dir.exists()) dir.mkdirs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (String s : list) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            fw.write(s + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Helper method to get lines from the File specified "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private ArrayList\u003cString\u003e readFile()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        Stream\u003cString\u003e stream \u003d Files.lines(Paths.get(filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        stream.forEach(x -\u003e list.add(x));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        stream.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 61
    }
  },
  {
    "path": "src/main/java/duke/io/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Separator line between user input and program output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static final String BORDER \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String.format(\"%40s\", \"\\u2015\").replace(\u0027 \u0027, \u0027\\u2015\u0027);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * List to track user input history. Acts as a Stack data structure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private ArrayDeque\u003cString\u003e buffer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Creates a new Ui object with an empty buffer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.buffer \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Reads and returns a new string from stdin."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new input string from stdin"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String ret \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        buffer.push(ret);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Get the last command input by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return this.buffer.peek();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Helper method to flush the buffer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return true if the buffer is flushed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private boolean flushBuffer() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.buffer \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Prints the current buffer to System.out."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        print(buffer.peek());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Prints welcome message to System.out."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String logoOne \u003d   \" ____        _        \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String logoTwo \u003d   \"|  _ \\\\ _   _| | _____ \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String logoThree \u003d \"| | | | | | | |/ / _ \\\\\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String logoFour \u003d  \"| |_| | |_| |   \u003c  __/\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String logoFive \u003d  \"|____/\\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String greeting \u003d \"Welcome to\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        String question \u003d \"What can I do for you today?\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        print("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[]{greeting, logoOne, logoTwo, logoThree, logoFour, logoFive, question},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[0]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Prints error message if loading from storage fails."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        print("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[]{},"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[]{},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            \"No Task list found! Creating new Task list...\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Prints success message if loading from storage succeeds."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void showLoadingSuccess() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        print("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[]{},"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            new String[]{},"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            \"Saved tasks successfully loaded.\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Prints varargs number of Strings with the format:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * --BORDER--"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \u003cbeforeText[]\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \"\\t string1\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \"\\t string2\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * etc."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \u003cafterText[]\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * --BORDER--"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param args strings to be printed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void print(String[] beforeText, String[] afterText, String... args) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        System.out.println(\"\\t\" + BORDER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (String s : beforeText) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            System.out.println(\"\\t\" + s);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (String s : args) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            System.out.println(\"\\t\" + s);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (String s : afterText) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            System.out.println(\"\\t\" + s);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        System.out.println(\"\\t\" + BORDER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Prints varargs number of Strings with the format:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * --BORDER--"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \"\\t string1\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * \"\\t string2\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * etc."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * --BORDER--"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param args strings to be printed"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void print(String... args) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (String s : args) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            System.out.println(\"\\t\" + s);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 150
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Description of the task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Boolean variable to check if the task is done, or not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Type of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Constructs a task with the given description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Helper method: returns ✓ or ✘ (tick or cross) depending on the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * truth condition of isDone."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return isDone ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task, for writing to file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task suitable for writing to file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toFileFormattedString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"%s | %s | %s)\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                type, getStatusIcon().equals(\"✓\") ? \"Y\" : \"N\" , description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    } "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"[%s][%s] %s\", type, getStatusIcon(), description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 67
    }
  },
  {
    "path": "src/main/java/duke/task/TaskDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class TaskDeadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Private constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Constructs an TaskDeadline with the specified description and time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param by the time at which the event is due"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskDeadline(String description, String by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskDeadline(String description, String by, String done) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.isDone \u003d done.equals(\"Y\") ? true : false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory method. Use this to construct this object. Returns a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * TaskDeadline object with the specified description and time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param by the time at which the event is due"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new TaskDeadline object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static TaskDeadline of(String description, String by) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String dateTime \u003d DateTime.of(by).toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskDeadline(description, dateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            // \u0027by\u0027 processed as normal string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskDeadline(description, by);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory method. Use this to construct this object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns a TaskDeadline object from its string form."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param this object\u0027s string form"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new TaskDeadline object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static TaskDeadline ofFormattedForm(String formattedForm)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        if (!formattedForm.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Given string is not in the correct format\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            // FORMAT STRING T | YN | ASD | BY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d formattedForm.split(\"\\\\s+\\\\|\\\\s+\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskDeadline(el[2].trim(), el[3].trim(), el[1].trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task, for writing to file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task suitable for writing to file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toFileFormattedString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"%s | %s | %s | %s\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                type, getStatusIcon().equals(\"✓\") ? \"Y\" : \"N\" , description, by);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    } "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"[%s][%s] %s (by: %s)\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                type, getStatusIcon(), description, by);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 87
    }
  },
  {
    "path": "src/main/java/duke/task/TaskEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class TaskEvent extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Private constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Constructs an TaskEvent with the specified description and time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param at the time at which the event occurs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskEvent(String description, String at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskEvent(String description, String at, String done) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.isDone \u003d done.equals(\"Y\") ? true : false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory method. Use this to construct this object. Returns an TaskEvent object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * with the specified description and time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param at the time at which the event occurs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new TaskEvent object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static TaskEvent of(String description, String at) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String dateTime \u003d DateTime.of(at).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskEvent(description, dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskEvent(description, at);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory method. Use this to construct this object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns a TaskEvent object from its string form."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param this object\u0027s string form"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new TaskEvent object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static TaskEvent ofFormattedForm(String formattedForm)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        if (!formattedForm.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Given string is not in the correct format\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            // FORMAT STRING T | YN | ASD | AT"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d formattedForm.split(\"\\\\s+\\\\|\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskEvent(el[2].trim(), el[3].trim(), el[1].trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task, for writing to file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task suitable for writing to file"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toFileFormattedString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"%s | %s | %s | %s\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                type, getStatusIcon().equals(\"✓\") ? \"Y\" : \"N\" , description, at);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    } "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"[%s][%s] %s (at: %s)\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                type, getStatusIcon(), description, at);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 85
    }
  },
  {
    "path": "src/main/java/duke/task/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalInstructionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.IllegalDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.io.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static Task createTask(String command)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws IllegalInstructionException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d command.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            switch (el[0]) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return TaskTodo.of(command.substring(\"todo\".length()).trim());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String[] deadline \u003d command.split(\"/by\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    by \u003d DateTime.of(deadline[1].trim()).toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    System.out.println(\"Using token as string...\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    by \u003d deadline[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return TaskDeadline.of(deadline[0].substring(\"deadline\".length()).trim(), by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String[] event \u003d command.split(\"/at\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                String at;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    at \u003d DateTime.of(event[1].trim()).toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    System.out.println(\"Using token as string...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    at \u003d event[1].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return TaskEvent.of(event[0].substring(\"event\".length()).trim(), at);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                throw new IllegalInstructionException(\"Invalid syntax. Please consult user manual.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new IllegalInstructionException(\"Invalid syntax! Did you miss a keyword?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns a task from its formatted String form."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param formattedString task in its string form"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new task representing the formattedString"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static Task createTaskFromFormattedString(String formattedString)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return TaskTodo.ofFormattedForm(formattedString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (DukeException e1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return TaskDeadline.ofFormattedForm(formattedString); "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            } catch (DukeException e2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    return TaskEvent.ofFormattedForm(formattedString); "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                } catch (DukeException e3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                    throw new DukeException(\"String is not of a valid form.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 74
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.task.TaskFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * The list of Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * The default max capacity, although this is not enforced."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static final int MAX_ITEMS \u003d 100;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        list \u003d new ArrayList\u003cTask\u003e(MAX_ITEMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e inputList)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (String str : inputList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            list.add(TaskFactory.createTaskFromFormattedString(str));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the number of elements in this list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the number of elements in this list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Appends the specified task to the end of this list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param t task to be appended to this list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public boolean add(Task t) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Marks the task at the specified index in the list as done. The specified index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * assumes a one-based list (i.e first element of the list is of index 1)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param index the index of the element to be marked as done"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public void done(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        Objects.checkIndex(index - 1, list.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        list.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the task at the specified index in the list. The specified index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * assumes a one-based list (i.e first element of the list is of index 1). The"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * task is returned as a String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param index index at which the element is to be obtained."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the String representation of the task at the specified index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String get(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        Objects.checkIndex(index - 1, list.size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return list.get(index - 1).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Removes and returns the task at the specified index in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param index index at which the element is to be removed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the task that was removed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        Objects.checkIndex(index - 1, list.size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return list.remove(index - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns an ArrayList\u003cString\u003e containing the formatted form of this Task list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return an ArrayList\u003cString\u003e containing the formatted form of this Task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public ArrayList\u003cString\u003e asFormattedList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ArrayList\u003cString\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ret.add(String.format(\"%d. %s\", i , t));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns an ArrayList\u003cString\u003e containing the string form of this Task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return an ArrayList\u003cString\u003e containing the string form of this Task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public ArrayList\u003cString\u003e asStringList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ArrayList\u003cString\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ret.add(t.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns an ArrayList\u003cString\u003e containing the string form of this Task list to"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * write to file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return an ArrayList\u003cString\u003e containing the string form of this Task list to write to file"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public ArrayList\u003cString\u003e asFileFormattedList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        ArrayList\u003cString\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ret.add(t.toFileFormattedString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        StringBuilder ret \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            ret.append(String.format(\"%d. %s\\n\", i, t));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ret.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 147
    }
  },
  {
    "path": "src/main/java/duke/task/TaskTodo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class TaskTodo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskTodo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private TaskTodo(String description, String done) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.isDone \u003d done.equals(\"Y\") ? true : false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory method. Use this to construct this object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns a TaskTodo object with the specified description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new TaskTodo object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static TaskTodo of(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return new TaskTodo(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Factory method. Use this to construct this object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns a TaskTodo object from its string form."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param this object\u0027s string form"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return a new TaskTodo object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public static TaskTodo ofFormattedForm(String formattedForm)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        if (!formattedForm.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new DukeException(\"Given string is not in the correct format\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            // FORMAT STRING T | YN | ASD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d formattedForm.split(\"\\\\s+\\\\|\\\\s+\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return new TaskTodo(el[2].trim(), el[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task, for writing to file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task suitable for writing to file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toFileFormattedString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"%s | %s | %s\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                type, getStatusIcon().equals(\"✓\") ? \"Y\" : \"N\" , description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    } "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 55
    }
  },
  {
    "path": "src/main/java/javafiles.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/command/AddCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/command/Command.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/command/DeleteCommand.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/command/DoneCommand.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/command/ExitCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/command/ListCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/exception/DukeException.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/exception/IllegalDateException.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/exception/IllegalInstructionException.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/io/DateTime.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/io/Parser.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/io/Storage.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/io/Ui.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/task/Task.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/task/TaskDeadline.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/task/TaskEvent.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/task/TaskFactory.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/task/TaskList.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./duke/task/TaskTodo.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "./Duke.java"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 20
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[T][n] run bakery"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[T][n] clean phone"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[T][n] change mouse"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[D][n] submit this thingy (by: thursday next week)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[D][n] do 2012 notes (by: monday)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[E][n] orbital splashdown (at: aug 28th)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "1. [T][n] run bakery"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "2. [T][n] clean phone"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "3. [T][n] change mouse"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "4. [D][n] submit this thingy (by: thursday next week)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "5. [D][n] do 2012 notes (by: monday)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "6. [E][n] orbital splashdown (at: aug 28th)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "\t[T][n] orbital poster"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "1. [T][n] run bakery"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "2. [T][n] clean phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "3. [T][n] change mouse"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "4. [D][n] submit this thingy (by: thursday next week)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "5. [D][n] do 2012 notes (by: monday)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "6. [E][n] orbital splashdown (at: aug 28th)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "7. [T][n] orbital poster"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 44
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "todo run bakery"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "todo clean phone"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "todo change mouse"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "deadline submit this thingy /by thursday next week"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "deadline do 2012 notes /by monday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "event orbital splashdown /at aug 28th"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "todo orbital poster"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 21
    }
  }
]
