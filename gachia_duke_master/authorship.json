[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveVersion \u003d \"0.1.4\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "run {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    standardInput \u003d System.in;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "gachia": 26
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "gachia": 17
    }
  },
  {
    "path": "src/main/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "D false project meeting/Aug 6th 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true dance"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "D false get food/tmr"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "E true dance party/my place"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true borrow book"
      }
    ],
    "authorContributionMap": {
      "gachia": 7
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for adding Tasks and its subclasses"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A subclass of Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private String taskCmd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    final String timePattern \u003d \"d MMMM yyyy, h:mma\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(timePattern);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor for AddCommand to set the Task command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param taskCmd User input of what Task is being generated"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public AddCommand(String taskCmd) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.taskCmd \u003d taskCmd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to add a Task object into the list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The method will check the user input for a valid Command and adds the appropriate Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * accordingly. It will throw an exception if the user inputs are unrecognisable for the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * method to execute correctly."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks Contains the list of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If taskCmd and taskName is invalid and format of subsequent fields,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * such as /by, /at and dateTime, is wrong"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String taskName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String[] userWords;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "        switch (taskCmd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskName \u003d ui.readDesc().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (taskName.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "            tasks.addTask(new Task(taskName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskName \u003d ui.readDesc().trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (taskName.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "            userWords \u003d taskName.split(\"/by\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (userWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The date/time of a deadline cannot be empty or is wrongly typed.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "                LocalDateTime dateObj \u003d LocalDateTime.parse(userWords[1].trim(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "                String date \u003d dateObj.format(dateTimeFormat);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "                tasks.addTask(new Deadline(userWords[0].trim(), date));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "                throw new DukeException(\"Could not recognise date and time. Please follow the format: dd/mm/yyyy HHmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskName \u003d ui.readDesc().trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (taskName.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "            userWords \u003d taskName.split(\"/at\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (userWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The date/time of an event cannot be empty or is wrongly typed.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "            tasks.addTask(new Event(userWords[0].trim(), userWords[1].trim()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Wrong type of command entered\" + taskCmd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 80
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the user input as a Command object"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected boolean hasExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Default Constructor to set hasExit boolean variable to false"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Will be set to true if ExitCommand is called"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "        hasExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Abstract method for the sub-classes of Command to use. This method will execute"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * differently based on the sub-class called"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks Contains the list of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If there is an error"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    abstract void execute(Storage storage, TaskList tasks, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns boolean variable hasExit for checking exit status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return hasExit boolean variable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return hasExit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 33
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents a different type of Task called Deadline that holds an additional"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * parameter for date and time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of deadline and due date and time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param by The due date and time of the Deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Deadline(String desc, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor with additional parameter to set its completion status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param by The due date and time of the Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param isDone The boolean variable to note if Deadline is completed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Deadline(String desc, String by, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden writeFormat method to specify that it is a Deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * when saving the data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Format for saving data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"D \" + isDone + \" \" + description + \"/\" + by;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden toString method to print out Deadline object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Printing format of Deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"[D]\" + super.getTask() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 48
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for deleting Tasks for the list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to delete a Task object from the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The method will check the user input for a valid index and deletes the selected"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Task object from the list. It will throw an exception if the index is invalid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks Contains the list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If deletion \u003c 0 or \u003e size of list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int deletion \u003d ui.readIndex();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (deletion \u003c 0 || deletion \u003e tasks.getTaskList().size()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Task not found\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        tasks.deleteTask(deletion);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 24
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for setting Tasks as completed"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to mark a Task object as completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The method will check the user input for a valid index and change the selected"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Task object\u0027s isDone boolean variable to true."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the index is invalid"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks Contains the list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If taskNo \u003c 0 or \u003e size of list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int taskNo \u003d ui.readIndex();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (taskNo \u003c 0 || taskNo \u003e tasks.getTaskList().size()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Task not found\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        tasks.setDoneTask(taskNo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 25
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Main class responsible for running Duke Chatbot"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor of Duke class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param filepath The directory of the text file for populating task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskList \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Method to start up Duke Chatbot"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "                c.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "        new Duke(\"src/main/data/duke.txt\").run();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "gachia": 47
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents Exceptions from the Duke project"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to print custom error messages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param error Error message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 13
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents a different type of Task called Event that holds an"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * additional parameter for the venue"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of event and venue"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param at The venue of the Event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Event(String desc, String at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor with additional parameter to set its completion status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param at The venue of the Event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param isDone The boolean variable to note if Event is completed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Event(String desc, String at, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden writeFormat method to specify that it is a Event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * when saving the data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Format for saving data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"E \" + isDone + \" \" + description + \"/\" + at;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden toString method to print out Event object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Printing format of Event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"[E]\" + super.getTask() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 48
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for exiting the Duke Chatbot"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to save the list data to the specified"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * text file. The method will set the hasExit boolean variable to true, call"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * the saveData method from storage and display the Goodbye Message to the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks Contains the list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        hasExit \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage.saveData(tasks.getTaskList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 21
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for printing out all of the tasks in the list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method to print out all of the tasks inside the list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * using the method from TaskList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks Contains the list of tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        tasks.showTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 18
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Responsible for interpreting Commands"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Checks user input for a Command and returns the associated Command class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param userCmd The command from user input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If user input is an invalid command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static Command parse(String userCmd) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "        switch (userCmd) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new AddCommand(userCmd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Invalid Command\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 30
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the read and write of data into a text file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to specify the file path of the text file used"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * for saving and loading of Tasks for the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param filePath directory of text file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns a ArrayList of Task type for Duke to use as an initial list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Data is obtained from a text file with a specific format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return List of Tasks to be used"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException When format is wrong and filePath is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            //System.out.println(f.getAbsolutePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "                String type \u003d sc.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "                switch (type) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    boolean done \u003d sc.nextBoolean();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    String taskName \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    list.add(new Task(taskName, done));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    done \u003d sc.nextBoolean();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    taskName \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    String[] userWords \u003d taskName.split(\"/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    list.add(new Deadline(userWords[0], userWords[1], done));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    done \u003d sc.nextBoolean();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    taskName \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    userWords \u003d taskName.split(\"/\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    list.add(new Event(userWords[0], userWords[1], done));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    throw new DukeException(\"Wrong type used inside of save file\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"File not found. Generating empty list...\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Saves all of the Tasks inside the list into a text file for future usage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the file path was not specified in storage upon initialisation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * However, an IOException is thrown instead of DukeException to be able"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * to exit the program despite not saving"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param list List of Tasks used in Duke"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "            String data \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "                data +\u003d t.writeFormat() + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fw.write(data);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "            System.out.println(\"Failed to save data. File path may not have been specified.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 87
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the tasks the user enters into Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of the Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of the Task and whether it is done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param isDone The boolean variable to note if Task is completed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Task(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns a Tick or X symbol based on whether the Task is completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return The status icon of the Task object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Sets the boolean variable isDone to true, marking the Task as completed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the description of the Task with its status"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Task description and status in the format of \"[Status] description\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String output \u003d \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the boolean variable isDone of the Task object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return status of task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the Task object in a String format for saving into a text file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @returns description and status of Task for saving"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"T \" + isDone + \" \" + description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overrides toString method for printing Task object, which includes Task type"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return display format of Task, \"[T][Status] description\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"[T]\" + getTask();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 75
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the list of tasks that Duke holds"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Default Constructor to generate an empty ArrayList of Task type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to take in a populated ArrayList of Task type (i.e. from text file)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param list ArrayList of Task Type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Adds a Task object into the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param task A Task object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Deletes a Task from the list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param deleteIndex Index of selected Task Object, 1-based index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void deleteTask(int deleteIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "        Task temp \u003d list.remove(deleteIndex - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + temp"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns selected Task object from list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param taskIndex Index of selected Task object, 1-based index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return list.get(taskIndex - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints out the list of tasks that Duke holds"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void showTaskList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "            System.out.println((i + 1) + \".\" + list.get(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Sets boolean variable isDone of selected Task object to true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param doneIndex Index of selected Task object, 1-based index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void setDoneTask(int doneIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "        list.get(doneIndex - 1).markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + list.get(doneIndex - 1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the list of tasks that Duke holds as an object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return ArrayList of Task type"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 81
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the User Interface of Duke, including the user input fields"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    final String lineSpace \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Default Constructor to initialise Scanner object for user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints out Welcome Message for the launch of Duke Chatbot"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        final String startMessage \u003d lineSpace + \"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\" + lineSpace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo + startMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints Goodbye Message when user closes the Duke Chatbot"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String endMessage \u003d \"Bye. Hope to see you again!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(endMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a straight line for clarity purposes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.print(lineSpace);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a specified error message"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param error Message of error"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Reads the user input and returns a String"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return User input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String userCmd \u003d sc.next();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return userCmd;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the description of Task specified in the user input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Use only after reading the initial command input of the user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String readDesc() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String desc \u003d sc.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the index of the Task specified in the user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Use only after reading the initial command input of the user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public int readIndex() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 80
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @CsvSource({\"todo, dance\", \"deadline, homework /by 01/09/2019 2359\", \"event, party /at NUS\"})"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void testExecute(String cmd, String task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            AddCommand ac \u003d new AddCommand(cmd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ac.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to add item into list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 36
    }
  },
  {
    "path": "src/test/java/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList.addTask(new Task(\"test task\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testExecute(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            DeleteCommand dc \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            dc.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            assertTrue(taskList.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to delete item in list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 36
    }
  },
  {
    "path": "src/test/java/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList.addTask(new Task(\"test task\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testExecute(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            DoneCommand dc \u003d new DoneCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            dc.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            assertTrue(taskList.getTask(1).getIsDone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to change item in list to done\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 36
    }
  }
]
