[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Defer use of Shadow and JUnit until a later stage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"bye\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean willTerminate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 14
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public abstract String execute(TaskList tasks, Storage fileMgr) throws DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean willTerminate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 17
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Date byDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DeadlineCommand(String command, String description, Date byDeadline) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.byDeadline \u003d byDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d new DeadlineTask(this.description, this.byDeadline);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in DeadlineCommand\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 26
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_WRITER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected Date byDeadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DeadlineTask(String description, Date byDeadline) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.byDeadline \u003d byDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.byDeadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \"D | %d | %s | %s\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.isComplete ? 1 : 0,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.description,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DATE_WRITER.format(this.byDeadline)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task and its deadline to the base toString() representation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), DATE_FORMATTER.format(this.byDeadline));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 33
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DeleteCommand(String command, int id) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against invalid (non-existent) task IDs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (this.id \u003c 1 || this.id \u003e tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidTaskException(this.id, this.getCommand());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d tasks.deleteTask(id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in DeleteCommand\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 27
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DoneCommand(String command, int id) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against invalid (non-existent) task IDs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (this.id \u003c 1 || this.id \u003e tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidTaskException(this.id, this.getCommand());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d tasks.getTask(id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in DoneCommand\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\", task.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 27
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Storage fileMgr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.fileMgr \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attempt to re-construct TaskList from data in file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            tasks \u003d fileMgr.readTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.ui.print(String.format(\"%s\\n\\nInitialised with empty TaskList\", e.toString()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Show Duke\u0027s logo and welcome message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.ui.showWelcome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        while (isRunning \u0026\u0026 this.ui.hasCommand()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String command \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Parse the command to return a Command object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                this.ui.print(c.execute(tasks, fileMgr));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                isRunning \u003d !c.willTerminate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                this.ui.print(e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            new Duke(DEFAULT_FILEPATH).run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            System.err.println(\"\\nERROR: Unable to resolve default file directory. Exiting...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 46,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Stores the command whose parsing led to the exception being thrown"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String errorSource;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.errorSource \u003d \"Unknown error source\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeException(String message, String errorSource) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.errorSource \u003d errorSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[DukeException] %s\\n  \u003e %s\", this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 20
    }
  },
  {
    "path": "src/main/java/DukeIncorrectArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeIncorrectArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String commandFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeIncorrectArgumentsException("
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numCommandArgs, String commandFormat, int numArgs, String errorSource) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Expected %d argument(s) for command \u0027%s\u0027, but got %d\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                numCommandArgs, errorSource.split(\" \", 2)[0], numArgs),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.commandFormat \u003d commandFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeIncorrectArgumentsException] %s\\n  | %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.commandFormat, this.errorSource); "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 20
    }
  },
  {
    "path": "src/main/java/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidArgumentException(String argName, String argType, String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Argument \u0027%s\u0027 of command \u0027%s\u0027 is not of type %s\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                argName, errorSource.split(\" \", 2)[0], argType),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidArgumentException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 16
    }
  },
  {
    "path": "src/main/java/DukeInvalidEncodedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidEncodedTaskException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidEncodedTaskException("
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numTaskArgs, String taskType, int numArgs, String errorSource) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Expected %d tokens for encoded task of type \u0027%s\u0027, but got %d\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                numTaskArgs, taskType, numArgs),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidEncodedTaskException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 17
    }
  },
  {
    "path": "src/main/java/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidTaskException(int id, String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"No task exists with ID %d\", id),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidTaskException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 15
    }
  },
  {
    "path": "src/main/java/DukeNoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeNoCommandException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeNoCommandException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"No command issued\", \"\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeNoCommandException] %s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage()); "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 12
    }
  },
  {
    "path": "src/main/java/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeUnknownCommandException(String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Build the error message from the supplied error command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Unknown command type \u0027%s\u0027\", errorSource.split(\" \", 2)[0]),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeUnknownCommandException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 16
    }
  },
  {
    "path": "src/main/java/DukeWriteToFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeWriteToFileException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeWriteToFileException(String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"Failed to write updated TaskList to file\", errorSource);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeWriteToFileException] %s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage()); "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 12
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Date atTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public EventCommand(String command, String description, Date atTime) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d new EventTask(this.description, this.atTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in EventCommand\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 26
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_WRITER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected Date atTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public EventTask(String description, Date atTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.atTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \"E | %d | %s | %s\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.isComplete ? 1 : 0,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.description,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DATE_WRITER.format(this.atTime)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task and its time period to the base toString() representation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), DATE_FORMATTER.format(this.atTime));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 33
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"list\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 9
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Command templates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DONE_TEMPLATE \u003d \"done \u003cid\u003e\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DELETE_TEMPLATE \u003d \"delete \u003cid\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String TODO_TEMPLATE \u003d \"todo \u003cdescription\u003e\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DEADLINE_TEMPLATE \u003d \"deadline \u003cdescription\u003e /by \u003cdate time\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String EVENT_TEMPLATE \u003d \"event \u003cdescription\u003e /by \u003cdate time\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Date parser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_PARSER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Parse trivial commands here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Catch empty commands (ENTER key pressed with no other input)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeNoCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Determine the type of command from the first token"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (command.split(\" \")[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"list\": outputs all tasks in the TaskList in a formatted manner"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"done\" sets the status of the task with a given task ID (its position) to completed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDone(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"delete\" removes a given task by its task ID from the TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDelete(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"todo\": creates a Todo task (no attached date/time)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseTodo(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"deadline\": creates a Deadline task (to be completed by a specified date/time)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDeadline(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"event\": creates a Event task (no attached date/time)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseEvent(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against all unknown commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeUnknownCommandException(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parseDone(String command) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against too few (e.g. done) or too many (e.g. done 5 example) arguments"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DONE_TEMPLATE, tokens.length - 1, command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // GUARD: against non-integer task IDs (attempt to parse the id of the task as an int)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            int id \u003d Integer.valueOf(tokens[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new DoneCommand(command, id);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"id\", \"int\", command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parseDelete(String command) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against too few (e.g. done) or too many (e.g. done 5 example) arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DELETE_TEMPLATE, tokens.length - 1, command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // GUARD: against non-integer task IDs (attempt to parse the id of the task as an int)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            int id \u003d Integer.valueOf(tokens[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new DeleteCommand(command, id);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"id\", \"int\", command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parseTodo(String command) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty todo description"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027todo\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, TODO_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Otherwise entire argString is the description of the Todo task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String argString \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new TodoCommand(command, argString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parseDeadline(String command) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty deadline description"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027deadline\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DEADLINE_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] args \u003d command.split(\" \", 2)[1].split(\" /by \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against incorrect number of arguments or missing \u0027 /by \u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // args should contain two arguments: description, byDeadline"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (args.length !\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(2, DEADLINE_TEMPLATE, args.length, command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attempt to parse the date to construct the Deadline"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            Date eventTime \u003d Parser.DATE_PARSER.parse(args[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new DeadlineCommand(command, args[0], eventTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"date | time\", \"Date\", command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parseEvent(String command) throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty event description"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027event\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, EVENT_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] args \u003d command.split(\" \", 2)[1].split(\" /at \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against incorrect number of arguments or missing \u0027 /at \u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // args should contain two arguments: description, atTime"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (args.length !\u003d 2) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(2, EVENT_TEMPLATE, args.length, command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attempt to parse the date to construct the Event"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            Date eventTime \u003d Parser.DATE_PARSER.parse(args[1]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new EventCommand(command, args[0], eventTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"date | time\", \"Date\", command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 144
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_PARSER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Scanner fileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // No file matching this path: first construct any missing folders in the file path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Then create the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // File exists: bind a Scanner to read input directly from the file when needed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.fileReader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Task parseEncodedTask(String encodedString) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Escape the pipe character as it is a metacharacter in regex"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d encodedString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (tokens[0]) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (tokens.length !\u003d 3) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(3, \"TodoTask\", tokens.length, encodedString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task \u003d new TodoTask(tokens[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"DeadlineTask\", tokens.length, encodedString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Date eventTime \u003d Storage.DATE_PARSER.parse(tokens[3]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                task \u003d new DeadlineTask(tokens[2], eventTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"DeadlineTask\", 4, encodedString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"EventTask\", tokens.length, encodedString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Date eventTime \u003d Storage.DATE_PARSER.parse(tokens[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                task \u003d new EventTask(tokens[2], eventTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"EventTask\", 4, encodedString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeException(\"Encoded string corresponds to an unrecognised task type\", encodedString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.complete();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Reads all encoded tasks from the file specified by filePath and returns the TaskList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TaskList readTaskList() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            tasks.addTask(Storage.parseEncodedTask(fileReader.nextLine()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Writes all tasks in the TaskList in an encoded format to the file specified by filePath "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void writeTaskList(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numTasks \u003d tasks.numberOfTasks();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numTasks; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            bw.write(tasks.getTask(i).toEncodedString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            bw.write(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Flush and close the buffered writer"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String desc \u003d \"This Storage instance reads and writes TaskList data from the file with path:\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"%s\\n%s\", desc, this.filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 100
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Does not return the UTF-16 character for a tick or cross respectively"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Java SDK 11 incorrectly encodes Unicode characters on Windows returning ? for all of them"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.isComplete ? \"V\" : \"X\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public abstract String toEncodedString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 30
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task getTask(int id) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.get(id - 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task deleteTask(int id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.remove(id - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public int numberOfTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Retrieve the length of the task list and the number of digits of the maximum task ID"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int length \u003d this.numberOfTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return \"Your task list is empty!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Build format string to print all task IDs with the same width, left-padded with spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            long numDigits \u003d Math.round(Math.log10(length) + 0.5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String formatTemplate \u003d \"%1$\" + numDigits + \"s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                result.append(String.format(formatTemplate, i + 1))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                      .append(String.format(\". %s\\n\", this.tasks.get(i).toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Trim trailing newline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            result.setLength(result.length() - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 51
    }
  },
  {
    "path": "src/main/java/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TodoCommand(String command, String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d new TodoTask(this.description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in TodoCommand\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 23
    }
  },
  {
    "path": "src/main/java/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"T | %d | %s\", this.isComplete ? 1 : 0, this.description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task to the base toString() representation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 15
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DUKE_LOGO \u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DUKE_INTRODUCTION \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DIVIDER_PROTOTYPE \u003d \"____________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DIVIDER_BAR \u003d String.format(\"    %s%s\\n\", Ui.DIVIDER_PROTOTYPE, Ui.DIVIDER_PROTOTYPE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        System.out.println(Ui.DUKE_LOGO);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.print(Ui.DUKE_INTRODUCTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.sc.hasNext();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.sc.nextLine().trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** Pretty-prints a given message string to the standard output stream."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Adds indentation and horizontal lines to the message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @param message a string to embellish then print to \u003ccode\u003eSystem.out\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        result.append(Ui.DIVIDER_BAR)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "              .append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Retrieves each individual line in the message and pads them with spaces to the left"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] lines \u003d message.split(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (String line: lines) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            result.append(\"     \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                  .append(line)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                  .append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        result.append(Ui.DIVIDER_BAR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        System.out.println(result.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 56
    }
  }
]
