[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "test {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "run {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 33,
      "-": 15
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "T | 0 | return a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "T | 0 | return b"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "T | 0 | return c"
      }
    ],
    "authorContributionMap": {
      "hooncp": 3
    }
  },
  {
    "path": "data/helpfile.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "This is duke.Duke\u0027s support of cli commands:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Lists out all your tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "done (number)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Marks the task at (number) to done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "delete (number)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Deletes the task at (number)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "bye"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Saves and exit the bot"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "find (keyword)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Finds all the tasks with (keyword) in the description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "help"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Shows all the commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "todo (description)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Creates a todo task with (description)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "event (description) /at (DD/MM/YYYY HHMM)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Creates a event task with (description) at (DD/MM/YYYY HHMM)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deadline (description) /by (DD/MM/YYYY HHMM)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "-Creates a deadline task with (description) at (DD/MM/YYYY HHMM)"
      }
    ],
    "authorContributionMap": {
      "hooncp": 28
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        dialog.setPadding(new Insets(0, 10, 0, 10));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final Circle clip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Creates a new duke.DialogBox."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param text String representation of user input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param img Image of the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return Instance of a duke.DialogBox"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Creates a new duke.DialogBox."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param text String representation of duke input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param img Image of the duke.Duke"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return Instance of a duke.DialogBox"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 78
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * The duke.Duke program implements an application that helps users to keep track of their tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @author hooncp"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this(\"./data/data.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Initialises the duke bot and if data file is not found, creates a new file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param filePath String representation of where the data file is stored"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String representation of the output."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return output from duke.Duke"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        //boolean isTestForAssertion \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        //assert isTestForAssertion \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            assert command !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            output \u003d command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (InputMismatchException | IllegalArgumentException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                | DateTimeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            output \u003d ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String greeting() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return ui.greet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 67
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            MainWindow userInterface \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            userInterface.setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            userInterface.dukeGreet();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Greets the user when Duke is initialised."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void dukeGreet() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String input \u003d duke.greeting();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                DialogBox.getDukeDialog(input, dukeImage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 62
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a parser object which takes in user input and changes them into command for duke to understand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static String stringCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts a string given by user into actual command to be executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param stringCommandParser String representation of the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return duke.command.Command which would be executed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws InputMismatchException duke.command.Command is not recognised"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static Command parse(String stringCommandParser) throws InputMismatchException, DateTimeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        stringCommand \u003d stringCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] commandSplitBySpaces \u003d stringCommand.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        switch (commandSplitBySpaces[0]) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return createByeCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return createListCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return createDoneCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return createFindCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return createDeleteCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return createAddCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Command createListCommand(String[] commandSplitBySpaces) throws InputMismatchException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length !\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, are you trying to call \\\"list\\\"?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new ListCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Command createByeCommand(String[] commandSplitBySpaces) throws InputMismatchException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length !\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, are you trying to call \\\"bye\\\"?\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new ByeCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Command createDoneCommand(String[] commandSplitBySpaces) throws InputMismatchException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length !\u003d 2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, are you trying to call \\\"done\\\\space\\\\number,...\\\" ?\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new DoneCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Command createDeleteCommand(String[] commandSplitBySpaces) throws InputMismatchException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length !\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, are you trying to call \\\"delete \\\\number\\\" ?\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new DeleteCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Command createFindCommand(String[] commandSplitBySpaces) throws InputMismatchException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length !\u003d 2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, are you trying to call \\\"find \\\\number\\\" ?\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new FindCommand(commandSplitBySpaces);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Command createAddCommand(String[] commandSplitBySpaces) throws InputMismatchException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"The description cannot be empty\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] detail;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        switch (commandSplitBySpaces[0]) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String commandWithoutDeadline \u003d stringCommand.substring(\"deadline\".length()).trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            detail \u003d commandWithoutDeadline.split(\" /by \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new AddCommand(\"deadline\", detail);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new AddCommand(\"todo\", commandSplitBySpaces);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String commandWithoutEvent \u003d stringCommand.substring(\"event\".length()).trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            detail \u003d commandWithoutEvent.split(\" /at \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new AddCommand(\"event\", detail);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 111
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a storage object which will read and write files into specific file path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for storage that reads and writes to data file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param filePath where the data file is stored"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Reads data from filepath and creates an array list of duke.task.Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return an arraylist of duke.task.Task from read data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws IOException file is not found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        BufferedReader in \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        while ((line \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String regex \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String[] data \u003d line.split(regex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            switch (data[0]) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                t \u003d new Todo(data[2], changeStringToBoolean(data[1]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                t \u003d new Deadline(data[2], data[3], changeStringToBoolean(data[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                t \u003d new Event(data[2], data[3], changeStringToBoolean(data[1]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                t \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            assert t !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts number into boolean. 1 for true and 0 for false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param number number to be determined"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private boolean changeStringToBoolean(String number) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (number.equals(\"1\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Writes the data into filepath."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void rewriteData() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                fw.write(t.toDataString() + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            System.out.println(\"Saving data to: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 91
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a task list that would be populated by task objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor that takes in a array list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param tasks Arraylist of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return list of task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the task at the index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Task getTask(int number) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return tasks.get(number);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the size of the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the size of the task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int getTasksSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Adds a task into list of task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Sets task at number to be done in task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param number number for task to be deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void done(int number) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Task task \u003d tasks.get(number);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Deletes duke.task.Task at number in task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param number number for task to be deleted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void delete(int number) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Task task \u003d tasks.get(number);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        tasks.remove(number);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 79
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a user interface which interacts with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the number of tasks in the taskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printNumberOfTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Now you have \" + taskList.getTasksSize()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                + \" tasks in the list.\") + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the string representation of task t."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param t duke.task.Task to be printed out"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printTask(Task t) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (t.toString()) + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String representation of all the tasks in taskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        int number \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String outputString \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            outputString \u003d outputString + number + \". \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            number++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return outputString + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the error message."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param error exception to be caught"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printErrorMessage(String error) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"Oops!!! \" + error + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the pre-message for the add command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printAddedMessage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\") + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the pre-message for the delete command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printDeletedMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Noted. I\u0027ve removed the task(s):\") + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the pre-message for the done command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printDoneMessage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Nice! I\u0027ve marked the task(s) as done: \") + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the pre-message for the list command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printListMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Here are the tasks in your list: \") + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of greetings for duke.Duke bot."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Beep Boop! I\u0027m Duke\\nWhat can I do for you?\") + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the message for the bye command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (\"Bye. Hope to see you again soon!\") + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * String representation of the message for the find command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String printFindMessage(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String outputString;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        outputString \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String taskString \u003d count + \".\" + t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            outputString \u003d outputString + taskString;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return outputString + \"\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 120
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which adds duke.task.Task to the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.command.AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public AddCommand(String type, String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(commandSplitBySpaces);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Task addTask;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            addTask \u003d createTodo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            addTask \u003d createDeadline();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            addTask \u003d createEvent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"type not found\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assert addTask !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        taskList.add(addTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return createMessage(ui, addTask, taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Todo createTodo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String joinedString \u003d String.join(\" \", commandSplitBySpaces);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String details \u003d joinedString.substring(\"todo\".length()).trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Todo(details);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Deadline createDeadline() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"You are either missing description or time\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Deadline(commandSplitBySpaces[0], commandSplitBySpaces[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Event createEvent() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (commandSplitBySpaces.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"You are either missing description or time\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Event(commandSplitBySpaces[0], commandSplitBySpaces[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private String createMessage(Ui ui, Task addTask, TaskList taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String outputString \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        outputString \u003d outputString + ui.printAddedMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        outputString \u003d outputString + ui.printTask(addTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        outputString \u003d outputString + ui.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 88
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which shuts down duke.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.command.ByeCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ByeCommand(String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(commandSplitBySpaces);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        storage.rewriteData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return ui.bye();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Checks if duke.Duke will end."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 43
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which has specific uses."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see AddCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see ByeCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see ListCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    final String[] commandSplitBySpaces;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for all commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Command(String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.commandSplitBySpaces \u003d commandSplitBySpaces;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String to be written."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Checks if duke.Duke will end."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which deletes duke.task.Task specified in an index in the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.command.DeleteCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public DeleteCommand(String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(commandSplitBySpaces);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String outputString \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Integer[] numbers;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            numbers \u003d convertToInteger(commandSplitBySpaces[1].split(\",\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Arrays.sort(numbers, Collections.reverseOrder());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            outputString \u003d outputString + ui.printDeletedMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            for (Integer number : numbers) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                outputString \u003d outputString + ui.printTask(taskList.getTask(number - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                taskList.delete(number - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            outputString \u003d outputString + ui.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            outputString \u003d outputString + ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return outputString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, the task number does not exist?\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, can you please write numbers after delete?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Integer[] convertToInteger(String[] stringArr) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Integer[] index \u003d new Integer[stringArr.length];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (int i \u003d 0; i \u003c stringArr.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            index[i] \u003d Integer.parseInt(stringArr[i]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 68
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which changes duke.task.Task specified in an index in the task list to be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.command.DoneCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public DoneCommand(String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(commandSplitBySpaces);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String outputString \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Integer[] numbers;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            numbers \u003d convertToInteger(commandSplitBySpaces[1].split(\",\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Arrays.sort(numbers, Collections.reverseOrder());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            outputString \u003d outputString + ui.printDoneMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            for (Integer number : numbers) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                outputString \u003d outputString + ui.printTask(taskList.getTask(number - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                taskList.done(number - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return outputString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, the task number does not exist?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new InputMismatchException(\"I\u0027m sorry, can you please write a number after done?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts a string array to an Integer array."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param stringArr String representative of the array"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return Integer representative of the string array"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Integer[] convertToInteger(String[] stringArr) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Integer[] index \u003d new Integer[stringArr.length];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (int i \u003d 0; i \u003c stringArr.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            index[i] \u003d Integer.parseInt(stringArr[i]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 71
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which finds the Tasks in the task list which contains the same use input String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String keywordToFind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.command.FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public FindCommand(String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(commandSplitBySpaces);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        keywordToFind \u003d commandSplitBySpaces[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (Task t : taskList.getTasks()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (t.getDescription().contains(keywordToFind)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return ui.printFindMessage(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a command which lists out the Tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.command.ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param commandSplitBySpaces String representation of the user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ListCommand(String[] commandSplitBySpaces) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(commandSplitBySpaces);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Executes the command by using the three arguments provided."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param taskList taskList used to store tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (taskList.getTasksSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalArgumentException(\"Nothing found in list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String outputString \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        outputString \u003d outputString + ui.printListMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        outputString \u003d outputString + ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a type of duke.task.Task object with a fixed time format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.task.Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description description of the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param by          time in the format of dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Another constructor for duke.task.Deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description description of the deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param by          time in the format of dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param isDone      boolean value on whether it is done or not"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the String representation of the deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the String representation of the deadline"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String representation of Deadline object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return String that would be written into data file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateTimeSplit \u003d by.toString().split(\"T\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String date \u003d dateTimeSplit[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] timeSplit \u003d time.split(\":\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String dataBy \u003d dateSplit[2] + \"/\" + dateSplit[1] + \"/\" + dateSplit[0] + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                + timeSplit[0] + timeSplit[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"D | \" + super.toDataString() + \" | \" + dataBy;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a type of duke.task.Task object with a fixed time format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description String representation of the description of event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param at          time in the format of dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Event(String description, String at) throws DateTimeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (at.length() \u003c\u003d LENGTH_OF_DATE_DESCRIPTION) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new DateTimeException(\"Date should be in DD/MM/YYYY HHMM format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description String representation of the description of event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param at          time in the format of dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param isDone      boolean value on whether it is done or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the String representation of the event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the String representation of the event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String representation of Event object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return String representation that would be written into data file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateTimeSplit \u003d at.toString().split(\"T\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String date \u003d dateTimeSplit[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] timeSplit \u003d time.split(\":\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String dataAt \u003d dateSplit[2] + \"/\" + dateSplit[1] + \"/\" + dateSplit[0] + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                + timeSplit[0] + timeSplit[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"E | \" + super.toDataString() + \" | \" + dataAt;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 68
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a task object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    static final int LENGTH_OF_DATE_DESCRIPTION \u003d 32;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.task.Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description String representation of the description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Task(String description) throws DateTimeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.task.Task which takes in a String description and whether it is done or not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description String representation of the description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param isDone      whether it is done or not"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Task(String description, boolean isDone) throws DateTimeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the String description of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the String description of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the boolean value whether task is done or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return boolean on task is done or not"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Sets duke.task.Task to be done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts whether task is done or not to a status."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * + symbols means done - symbol means not done"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return String representation on whether task is done or not"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (isDone ? \"+\" : \"-\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the String representation of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the String representation of the task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String representation of Deadline object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return String that would be written into data file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return isDone ? \"1 | \" + getDescription() : \"0 | \" + getDescription();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a type of duke.task.Task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructor for duke.task.Todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description String representation of the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Another constructor for duke.task.Todo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param description String representation of the description of Todo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param isDone      boolean value on whether it is done or not"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Gets the String representation of the todo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the String representation of the todo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the String representation of Event object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return String representation that would be written into data file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"T | \" + super.toDataString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 48
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hooncp": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hooncp": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void toStringDeadlineTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertEquals(\"[D][-] CS2103 (by: 2019-12-02T18:00)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Deadline(\"CS2103\", \"02/12/2019 1800\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void toDataStringDeadlineTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertEquals(\"D | 0 | CS2103 | 02/12/2019 1800\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Deadline(\"CS2103\", \"02/12/2019 1800\").toDataString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 19
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void toStringTodoTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertEquals(\"[T][-] Help me\", new Todo(\"Help me\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void toDataStringTodoTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertEquals(\"T | 0 | Help me\", new Todo(\"Help me\").toDataString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 16
    }
  },
  {
    "path": "test-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "todo book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "find books"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hooncp": 3
    }
  },
  {
    "path": "test-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hooncp": 21
    }
  }
]
