[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "//    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "test {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "run {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "FelixNWJ": 29
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the Hbox that contains the dialog that we want to display."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a DialogBox based on the DialogBox fxml file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param text is the input from the user or output from Duke that we want to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param img is the image representing the user or Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainController.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void setResizeImage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.displayPicture.fitWidthProperty().bind(this.widthProperty().divide(2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.displayPicture.fitHeightProperty().bind(this.heightProperty().divide(2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Static command to create a DialogBox that contains user input and the user\u0027s image."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param text is the user input that we want to display."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param img is the image representing the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the DialogBox object that contains the arguments loaded into this static method."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        var db \u003d new DialogBox(text, img);;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.dialog.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.dialog.setFont(new Font(\"Verdana\", 12));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Static command to create a DialogBox that contains Duke\u0027s response and Duke\u0027s reply image."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param text is the response from Duke that we want to display."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param img is the image representing Duke."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the DialogBox object that contains the arguments loaded into this static method."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.BLACK, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.dialog.setTextFill(Color.RED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        db.dialog.setFont(new Font(\"Verdana\", 12));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 104
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongInputException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Duke class that is an application that mainly contains capabilities to store, locate, and mark tasks as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Contains a dukeUI that outputs Strings based on the command input by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Contains a storage that has the file that we write to and read from in order to save and load ask data respectively."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Contains a tasks that is TaskList which wraps around an ArrayList that stores our Task objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private DukeUi dukeUI;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private StorageData storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a Duke object that calls the Constructor for the Duke object that uses a String as an argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Created due to Application requiring a constructor that takes in no parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a Duke Object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param filePath This is the File that is used to load data from and save into."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.dukeUI \u003d new DukeUi();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.storage \u003d new StorageData(new File(filePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.tasks \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(\"File name has changed.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Starts the Duke Application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Prints out a welcome message and waits for user input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * User input is then passed through the Parser object in the Duke object, creating a Command object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Command object is then executed accordingly."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            assert !input.isEmpty() : \"Empty command created\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            assert c !\u003d null : \"Parser.parseCommand(input) did not create a command object\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return c.execute(this.tasks, this.dukeUI, this.storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (DukeWrongInputException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (DukeMissingDescriptionException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (DukeEmptyDescriptionException exx) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return exx.getMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (DukeWrongTimeFormatException exxx) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return exxx.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Method that loads and shows the Graphical User Interface when we start up the Duke Application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets title of the Duke application and makes it resizable."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets the controller of the root to be a Duke object that is created at this point before displaying the window."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param stage Stage that we want to display to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            VBox vb \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Scene scene \u003d new Scene(vb);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            stage.setTitle(\"Isla\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            stage.setResizable(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            fxmlLoader.\u003cMainController\u003egetController().setDuke(new Duke());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Used to get the welcome message from the dukeUI."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a welcome message."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.dukeUI.getWelcomeMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 117,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Class to launch the Duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/MainController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Controller class for the main window of the Duke application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Command Line Input is at the bottom left of the window."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * User input entered in reflected on the right window, along with the reply of the Duke application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Any commands that involve listing potentially more than one task will output the list above the command line input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class MainController {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private VBox root;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private SplitPane mainWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private SplitPane leftWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private AnchorPane helpArea;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private AnchorPane textInputArea;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private HBox dummyArea;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Button confirm;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private ScrollPane rightWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private GridPane dialogBox;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private int responseArea \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Reddit.jpg\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Image dialogImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Isla.gif\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Image taskImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Task.jpg\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Image mainBackgroundImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/mainBackground.png\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets the Duke attribute of the controller to a particular Duke object to process user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param mainDuke a Duke object that we want to use to process our user input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void setDuke(Duke mainDuke) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.duke \u003d mainDuke;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Initialises the Stage properties that is shown."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * The children which are windows in the Stage are set to always grow when the root grows."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Scrollpane on the right is binded to the Hbox inside it so that the scrollpane automatically scrolls down."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets a background image to the top left of the stage window and binds it so that it resizes accordingly"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        root.setVgrow(mainWindow, Priority.ALWAYS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        //root.setVgrow(rightWindow, Priority.ALWAYS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        //root.setVgrow(leftWindow, Priority.ALWAYS);;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        helpArea.prefWidthProperty().bind(leftWindow.widthProperty());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        helpArea.prefHeightProperty().bind(leftWindow.heightProperty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        rightWindow.vvalueProperty().bind(dialogBox.heightProperty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ImageView temp \u003d new ImageView(mainBackgroundImage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        temp.setPreserveRatio(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        temp.fitWidthProperty().bind(helpArea.widthProperty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        temp.fitHeightProperty().bind(helpArea.heightProperty());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        helpArea.getChildren().addAll(temp);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        userInput.nodeOrientationProperty().bind(textInputArea.nodeOrientationProperty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Generates an output based on the command input by the user in the Textfield userInput."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If the command by the user potentially involves listing multiple tasks, the list is displayed in listArea."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Otherwise, user input and output by Duke are displayed in the dialogBox."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If the command by the user is \"bye\", the application will shut down."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String response \u003d this.duke.run(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        DialogBox duke \u003d DialogBox.getDukeDialog(response, dialogImage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(input.equals(\"list\") || input.contains(\"find\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            duke \u003d DialogBox.getDukeDialog(\"List in the main area.\", dialogImage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DialogBox list \u003d DialogBox.getDukeDialog(response, taskImage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            list.setResizeImage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            dummyArea.getChildren().clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            dummyArea.getChildren().addAll(list);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        DialogBox user \u003d DialogBox.getUserDialog(input, userImage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        dialogBox.add(user, 0, responseArea++);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        dialogBox.add(duke, 1, responseArea++);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        user.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        duke.setAlignment(Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            ((Stage) mainWindow.getScene().getWindow()).close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 128
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Command object where the user input is \"bye."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Prints message that is for shutting down of the Duke app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Terminates program afterwards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return ui.getByeMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        //System.exit(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents an abstract generic Command class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Contains attribute details that represents the details of the Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a Command Object which has no details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a Command Object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.details \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a TodoCommand Object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the details of the task to be stored in the TodoCommand Object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a TodoCommand Object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when details is an empty string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addTodoCommand(String details) throws DukeEmptyDescriptionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new TodoCommand(details);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a DeadlineCommand Object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the details of the task to be stored in the DeadlineCommand Object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a DeadlineCommand Object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException   when details is an empty string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException when details has missing information or details are in an incorrect format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addDeadlineCommand(String details) throws DukeMissingDescriptionException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeEmptyDescriptionException, DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new DeadlineCommand(details);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a EventCommand Object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the details of the task to be stored in the EventCommand Object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a EventCommand Object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException when has missing information or details are in an incorrect format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException   when details is an empty string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addEventCommand(String details) throws"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeMissingDescriptionException, DukeEmptyDescriptionException, DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new EventCommand(details);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a ListCommand Object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a TodoCommand Object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addListCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a DoneCommand Object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the task number of the completed task to be stored in the DoneCommand Object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a DoneCommand Object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when details is an empty string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addDoneCommand(String details) throws DukeEmptyDescriptionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new DoneCommand(details);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a DeleteCommand Object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the task number of the task to be deleted and stored in the DeleteCommand Object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a DeleteCommand Object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when details is an empty string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addDeleteCommand(String details) throws DukeEmptyDescriptionException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new DeleteCommand(details);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a ByeCommand Object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a ByeCommand Object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addByeCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a FindCommand Object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the keyWord to use in finding tasks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a FindCommand Object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addFindCommand(String details) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new FindCommand(details);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a UpdateCommand object to be executed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details is the details for the update, including task number and what to update"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a UpdateCommand object with the specified detials."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException if the update input is not followed by anything else."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException if the update input is followed by incomplete information."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command addUpdateCommand(String details) throws DukeEmptyDescriptionException,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeMissingDescriptionException  {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new UpdateCommand(details);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a Command Object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details is the details to be stored in the Command Object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a Command Object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Command(String details) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the description of the Command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the details of the Command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.details;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Carries out the command based on what type of Command Object it is."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks   TaskList of Duke Object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui      DukeUI of Duke Object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public abstract String execute(TaskList tasks, DukeUi ui, StorageData storage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 157
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.time.TimeConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Deadline which contains a description of the deadline and when the deadline is due."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DeadlineCommand extends Command{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String byWhen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a Deadline Object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details contains both the description of the deadline and when the deadline is due."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when details is an empty string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException when details contains missing information or is in a wrong format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DeadlineCommand(String details) throws DukeEmptyDescriptionException, DukeMissingDescriptionException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(details.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            String[] info \u003d details.split(\"/by\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new DukeMissingDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.description \u003d info[0].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.byWhen \u003d TimeConverter.convert(info[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds the Deadline Object to the TaskList of the Duke Object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Stores the Deadline in the StorageData and prints out a message to confirm that it has been added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String details \u003d this.getDetails();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Deadline current \u003d new Deadline(this.description, this.byWhen);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert current !\u003d null : \"Deadline object not created\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.add(current);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        storage.addData(current);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return ui.getAddDeadlineMessage(current, tasks.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 64
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a DeleteCommand Object which contains the task number to be deleted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a DeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details contains the task number of the task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DeleteCommand(String details) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.taskNumber \u003d Integer.valueOf(details);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Deletes the task number from the TaskList in the Duke Object, then erases the data from the file in StorageData."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Task deletedTask \u003d storage.deleteTaskInData(this.taskNumber, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return ui.getTaskDeletedMessage(deletedTask, tasks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeTaskDoneException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a DoneCommand Object which contains the task number to be deleted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a DoneCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details contains the task number of the task that has been completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DoneCommand(String details) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.taskNumber \u003d Integer.valueOf(details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Marks the task as done from the TaskList in the Duke Object, then updates the data from the file in StorageData."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            storage.markTaskDoneInData(this.taskNumber, tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return ui.getTaskDoneMessage(tasks, this.taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (DukeTaskDoneException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return \"OOPS!!! Invalid Task Number detected.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 42
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.time.TimeConverter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Event which contains a description of the Event and when it occurs at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String duringWhen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a Event Object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details contains both the description of the Event and when the Event occurs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when details is an empty string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException when details contains missing information or is in a wrong format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public EventCommand(String details) throws DukeMissingDescriptionException, DukeEmptyDescriptionException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(details.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            String[] info \u003d details.split(\"/at\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new DukeMissingDescriptionException(\"event\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.description \u003d info[0].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.duringWhen \u003d TimeConverter.convert(info[1].trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds the Event Object to the TaskList of the Duke Object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Stores the Event in the StorageData and prints out a message to confirm that it has been added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Event current \u003d new Event(this.description, this.duringWhen);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert current !\u003d null : \"Event object is not created\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.add(current);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        storage.addData(current);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return ui.getAddEventMessage(current, tasks.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 60
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a FindCommand Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a Find Command Object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details contains the keyword used to find the specific tasks required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public FindCommand(String details) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.keyWord \u003d details;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Finds the Tasks that contains the keyword in the TaskList and prints out using the UI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke App."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui UI of Duke App."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke App."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return ui.getKeyWordTasks(tasks, this.keyWord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a ListCommand object to list out the tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a ListCommand Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the data from the TaskList, and prints out each task for the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return ui.getTasks(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 31
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.storagedata.StorageData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a TodoCommand Object which contains a description of the task to be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TodoCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Instantiates a TodoCommand Object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details contains description of the task to be done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when details is an empty string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public TodoCommand(String details) throws DukeEmptyDescriptionException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(details.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds the Todo Object to the TaskList of the Duke Object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Stores the Todo in the StorageData and prints out a message to confirm that it has been added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks TaskList of Duke Object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param ui DukeUI of Duke Object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param storage StorageData of Duke Object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String execute(TaskList tasks, DukeUi ui, StorageData storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String details \u003d this.getDetails();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Todo current \u003d new Todo(details);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert current !\u003d null : \"Todo object not created.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.add(current);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        storage.addData(current);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return ui.getAddTodoMessage(current, tasks.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 46
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the exception that occurs when the command is known but there is no information."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeEmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeEmptyDescriptionException(String eventType) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(\"OOPS!!! The description of a \" + eventType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a generic exception that occurs in the Duke App"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeException(String eventType) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(eventType);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeMissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the exception that occurs when command is known but there is missing information or information is formatted incorrectly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeMissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeMissingDescriptionException(String eventType) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(\"OOPS!!! The description of a \" + eventType + \" has missing information.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTaskDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the exception that occurs when a task is already done but user inputs command to mark it as done again."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeTaskDoneException extends DukeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeTaskDoneException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(\"OOPS!!! Task is already completed.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeWrongInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the exception that occurs when user inputs a command that is not valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeWrongInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeWrongInputException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeWrongTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Class representing an exception whereby wrong time format is given from user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeWrongTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a DukeWrongTimeFormatException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeWrongTimeFormatException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(\"Wrong Input Format detected. \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \"Please input date and time in a DD/MM/YYYY time format. E.G 14/05/2019 1800\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 14
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the Parser that breaks down the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * The parser reads the first word which gives the type of command to be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * The rest of the line is then used as an argument for the constructing the command object as details of the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Calls the static method of the abstract Command class to create the corresponding Command Object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param fullLine contains the type of command and its details if applicable"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a Command object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeWrongInputException when user gives an invalid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException when user gives a command without any information where applicable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException when user gives a command with missing information or"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * incorrectly formatted information."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Command parseCommand(String fullLine) throws DukeWrongInputException, DukeEmptyDescriptionException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeMissingDescriptionException, DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Scanner commandScanner \u003d new Scanner(fullLine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String typeOfCommand \u003d commandScanner.next().trim().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String detailsOfCommand \u003d fullLine.substring(typeOfCommand.length()).trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        switch(typeOfCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addTodoCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addDeadlineCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addEventCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addDoneCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addDeleteCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addByeCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addFindCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Command.addUpdateCommand(detailsOfCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeWrongInputException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 65
    }
  },
  {
    "path": "src/main/java/duke/storagedata/StorageData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.storagedata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeUpdateTodoTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeTaskDoneException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the Storage that contains the File where the data of the Duke App is stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class StorageData {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private File data;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates the StorageData Object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks if the file that is passed into the constructor is present."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If present, it uses the file as its data and stores it in the StorageData Object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If not present, a FileNotFound exception is throw, where a new File is created and used instead."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param newData the File that is used to store the data of the Duke App."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public StorageData(File newData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            boolean exists \u003d newData.exists();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if(exists) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.data \u003d newData;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new File(\"data/tasks.txt\").createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assert newData.exists() : \"Data not created\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.data \u003d newData;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                System.out.println(\"New save data created\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the File object that contains the data we want."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a File object containing the data."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public File getData() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.data;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks what type of Task object to be saved into the file and saves the details accordingly."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param current the Task object to be saved."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void addData(Task current) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(current instanceof Todo) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.addTodoData(current.getDescription());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else if (current instanceof Event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.addEventData(current.getDescription(), ((Event) current).getPeriod());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.addDeadlineData(current.getDescription(), ((Deadline) current).getTime());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds the data of the Todo Task into the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param toDo contains the details of the Todo Object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void addTodoData(String toDo) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            FileWriter writer \u003d new FileWriter(data, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            writer.write(\"T - not done - \" + toDo + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds the data of the Deadline Task into the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param description contains the details of the deadline."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param byWhen contains the time when the deadline is due"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void addDeadlineData(String description, String byWhen) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            FileWriter writer \u003d new FileWriter(data, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            writer.write(\"D - not done - \" + description + \" - \" + byWhen + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds the data of the Event Task into the file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param description contains the details of the Event"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param duringWhen contains the time when the event takes place."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void addEventData(String description, String duringWhen) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            FileWriter writer \u003d new FileWriter(data, true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            writer.write(\"E - not done - \" + description + \" - \" + duringWhen + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Modifies the data of the Task in the file to mark is as done."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param taskNumber contains the number of the Task is the Duke App."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void markTaskDoneInData(int taskNumber, TaskList tasks) throws DukeTaskDoneException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.done(taskNumber);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new File(\"data/tasks.txt\").delete();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new File(\"data/tasks.txt\").createNewFile();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            File newData \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.addData(tasks.get(i));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Deletes the data of the Task in the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param taskNumber contains the number of the Task in the Duke App to be deleted."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the Task object that is being deleted."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Task deleteTaskInData(int taskNumber, TaskList tasks) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Task deletedTask \u003d tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.delete(taskNumber);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new File(\"data/tasks.txt\").delete();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new File(\"data/tasks.txt\").createNewFile();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            File newData \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.addData(tasks.get(i));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Updates the tasks in TaskList first by calling the method, and then rewriting the save data."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks is the TaskList of the Duke that is running."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details is the details of the Tasks to be updated and what information to replace."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException if there is incomplete user input after update command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException if there is missing user input after update command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String updateTasksInData(TaskList tasks, String details) throws DukeMissingDescriptionException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeEmptyDescriptionException, DukeUpdateTodoTimeException, DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String updatedTask \u003d tasks.update(details);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new File(\"data/tasks.txt\").delete();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new File(\"data/tasks.txt\").createNewFile();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            File newData \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.addData(tasks.get(i));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return updatedTask;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Translates the data from the File stored in the StorageData object into Tasks."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * The Tasks are then stored in an ArrayList."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return an ArrayList that stores the tasks that have been translated from the data in the File object."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws FileNotFoundException when the file to used does not exist."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert this.data.exists() : \"File is null\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Scanner fileInput \u003d new Scanner(this.data);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        while(fileInput.hasNextLine()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            String task \u003d fileInput.next();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            switch(task) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                String[] contents \u003d fileInput.nextLine().trim().split(\"-\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assert contents.length \u003d\u003d 3 : \"Todo task in file not saved/ formatted correctly\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assert !contents[2].isEmpty() : \"Todo description in file is empty\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                Task current \u003d new Todo(contents[2].trim());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                if(contents[1].trim().equals(\"done\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    current.markAsDone();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    assert current.getStatus() \u003d\u003d true : \"Todo not marked as done when method indicates so\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                taskArrayList.add(current);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                contents \u003d fileInput.nextLine().trim().split(\"-\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assert contents.length \u003d\u003d 4 : \"Deadline task in file not saved/ formatted correctly\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                current \u003d new Deadline(contents[2].trim(), contents[3].trim());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                if(contents[1].trim().equals(\"done\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    current.markAsDone();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    assert current.getStatus() \u003d\u003d true : \"Deadline not marked as done when method indicates so\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                taskArrayList.add(current);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                contents \u003d fileInput.nextLine().trim().split(\"-\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assert contents.length \u003d\u003d 4 : \"Event task in file not saved/ formatted correctly\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                current \u003d new Event(contents[2].trim(), contents[3].trim());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                if(contents[1].trim().equals(\"done\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    current.markAsDone();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    assert current.getStatus() \u003d\u003d true : \"Event not marked as done when method indicates so\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                taskArrayList.add(current);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return taskArrayList;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 241
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Deadline that contains the description of the deadline and when it is due by."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates the Deadline Task Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param description contains the description of the Deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param time contains the information of when the deadline is due."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Deadline(String description, String time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the time when the deadline ends."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the time of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Updates the time of the Deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param time the new time to be updated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String updateTime(String time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a string to be stored in a File so that loading from the file will return a correct Deadline object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Format is a Letter D for deadline, its description, and by when it has to be done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a string representing a Deadline object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Event that contains the description of the Event and when it occurs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    protected String period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates the Event Task Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param description contains the description of the Event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param period contains the information of when the Event occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Event(String description, String period) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the time period when the event occurs at."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the time when the event occurs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Updates the period of the Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param period the new period to be updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String updatePeriod(String period) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a string to be stored in a File so that loading from the file will return a correct Event object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Format is a Letter E for event, its description, and by when it occurs at"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a string representing a Event object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + period + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a Task Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Status of the Task is set to not Done by default."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param description contains details of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the boolean representing whether the task is done or not, done being true, not done being false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a boolean representing whether the task is done or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the icon of the status of the Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * A Tick represents done, a Cross represents not done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the status of the Task represented as an icon."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the description of a Task object in general."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the description of the Task object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * isDone boolean of the Task Object is changed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.isDone \u003d !this.isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Updates the description of the Task object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param newDescription"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String updateDescription(String newDescription) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns a string of a general Task object with a status icon that shows if its done or not."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a string representing a general Task object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 78
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Todo Task that is to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a Todo Object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param description contains details of the task to be done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a string to be stored in a File so that loading from the file will return a correct Todo object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Format is a Letter T for Todo and its description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a string representing a Todo object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 27
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeTaskDoneException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeUpdateTodoTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.time.TimeConverter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a class that wraps around an ArrayList that stores the Tasks of the Duke App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a TaskList when there is no saved file and initialises the ArrayList to store 100 Tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e(100);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert this.tasks !\u003d null : \"ArrayList not created for TaskList\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates a TaskList when there is a saved file present."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param current is the ArrayList that is translated from the File stored in the StorageData of the Duke App."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e current) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.tasks \u003d current;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the number of tasks stored in the ArrayList in the TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the number of tasks in the TaskList object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the Task object at that particular index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param taskNumber is the number of the task that we want to obtain from the ArrayList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the Task object in the TaskList that is stored at the index represented by taskNumber."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Task get(int taskNumber) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return tasks.get(taskNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Adds a particular Task object to the ArrayList of the TaskList object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param current the Task object that we want to add."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void add(Task current) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.add(current);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void delete(int taskNumber) throws IndexOutOfBoundsException{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets a Task from the ArrayList stored in the TaskList object to done status."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param taskNumber is the number of the Task that we want to set as done from the TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the String that represents the task that is done along with its modified status."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws IndexOutOfBoundsException when a taskNumber greater than the TaskList size or a negative number is given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeTaskDoneException when a taskNumber that corresponds to a task that is already done is given."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void done(int taskNumber) throws DukeTaskDoneException, IndexOutOfBoundsException{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Task current \u003d tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(current.getStatus()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeTaskDoneException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            current.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            assert current.getStatus() \u003d\u003d true : \"Task not marked as done when method indicates so.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * First method called to check if the update command is followed by a tasknumber to be updated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If command is correct, an overloaded update method will be called instead that checks what is to be modified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details the details of the Task to be changed and what to update it with."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeEmptyDescriptionException if the update command is followed by no user input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException if the update command is followed by incomplete user input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String update(String details) throws DukeEmptyDescriptionException, DukeMissingDescriptionException,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeWrongTimeFormatException, DukeUpdateTodoTimeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Scanner infoReader \u003d new Scanner(details);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(details.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"update\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else if (infoReader.hasNextInt()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            int taskNumber \u003d infoReader.nextInt() - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if(infoReader.hasNextLine()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                return this.update(taskNumber, infoReader.nextLine().trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new DukeMissingDescriptionException(\"update\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeMissingDescriptionException(\"update\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks what part of the Task object is to be modified. If an invalid field is given, an exception is thrown."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If the description is to be modified, the update is done immediately."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * If the time is to be modified, another method is called to verify if the Task is an Event or Deadline first."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param taskNumber is the taskNumber of the TaskList to be updated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param details is the details of the update itself."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DukeMissingDescriptionException  if the update command has missing information afterward."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String update(int taskNumber, String details) throws DukeMissingDescriptionException,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeWrongTimeFormatException, DukeUpdateTodoTimeException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Scanner infoReader \u003d new Scanner(details);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String whatToUpdate \u003d infoReader.next();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(whatToUpdate.equals(\"description\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Task current \u003d this.get(taskNumber);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if(infoReader.hasNextLine()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                return current.updateDescription(infoReader.nextLine().trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new DukeMissingDescriptionException(\"update\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else if (whatToUpdate.equals(\"time\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if(infoReader.hasNextLine()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                return this.updateTime(taskNumber, infoReader.nextLine().trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new DukeMissingDescriptionException(\"update\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeMissingDescriptionException(\"update\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private String updateTime(int taskNumber, String details) throws DukeWrongTimeFormatException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            DukeUpdateTodoTimeException, DukeMissingDescriptionException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(details.isEmpty()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeMissingDescriptionException(\"update\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Task current \u003d this.get(taskNumber);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(current instanceof Event) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            String updatedTime \u003d TimeConverter.convert(details);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return ((Event)current).updatePeriod(updatedTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else if (current instanceof Deadline) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            String updatedTime \u003d TimeConverter.convert(details);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return ((Deadline)current).updateTime(updatedTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeUpdateTodoTimeException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 161
    }
  },
  {
    "path": "src/main/java/duke/time/TimeConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.exception.DukeWrongTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Utility class to convert a string into a specified time and date format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TimeConverter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts a text into a date and time format e.g 2nd of December 2019, 6:00pm."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param text is the date and time to be converted into format above."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String that consists of date and time with specified format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static String convert(String text) throws DukeWrongTimeFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(text.split(\"/\").length !\u003d 3) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DukeWrongTimeFormatException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String[] date \u003d text.trim().split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String dateWord \u003d TimeConverter.dateToWords(date[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String time \u003d TimeConverter.timeConverter(date[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        System.out.println(dateWord + \", \" + time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return dateWord + \", \" + time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts a date represented in numerical form to a word form."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param dateFull a date in numerical format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String that represents a date in words."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static String dateToWords(String dateFull) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String[] date \u003d dateFull.split(\"/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(date[0].contains(\"0\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            date[0] \u003d date[0].replace(\"0\", \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if(date[1].contains(\"0\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            date[1] \u003d date[1].replace(\"0\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String month;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        switch (date[1]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"January\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"Febuary\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"March\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"April\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"5\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"May\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"6\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"June\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"7\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"July\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"8\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"August\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"9\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"September\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"10\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"October\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"11\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"November\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case \"12\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"December\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            month \u003d \"month\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String day \u003d date[0].equals(\"1\") ? date[0] + \"st\" : date[0].equals(\"2\") ? date[0] + \"nd\" :"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                date[0].equals(\"3\") ? date[0] + \"rd\" : date[0] + \"th\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return day + \" of \" + month + \" \" + date[2];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts a time represented by a string in 24hour format to a 12hour format indicating am or pm."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param time time represented by a string in 24hour format"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return time represented by a string in 12hour format."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static String timeConverter(String time) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        int numberTime \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (numberTime \u003c 1000) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return String.valueOf(numberTime).substring(0, 1) + \".\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    String.valueOf(numberTime).substring(1, 3) + \"am\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else if (numberTime \u003c 1200) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return String.valueOf(numberTime).substring(0, 2) + \".\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    String.valueOf(numberTime).substring(2, 4) + \"am\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else if (numberTime \u003c 1300) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return String.valueOf(numberTime).substring(0, 2) + \".\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    String.valueOf(numberTime).substring(2, 4) + \"pm\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            numberTime -\u003d 1200;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (numberTime \u003c 1000) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                return String.valueOf(numberTime).substring(0, 1) + \".\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        String.valueOf(numberTime).substring(1, 3) + \"pm\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                return String.valueOf(numberTime).substring(0, 2) + \".\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        String.valueOf(numberTime).substring(2, 4) + \"pm\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 128
    }
  },
  {
    "path": "src/main/java/duke/ui/DukeUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents the User Interface of the Duke App."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Lists the messages that are printed out when a corresponding command is executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DukeUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DukeUi() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the String representing the standard welcome message from Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String containing a welcome message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "  public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getByeMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return \"Bye! Hope to see you soon! :)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getAddDeadlineMessage(Deadline current, int numberOfTasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String deadLine \u003d current.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String update \u003d \"Now you have \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (reply + \"\\n\" + deadLine + \"\\n\" + update);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Represents a String to show that a Task has been deleted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param current the Task to be deleted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param numberOfTasks the current number of Tasks in Duke, exclusive of this Task that is just deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String that tells the user that the Task has been deleted from Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "  public String getTaskDeletedMessage(Task current, int numberOfTasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Got it. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String taskDeleted \u003d current.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String update \u003d \"Now you have \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (reply + \"\\n\" + taskDeleted + \"\\n\" + update);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Represents a String to show that a Task has been done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks is the TaskList of the Duke object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param taskNumber is the number of the Task stored in the Duke object that has been done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String that tells the user that the Task has been marked as done in Duke."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getTaskDoneMessage(TaskList tasks, int taskNumber) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String taskDone \u003d tasks.get(taskNumber - 1).toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (reply + \"\\n\" + taskDone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Represents a String to show that a Event Task has been added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param current the Event Task to be added."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param numberOfTasks the current number of Tasks in Duke, inclusive of this Event that is just added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String that tells the user that the Event has been added to Duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getAddEventMessage(Event current, int numberOfTasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String event \u003d current.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String update \u003d \"Now you have \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (reply + \"\\n\" + event + \"\\n\" + update);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Represents a String that is the concatenation of all the Task objects stored in Duke thus far."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param tasks is the TaskList of the Duke object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a string that lists out all the tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Task current \u003d (Task)tasks.get(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            reply +\u003d \"\\n\" + (i + 1) + \".\" + current.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Represents a String to show that a Todo Task has been added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param current the Todo Task to be added."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param numberOfTasks the current number of Tasks in Duke, inclusive of this Todo that is just added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a String that tells the user that the Todo has been added to Duke."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getAddTodoMessage(Todo current, int numberOfTasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String toDo \u003d current.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String update \u003d \"Now you have \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (reply + \"\\n\" + toDo + \"\\n\" + update);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Prints out tasks that contains the keyWord specified."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param task TaskList that contains tasks to check from."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param keyWord keyWord to check if task description contains the keyWord."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String getKeyWordTasks(TaskList task, String keyWord) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String reply \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for(int i \u003d 0; i \u003c task.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Task current \u003d (Task)task.get(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if(current.getDescription().contains(keyWord)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                reply +\u003d \"\\n\" + current.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 130
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\" snapToPixel\u003d\"true\" minHeight\u003d\"140.0\" prefWidth\u003d\"833.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cRegion prefHeight\u003d\"20\" prefWidth \u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\"  fitHeight\u003d\"100\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003cVBox fx:id\u003d\"root\" prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainController\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cSplitPane fx:id\u003d\"mainWindow\" dividerPositions\u003d\"0.5\" prefHeight\u003d\"601.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003citems\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cSplitPane fx:id\u003d\"leftWindow\" dividerPositions\u003d\"0.49665551839464883\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"598.0\" prefWidth\u003d\"367.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"helpArea\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"textInputArea\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cHBox fx:id\u003d\"dummyArea\" prefHeight\u003d\"265.0\" prefWidth\u003d\"446.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"271.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"365.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cButton fx:id\u003d\"confirm\" layoutX\u003d\"365.0\" layoutY\u003d\"271.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"80.0\" text\u003d\"Button\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"rightWindow\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003cGridPane fx:id\u003d\"dialogBox\" prefHeight\u003d\"589.0\" prefWidth\u003d\"436.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"140.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"140.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003c/items\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 48
    }
  },
  {
    "path": "src/main/resources/view/MainWindow1.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cAnchorPane AnchorPane.bottomAnchor \u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 20
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void constructDeadlineTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Deadline test \u003d new Deadline(\"return book\", \"15/8/19, 0845\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getTime(), \"15/8/19, 0845\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.toString(), \"[D][\" + \"\\u2718\" + \"] return book (by: 15/8/19, 0845)\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 13
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void constructEventTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Event test \u003d new Event(\"meeting\", \"Sunday, 2-4pm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getPeriod(), \"Sunday, 2-4pm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.toString(), \"[E][\" + \"\\u2718\" + \"] meeting (at: Sunday, 2-4pm)\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 12
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.ui.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void constructTaskListTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        TaskList test \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Task testTask \u003d new Task(\"buy bread\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        test.add(testTask);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.size(), 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.get(1), testTask);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        test.delete(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.size(), 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 18
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void constructTaskTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Task test \u003d new Task(\"buy bread\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getDescription(), \"buy bread\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getStatus(), false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getStatusIcon(), \"\\u2718\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.toString(), \"[\" + test.getStatusIcon() + \"] buy bread\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 14
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void constructTodoTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Todo test \u003d new Todo(\"buy bread\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.toString(), \"[T][\" + \"\\u2718\" + \"] buy bread\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 11
    }
  }
]
