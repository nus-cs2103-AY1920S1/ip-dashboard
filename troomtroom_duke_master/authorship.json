[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    mainClassName \u003d \"Run\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "run {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "troomtroom": 28
    }
  },
  {
    "path": "build/scripts/duke.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem  duke startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set APP_HOME\u003d%DIRNAME%.."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and DUKE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\lib\\duke-0.1.0.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem Execute duke"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %DUKE_OPTS%  -classpath \"%CLASSPATH%\" Run %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "rem Set variable DUKE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if  not \"\" \u003d\u003d \"%DUKE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 100
    }
  },
  {
    "path": "data/warehouse.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "D;False;finish-work ;2019 12 12 12 0;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "E;False;party ;9 1 11 1 11;"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "# User Guide for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Keep Track of everything! "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "On just one command line interface, keep track of all deadlines, events and tasks you may have."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "1. todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "2. Find"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "3. Delete  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "4. markdone"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "5. Event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "6. Deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "7. bye "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "troomtroom": 14
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        tasks.storage.add(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 16
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    abstract Boolean isExit();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    abstract void execute(TaskList tasks, IO io, Storage storage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 9
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    Time by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Deadline(String description, boolean isDone,String type,Time by) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        super(description,isDone,type);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.type \u003d \"Deadline\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (\"[\" + \"D\" + \"][\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.description + \" (by: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.by.showtime() + \")\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Time getby() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 23
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        tasks.delete(this.index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 16
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        tasks.markdone(this.index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 16
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "// Level-10"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private IO io;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * runs main loop for the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param filePath argument file location"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        io \u003d new IO();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            tasks \u003d new TaskList(storage.loadtext());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            io.showLoadingError(\"Loading Error\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * Parser and executes commands one at a time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        IO.start();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String fullCommand \u003d io.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                c.execute(tasks, io, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                io.showError(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "troomtroom": 40
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    Time at;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Event(String description, boolean isDone,String type,Time at) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        super(description,isDone,type);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.type \u003d \"Event\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (\"[\" + \"E\" + \"][\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + \" (at: \" + this.at.showtime() + \")\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Time getat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 22
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        storage.savetofile(tasks);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "troomtroom": 16
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * Executes the find task in list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param io IO class instance"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param storage for IO to storage files"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        int foundcount \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (tasks.storage.size() \u003e 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.storage.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                if (tasks.storage.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    System.out.println((i + 1) + \".\" + tasks.storage.get(i));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    foundcount++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            if (foundcount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.output(\"Nothing Available with : \" + keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.output(\"NoTasks available\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "troomtroom": 40
    }
  },
  {
    "path": "src/main/java/IO.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class IO {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private static String line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public IO() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * starting graphic and intro. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        output(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * prints out String between 2 lines."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param word passed to print."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static void output(String word) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        IO.showLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        System.out.println(\"    \" + word);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        IO.showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * displays the current status of the TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param task the tasklist to be printed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static void displaycurrentlist(TaskList task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (task.storage.size() \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            for (int i \u003d 0; i \u003c task.storage.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                System.out.println((i + 1) + \".\" + task.storage.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            output(\"empty list\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void showLoadingError(String desc) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        output(\"Error couldnt load lol\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void showError(String desc) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        output(\"Error :\" + desc);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 67
    }
  },
  {
    "path": "src/main/java/IlleagalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class IlleagalCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public  IlleagalCommand() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        // returns nothing"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        IO.output(\"Error, the command was not recognised.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 14
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void execute(TaskList tasks, IO io, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        IO.displaycurrentlist(tasks);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 16
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * takes string and returns command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param inputstring is the text to be converted to command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @return Command of required type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static Command parse(String inputstring) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (inputstring.equals(\"bye\")) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.equals(\"list\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.split(\" \")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new DoneCommand(Integer.parseInt(inputstring.split(\" \")[1]));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.output(\"â˜¹ OOPS!!! The description of a done cannot be empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new IlleagalCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.split(\" \")[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(inputstring.split(\" \")[1]));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.output(\"â˜¹ OOPS!!! The description of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new IlleagalCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.split(\" \")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new FindCommand(inputstring.split(\" \")[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                System.out.println(\"â˜¹ OOPS!!! The Keyword of a find cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new IlleagalCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.split(\" \")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new AddCommand(new ToDO(inputstring.substring(5),false,\"ToDO\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new IlleagalCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.split(\" \")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String byString \u003d \" \" + inputstring.split(\"/by \")[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String[] seperated \u003d byString.split(\"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String[] temp \u003d seperated[2].split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int year \u003d Integer.parseInt(temp[0].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int month \u003d Integer.parseInt(seperated[1].trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int day \u003d Integer.parseInt(seperated[0].trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int hour \u003d Integer.parseInt(temp[1].substring(0,2).trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int minute \u003d Integer.parseInt(temp[1].substring(2,4).trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new AddCommand(new Deadline(inputstring.split(\"/by\")[0].substring(9),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        \"Deadline\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        new Time(year, month, day, hour, minute)));//by"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.output(\"â˜¹ OOPS!!! The description of a deadline is wrong\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new IlleagalCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (inputstring.split(\" \")[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String byString \u003d \" \" + inputstring.split(\"/at \")[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String[] seperated \u003d byString.split(\"/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String[] temp \u003d seperated[2].split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int year \u003d Integer.parseInt(temp[0].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int month \u003d Integer.parseInt(seperated[1].trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int day \u003d Integer.parseInt(seperated[0].trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int hour \u003d Integer.parseInt(temp[1].substring(0,2).trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                int minute \u003d Integer.parseInt(temp[1].substring(2,4).trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new AddCommand(new Event(inputstring.split(\"/at\")[0].substring(6),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        false,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        \"Event\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        new Time(year, month, day, hour, minute)));// /by 2/12/2019 1800"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.output(\"â˜¹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                return new IlleagalCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            return new IlleagalCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 85
    }
  },
  {
    "path": "src/main/java/Run.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class Run {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        new Duke(\"/mnt/c/users/kartike/desktop/nus/semester3/cs2103/duke/data/warehouse.txt\").run();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "//A-Gradle added"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 6
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    String file;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Storage(String file) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * Loads from textfile into TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @return Loaded LinkedList of Tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @throws FileNotFoundException if the passed file is absent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public LinkedList\u003cTask\u003e loadtext() throws FileNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        String filetext \u003d this.file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        File inpfile \u003d new File(filetext);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        Scanner filereader \u003d new Scanner(inpfile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        LinkedList\u003cTask\u003e storage \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            while (filereader.hasNextLine()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String nextline \u003d filereader.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                //System.out.println(\" lklklklkl  \"+nextline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String[] array \u003d nextline.split(\";\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                //System.out.println(array[0]+array[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String type \u003d array[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                String description \u003d array[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                Boolean doneval \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                if (array[1].equals(\"False\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    doneval \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                } else if (array[1].equals(\"True\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    doneval \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    IO.output(\"check error 5  \" + array[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                //output(Arrays.toString(array));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    storage.add(new ToDO(description,doneval,\"TODO\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    storage.add(new Event(description, doneval, \"Event\",strToTime(array[3])));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                    storage.add(new Deadline(description,doneval,\"Deadline\",strToTime(array[3])));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } catch (Exception a) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.output(\"error 3\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            a.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * helps to convert string to time object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param input string to be converted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @return Time value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static Time strToTime(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        // 2021 4 1 19 23"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        String[] div \u003d input.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        int day \u003d Integer.parseInt(div[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        int month \u003d Integer.parseInt(div[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        int year \u003d Integer.parseInt(div[2]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        int hour \u003d Integer.parseInt(div[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        int minute \u003d Integer.parseInt(div[4]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return new Time(day,month,year, hour,minute);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * saves TaskList to file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param tasks list passed to be saved to file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void savetofile(TaskList tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        String entrystring \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.storage.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            Task ob \u003d tasks.storage.get(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            if (ob.getType().equals(\"ToDO\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                entrystring +\u003d ob.getLetterType() + \";\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ob.getisDone() + \";\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ob.getDescription() + \";\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } else if (ob.getType().equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                entrystring +\u003d ob.getLetterType() + \";\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ob.getisDone() + \";\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ob.getDescription() + \";\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ((Deadline)ob).getby() + \";\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } else if (ob.getType().equals(\"Event\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                entrystring +\u003d ob.getLetterType() + \";\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ob.getisDone() + \";\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ob.getDescription() + \";\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + ((Event)ob).getat() + \";\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                IO.output(\"check error 3\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"/mnt/c/users/kartike/desktop/nus/semester3/cs2103/duke/data/warehouse.txt\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            fw.write(entrystring);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 121
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Task(String description, boolean isDone, String type) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String getisDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return this.isDone ? \"True\" : \"False\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String getLetterType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        //System.out.println(this.getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (this.type.equals(\"ToDO\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else if (this.type.equals(\"Event\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            return \"D\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (\"[\" + this.type.charAt(0) + \"][\" + this.getStatusIcon() + \"] \" + this.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public boolean changedone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.isDone \u003d ! (isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        //isDone ? this.isDone \u003d false : this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 49
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    LinkedList\u003cTask\u003e storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public TaskList(LinkedList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * deletes from passed object at index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param index point of deletion"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (storage.size() \u003e 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            System.out.println(\"    Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            System.out.println(this.storage.get(index - 1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            this.storage.remove(index - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            System.out.println(\"Now you have \" + storage.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.output(\"storage is empty, nothing to delete\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * marks index element done from passed object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param index index of object to be marked done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void markdone(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (storage.size() \u003e 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            Task temp \u003d this.storage.get(index - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            temp.changedone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            this.storage.set(index - 1,temp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            System.out.println(this.storage.get(index - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.showLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            IO.output(\"storage is empty, nothing to markdone\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 52
    }
  },
  {
    "path": "src/main/java/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    int year;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    int month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    int day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    int hour;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    int minute;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    Time(int year,int month,int day,int hour,int minute) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    Time() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * returns a printing format of time object with slashes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @return string with time in right format for display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String showtime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (this.day + \"/\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.month + \"/\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.year + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.hour + \":\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                + this.minute);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (this.day + \" \" + this.month + \" \" + this.year + \" \" + this.hour + \" \" + this.minute);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 37
    }
  },
  {
    "path": "src/main/java/ToDO.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "class ToDO extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public ToDO(String description, boolean isDone,String type) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        super(description,isDone,type);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.type \u003d \"ToDO\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        //System.out.println(this.description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return (\"[\" + \"T\" + \"][\" + this.getStatusIcon() + \"] \" + this.description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 12
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 10
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e gradle"
      }
    ],
    "authorContributionMap": {
      "-": 340,
      "troomtroom": 3
    }
  }
]
