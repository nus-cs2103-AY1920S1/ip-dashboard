[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SimpleDateFormat properFormat \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + super.toString() + \" (by: \" + properFormat.format(this.by)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 19
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfInputs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.listOfInputs \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void todoCheck(String[] tasks) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void deadlineCheck(String[] tasks, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (!userInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Deadline must include /by (date to complete task).\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (userInput.substring(userInput.indexOf(\"/by\") + 3).equals(\"\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                || userInput.substring(userInput.indexOf(\"/by\") + 4).equals(\"\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please include the date to complete task after /by command.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void eventCheck(String[] tasks, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (!userInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Event must include /at (time of event).\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (userInput.substring(userInput.indexOf(\"/at\") + 3).equals(\"\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                || userInput.substring(userInput.indexOf(\"/at\") + 4).equals(\"\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please include the time of event after /at.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void updateInputList() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            File f \u003d new File(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String text;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                while ((text \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    String taskType \u003d text.charAt(1) + \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    case \"T\": {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task todo \u003d new Todo(text.substring(7));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        if (text.substring(4, 5).equals(\"V\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            todo.markedAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        listOfInputs.add(todo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    case \"D\": {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task deadline \u003d new Deadline(text.substring(7, text.indexOf(\"by\") - 2),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                fileTaskDateConverter(text.substring(text.indexOf(\"by\") + 4, text.length() - 1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        if (text.substring(4, 5).equals(\"V\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            deadline.markedAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        listOfInputs.add(deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    case \"E\": {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task event \u003d new Event(text.substring(7, text.indexOf(\"at\") - 2),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                fileTaskDateConverter(text.substring(text.indexOf(\"at\") + 4, text.length() - 1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        if (text.substring(4, 5).equals(\"V\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            event.markedAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        listOfInputs.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    default: {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        throw new DukeException(\"Error occurred, invalid Task type found.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void updateToDo() throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            File f \u003d new File(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(f));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            for (Task task : listOfInputs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                bw.append(task.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                bw.append(\"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            updateInputList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            String userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                int counter \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                for (Task item : listOfInputs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    System.out.println(counter + \".\" + item.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String[] task \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String instruction \u003d task[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                if (instruction.equals(\"done\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    int taskNumber \u003d Integer.parseInt(task[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    listOfInputs.get(taskNumber - 1).markedAsDone();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    System.out.println(listOfInputs.get(taskNumber - 1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                } else if (instruction.equals(\"delete\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    int taskNumber \u003d Integer.parseInt(task[1]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    System.out.println(listOfInputs.remove(taskNumber - 1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    System.out.println(\"Now you have \" + listOfInputs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        switch (instruction) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        case \"todo\": {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                todoCheck(task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                Task todo \u003d new Todo(userInput.substring(5));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                listOfInputs.add(todo);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(todo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(\"Now you have \" + listOfInputs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            } finally {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        case \"deadline\": {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                deadlineCheck(task, userInput);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                Task deadline \u003d new Deadline(userInput.substring(9, userInput.indexOf(\"/by\")),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                        dateFormatter(userInput.substring(userInput.indexOf(\"/by\") + 4)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                listOfInputs.add(deadline);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(deadline);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(\"Now you have \" + listOfInputs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            } finally {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        case \"event\": {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                eventCheck(task, userInput);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                Task event \u003d new Event(userInput.substring(6, userInput.indexOf(\"/at\")),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                        dateFormatter(userInput.substring(userInput.indexOf(\"/at\") + 4)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                listOfInputs.add(event);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(event);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(\"Now you have \" + listOfInputs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            } finally {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        default: {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            updateToDo();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Date dateFormatter(String date) throws DukeException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Date parseDate \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return parseDate;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Date fileTaskDateConverter(String date) throws DukeException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Date parseDate \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return parseDate;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 228,
      "-": 5
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SimpleDateFormat properFormat \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"] \" + super.toString() + \" (at: \" + properFormat.format(this.at)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 18
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return (isDone ? \"V\" : \"X\"); // return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void markedAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 22
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10
    }
  }
]
