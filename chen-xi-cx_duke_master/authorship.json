[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    archiveVersion \u003d \"v0.1\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chen-xi-cx": 46
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "﻿# Duke - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Duke is a schedule planner targeted at users who prefer Command Line Interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### Add different task types"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "You can add and keep track of 3 different types of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "1. Todo: a task with no deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "2. Deadline: a task to be completed by a certain date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "3. Event: attend an event at a given date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### List all task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Show all the tasks with one command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### Mark task as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "You can enjoy the satisfaction of ticking your task as done after completing them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### Edit task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "You can edit a specific task if you have entered the wrong details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### Find task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Too many task? You can find them by their descriptions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### Delete task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Do not want to keep track of a task anymore? You can remove them from the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 1. Add different task types"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "1. Todo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    To add a todo, type `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `todo get a haircut`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `Got it. I\u0027ve added this task:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `[T][✘] get a haircut` \u003cbr/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `Now you have 1 tasks in the list.`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "2. Deadline"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    To add a deadline, type `deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy HHmm\u003e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    **Note: HHmm is in 24 hour format. For example 12:30am is 0030 and 11:15pm is 2315.**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `deadline CS2103 IP /by 20/09/2019 2359`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `Got it. I\u0027ve added this task:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `[D][✘] CS2103 IP (by: Fri 20/09/2019 2359)` \u003cbr/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `Now you have 2 tasks in the list.` \u003cbr/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "3. Event"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    To add an event, type `event \u003cdescription\u003e /at \u003cdd/MM/yyyy HHmm\u003e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    **Note: HHmm is in 24 hour format. For example 12:30am is 0030 and 11:15pm is 2315.**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `event attend seminar /at 30/09/2019 1000`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `Got it. I\u0027ve added this task:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `[E][✘] attend seminar (at: Mon 30/09/2019 1000)` \u003cbr/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    `Now you have 3 tasks in the list.`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 2. Show all the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "To show all task, type `list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`Here are the tasks in your list` \u003cbr/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`1. [T][✘] get a haircut` \u003cbr/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`2. [D][✘] CS2103 IP (by: Fri 20/09/2019 2359)` \u003cbr/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`3. [E][✘] attend seminar (at: Mon 30/09/2019 1000)`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 3. Mark task as done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "To mark a task as done, type `done \u003ctask number\u003e`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`Nice! I\u0027ve marked this task as done:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`1. [T][✓] get a haircut`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 4. Edit task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "To edit a task, type `edit \u003ctask number\u003e \u003cfield to be changed\u003e \u003cnew content\u003e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "**Note: \u003cbr/\u003e "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "For `event` and `deadline`, `\u003cfield to be changed\u003e` are `date` or `description`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "For `todo`, `\u003cfield to be changed\u003e` is only `description`.**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`edit 3 date 01/10/2019 1300`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`I\u0027ve updated this task as:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`[E][✗] attend seminar (at: Tue 01/10/2019 1300)`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 5. Find task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "To find a task, type `find \u003ckeyword\u003e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "**Note: find is case sensitive. See usage example 2 below:**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example of usage 1: \u003cbr/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`find CS`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Expected outcome 1: \u003cbr/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`Here are the matching tasks in your list:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`1. [D][✗] CS2103 IP (by: Fri 20/09/2019 2359)`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example of usage 2: \u003cbr/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`find cs`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Expected outcome 2: \u003cbr/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`Here are the matching tasks in your list:`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 6. Delete task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "To delete a task, type `delete \u003ctask number\u003e`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Expected outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`Noted. I\u0027ve removed this task:` \u003cbr/\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`2. [D][✗] CS2103 IP (by: Fri 20/09/2019 2359)` \u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "### 7. Close Duke"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "To exit from Duke, type `bye`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "**Warning: All the changes you have made in this session will be saved only when you type `bye`**"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "chen-xi-cx": 120
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "chen-xi-cx": 17
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Main;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 11
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Instructs the program that it is not terminating."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return false to signify the program is not terminating"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public boolean canEnd() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Executes a command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 28
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import converter.StringDateConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a deadline task to added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String[] details;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes DeadlineCommand with deadline description and due date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param details contains description and due date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public DeadlineCommand(String[] details) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Adds deadline to task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints messages to notify users deadline has been"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * added to task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            StringDateConverter converter \u003d new StringDateConverter();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Date by \u003d converter.convertStringToDate(details[1].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            tasks.getTasks().add(new Deadline(details[0].trim(), by));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showDeadlineCommand(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Please enter a valid date according to dd/MM/yyyy HHmm pattern.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    + \" Time is in 24-hour format. E.g 11:30pm is 2330 and 12:30am is 0030.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 48
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes DeleteCommand with index ot the task to be deleted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param index index of the task to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Deletes a task identified by its index from the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints messages to notify users that the task has been deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showDeleteCommand(tasks, this.index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            int sizeBeforeRemove \u003d tasks.getTasks().size(); // for Java assert"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            tasks.getTasks().remove(this.index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            assert tasks.getTasks().size() + 1 \u003d\u003d sizeBeforeRemove : \"incorrect delete\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 41
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represent a task has been done command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes DoneCommand with index of task that is done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param index index of task that is done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets task identified by its index as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints messages to notify users task is marked as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            tasks.getTasks().get(this.index).setDone(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showDoneCommand(tasks, this.index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            assert tasks.getTasks().get(this.index).getDoneIcon().equals(\"\\u2713\") : \"Incorrect done command\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 40
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import converter.StringDateConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private int editIdx;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private EditField editField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String newContent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes EditCommand with index of identified task, the field and the new content to be edited."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param editIdx the index of identified task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param editDetail the field and new content of the edit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public EditCommand(int editIdx, String editDetail) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.editIdx \u003d editIdx;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Scanner scanner \u003d new Scanner(editDetail);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String strEditField \u003d scanner.next().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (strEditField) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            this.editField \u003d EditField.DESCRIPTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            this.editField \u003d EditField.DATE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new DukeException(DukeException.ErrorType.INVALID_EDIT_FIELD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            this.newContent \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new DukeException(DukeException.ErrorType.EMPTY_EDIT_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Documents the type of field to be edited."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public enum EditField {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        DESCRIPTION, DATE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Edits description or date of the identified task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints messages to notify user that identified task is edited."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Task task \u003d tasks.getTasks().get(this.editIdx);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if ((this.editField \u003d\u003d EditField.DATE \u0026\u0026 (task instanceof ToDo))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                throw new DukeException(DukeException.ErrorType.INVALID_TODO_EDIT_FIELD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Date date \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (this.editField \u003d\u003d EditField.DATE) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                StringDateConverter converter \u003d new StringDateConverter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                date \u003d converter.convertStringToDate(newContent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (task instanceof Deadline \u0026\u0026 this.editField \u003d\u003d EditField.DATE) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                assert date !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                ((Deadline) task).setBy(date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            } else if (task instanceof Event \u0026\u0026 this.editField \u003d\u003d EditField.DATE) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                assert date !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                ((Event) task).setAt(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                task.setDescription(newContent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showEditCommand(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Please enter a valid date according to dd/MM/yyyy HHmm pattern.\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    + \" Time is in 24-hour format. E.g 11:30pm is 2330 and 12:30am is 0030.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 94
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import converter.StringDateConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represent an event to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String[] details;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes EventCommand with event description and date of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param details contains event description and date of event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public EventCommand(String[] details) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Adds event to task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Print messages to notify users event has"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * been added to task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            StringDateConverter converter \u003d new StringDateConverter();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Date at \u003d converter.convertStringToDate(details[1].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            tasks.getTasks().add(new Event(details[0].trim(), at));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showEventCommand(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Please enter a valid date according to dd/MM/yyyy HHmm pattern.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    + \" Time is in 24-hour format. E.g 11:30pm is 2330 and 12:30am is 0030.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 48
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Tells user that the program is terminating."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Instructs the program that it is terminating."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return true to indicate program is terminating"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public boolean canEnd() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints exit message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Saves task list to hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui.showExitCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 40
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a find command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes FindCommand with words to be searched."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param keyword is the word user wants to search"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Shows all task with description that matches keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui.showFindCommand(tasks, keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 34
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Shows all tasks in task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui.showListCommand(tasks);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 15
    }
  },
  {
    "path": "src/main/java/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a todo task to be added."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes ToDoCommand with description of todo Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description contains description of todo task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ToDoCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Adds todo task to task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints messages to notify users todo task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * has been added to task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks contains task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param ui deals with interaction with users"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param storage deals with loading and saving of task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        tasks.getTasks().add(new ToDo(this.description));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui.showToDoCommand(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 37
    }
  },
  {
    "path": "src/main/java/converter/StringDateConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package converter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Converts String object to Date object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class StringDateConverter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Convert String object to Date object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param strDate in the format \"dd/MM/yyy HHmm\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return date object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws ParseException if the date is unparesable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Date convertStringToDate(String strDate) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        dateWithTime.setLenient(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Date date \u003d dateWithTime.parse(strDate); // this will throw ParseException if unparseable date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        //Ensure that dd/MM/yyyy HHmm format is followed (only check length of each component)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!isValidStrDate(strDate)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(\"incorrect date\", 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Convert Date object to String object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param date Java Date object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String date in the form dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"E dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return dateWithTime.format(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Checks if String date has the correct length for each component."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * E.g dd has length 2, yyyy has length 4"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param strDate the date in string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return true if all component has the required length stated by dd/MM/yyyy HHmm else false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private boolean isValidStrDate(String strDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String[] dateTime \u003d strDate.split(\"\\\\s\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (dateTime[1].length() !\u003d 4) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String[] dateDetails \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String dd \u003d dateDetails[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String mm \u003d dateDetails[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String yyyy \u003d dateDetails[2];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return (dd.length() \u003d\u003d 2 \u0026\u0026 mm.length() \u003d\u003d 2 \u0026\u0026 yyyy.length() \u003d\u003d 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Convert String object to Date object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param strDate in the format \"EEE MMM dd HH:mm:ss zzz yyyy\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return date object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws ParseException if the date is unparesable"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Date convertLongStringToDate(String strDate) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Date date \u003d dateWithTime.parse(strDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 71
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents all exception unique to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    protected ErrorType type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes DukeException with error type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param input the error type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public DukeException(ErrorType input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.type \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Documents user input error type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public enum ErrorType {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        INVALID_NUMBER, EMPTY_TODO, EMPTY_DEADLINE_DATE, EMPTY_EVENT_DATE, GIBBERISH, INVALID_EDIT_FIELD,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        EMPTY_EDIT_FIELD, INVALID_TODO_EDIT_FIELD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns String error message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case INVALID_NUMBER:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Please enter a valid task number.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case EMPTY_TODO:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case EMPTY_DEADLINE_DATE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Please enter a date for your deadline in the form \u0027/by \u003cyour date here\u003e\u0027 without \u003c\u003e.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case EMPTY_EVENT_DATE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Please enter a date for your event in the form \u0027/at \u003cyour date here\u003e\u0027 without \u003c\u003e.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case INVALID_EDIT_FIELD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Please enter a valid edit field: date or description.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case EMPTY_EDIT_FIELD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Please enter details of new change.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case INVALID_TODO_EDIT_FIELD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Todo only has description field. Please change your edit field to description.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 51
    }
  },
  {
    "path": "src/main/java/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Initializes the application and starts the interaction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * with users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Loads task list from hard disk if file is found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Else create an empty task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param filePath directory where task list is stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ui.printNonGuiDisplayMsg();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(\"Could not find existing task list. Creating new one...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Duke to use GUI if isGui is true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Loads task list from hard disk if file is found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Else create an empty task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param filePath directory where task list is stored"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Duke(String filePath, boolean isGui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (isGui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui \u003d new Ui(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Collects input from users and executes relevant command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        boolean canEnd \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        while (!canEnd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                Command command \u003d new Parser().parse(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                canEnd \u003d command.canEnd();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                ui.printNonGuiDisplayMsg();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Collects input from command and executes relevant command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * in GUI."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param input is the user input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String message to notify user of their input result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Command command \u003d new Parser().parse(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return ui.getDisplayMsg();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return ui.getDisplayMsg();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Duke duke \u003d new Duke(\"data/duke.txt\", false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "chen-xi-cx": 99
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import command.ToDoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Deals with making sense of user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param userInput String of input of user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return the command based on user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws DukeException if user input is invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (separatedInputs[0].toLowerCase()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            int doneIdx \u003d checkDoneDeleteInput(separatedInputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new DoneCommand(doneIdx);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            int deleteIdx \u003d checkDoneDeleteInput(separatedInputs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new DeleteCommand(deleteIdx);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            String description \u003d userInput.trim().substring(separatedInputs[0].length()).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                throw new DukeException(DukeException.ErrorType.EMPTY_TODO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new ToDoCommand(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (!userInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                throw new DukeException(DukeException.ErrorType.EMPTY_DEADLINE_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            String[] deadlineDetails \u003d getDetails(userInput, \"/by\", separatedInputs[0].length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new DeadlineCommand(deadlineDetails);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (!userInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                throw new DukeException(DukeException.ErrorType.EMPTY_EVENT_DATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            String[] eventDetails \u003d getDetails(userInput, \"/at\", separatedInputs[0].length());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new EventCommand(eventDetails);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            String keyword \u003d userInput.trim().substring(separatedInputs[0].length()).trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                int editIdx \u003d Integer.parseInt(separatedInputs[1]) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                String editDetail \u003d userInput.substring("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                        separatedInputs[0].length()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                                + separatedInputs[1].length()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                                + 1).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                if (editDetail.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    throw new DukeException(DukeException.ErrorType.INVALID_EDIT_FIELD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                return new EditCommand(editIdx, editDetail);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                throw new DukeException(DukeException.ErrorType.INVALID_NUMBER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new DukeException(DukeException.ErrorType.GIBBERISH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Checks if user input is valid for done and delete command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param separatedInputs the input of users in String array separated by whitespace"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return the index of the task to be marked done or deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws DukeException the user input has entered invalid task ID"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private int checkDoneDeleteInput(String[] separatedInputs) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (separatedInputs.length !\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new DukeException(DukeException.ErrorType.INVALID_NUMBER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Scanner s \u003d new Scanner(separatedInputs[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!s.hasNextInt()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new DukeException(DukeException.ErrorType.INVALID_NUMBER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return s.nextInt() - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Extracts description and date of event or deadline from user input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param userInput the input of user"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param keyword the keyword that separates description and date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param startIdx the starting index of description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String array containing description and date of event or deadline"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String[] getDetails(String userInput, String keyword, int startIdx) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return userInput.trim().substring(startIdx).trim().split(keyword);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 110
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import converter.StringDateConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents the file used to store task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Instantiate Storage with path of the file where task list is stored."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param filePath represents the path of the file where task list is stored"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Loads the file where task list is stored."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return list of task if the file is found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws FileNotFoundException when no task list file is found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            String[] outputs \u003d s.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            boolean isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (outputs[1].equals(\"Done\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                isDone \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Date date \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            String description \u003d outputs[2].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (outputs.length \u003e 3) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    StringDateConverter converter \u003d new StringDateConverter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    date \u003d converter.convertLongStringToDate(outputs[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    System.out.println(\"Please enter a valid date.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            switch (outputs[0].trim()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                tasks.add(new ToDo(description, isDone));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                tasks.add(new Deadline(description, date, isDone));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            default: //case \"E\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                tasks.add(new Event(description, date, isDone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Saves task list in designated file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the task list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws IOException if designated file path is not found"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // create new directory called data if it does not exist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String currDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        File createDataDir \u003d new File(currDir + \"/data\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        createDataDir.mkdir();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        StringJoiner textToAdd \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            textToAdd.add(task.toSaveFormat());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        fw.write(textToAdd.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 100
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import converter.StringDateConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Deadline with description and due date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param by is the due date of deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Deadline with description, due date and isDone status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param by is the due date of deadline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param isDone true if deadline is completed. Else false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Deadline(String description, Date by, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Date getBy() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setBy(Date by) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String strDate \u003d new StringDateConverter().convertDateToString(by);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + strDate + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Converts task object to format use in file save."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String that is in file save format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return String.format(\"D | %s | %s | %s\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.isDone ? \"Done\" : \"Not Done\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.getDescription(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.getBy());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 62
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import converter.StringDateConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Event with description and date of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param at represents the date of the event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Event with description, date of event and isDone status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param at represents the date of the event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param isDone true if event is completed. Else false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Event(String description, Date at, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Date getAt() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setAt(Date at) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String strDate \u003d new StringDateConverter().convertDateToString(at);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + strDate + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Converts task object to format use in file save."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String that is in file save format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return String.format(\"E | %s | %s | %s\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.isDone ? \"Done\" : \"Not Done\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.getDescription(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.getAt());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 62
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Task with description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes Task with description and isDone status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param isDone true if task is completed. Else false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String getDoneIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return \"[\" + getDoneIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Converts task object to format use in file save."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String that is in file save format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public abstract String toSaveFormat();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 57
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initiliazes an empty task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes task list with loaded tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 30
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes ToDo with description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description of the todo task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes ToDo with description and isDone status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param description description of the todo task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param isDone true if todo task is completed. Else false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Converts task object to format use in file save."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String that is in file save format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return String.format(\"T | %s | %s\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.isDone ? \"Done\" : \"Not Done\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                this.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 42
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DialogBox.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        dialog.setWrapText(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.setSpacing(5.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Background background \u003d new Background(new BackgroundFill(Color.LIGHTGREY, CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        db.setBackground(background);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 73
    }
  },
  {
    "path": "src/main/java/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            stage.setTitle(\"You are now chatting with Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 33
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                DialogBox.getDukeDialog(d.getUi().getDisplayMsg(), dukeImage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 60
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Scanner myScanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private StringJoiner displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    boolean isGui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes CLI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        myScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.isGui \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Initializes GUI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param isGui true if using GUI else false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public Ui(boolean isGui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.isGui \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns String message of relevant command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return String message of relevant command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String getDisplayMsg() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return displayMsg.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Prints message of relevant command in CLI."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void printNonGuiDisplayMsg() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!this.isGui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            System.out.println(displayMsg);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to error message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param message of error"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showLoadingError(String message) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to welcome message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return full user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return myScanner.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by DeadlineCommand."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showDeadlineCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(tasks.getTasks().get(tasks.getTasks().size() - 1).toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Now you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by DeleteCommand."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param index is the index of task to be removed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showDeleteCommand(TaskList tasks, int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        int numOnTaskList \u003d index + 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(numOnTaskList + \". \" + tasks.getTasks().get(index));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Now you have \" + (tasks.getTasks().size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by ListCommand."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showListCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Here are the tasks in your list\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTasks().size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            displayMsg.add(number + \". \" + tasks.getTasks().get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by DoneCommand."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of tasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param index is the index of task that is marked done"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showDoneCommand(TaskList tasks, int index) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        int numOnTaskList \u003d index + 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(numOnTaskList + \". \" + tasks.getTasks().get(index));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by EditCommand."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param task the edited task"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showEditCommand(Task task) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"I\u0027ve updated this task as:\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(task.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by EventCommand."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showEventCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(tasks.getTasks().get(tasks.getTasks().size() - 1).toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Now you have \" + tasks.getTasks().size()  + \" tasks in the list.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to goodbye message."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showExitCommand() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by FindCommand."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of tasks"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param keyword is the searched term"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showFindCommand(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            if (task.getDescription().indexOf(keyword) !\u003d -1) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                displayMsg.add(counter + \". \" + task);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets displayMsg to message produced by ToDoCommand."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param tasks is the list of task"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void showToDoCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(tasks.getTasks().get(tasks.getTasks().size() - 1).toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        displayMsg.add(\"Now you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 192
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 19
    }
  },
  {
    "path": "src/test/java/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void testToString() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Date date1 \u003d dateWithTime.parse(\"12/11/2019 1300\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"submit project 1\", date1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"submit project 2\", date1, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertEquals(\"[D][\\u2718] submit project 1 (by: Tue 12/11/2019 1300)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                deadline1.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertEquals(\"[D][\\u2713] submit project 2 (by: Tue 12/11/2019 1300)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                deadline2.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 22
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void testToString() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        SimpleDateFormat dateWithTime \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Date date1 \u003d dateWithTime.parse(\"12/11/2019 1300\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Event event1 \u003d new Event(\"attend wedding 1\", date1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Event event2 \u003d new Event(\"attend wedding 2\", date1, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertEquals(\"[E][\\u2718] attend wedding 1 (at: Tue 12/11/2019 1300)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                event1.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertEquals(\"[E][\\u2713] attend wedding 2 (at: Tue 12/11/2019 1300)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                event2.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 22
    }
  },
  {
    "path": "src/test/java/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertEquals(\"[T][\\u2718] todo item 1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new ToDo(\"todo item 1\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertEquals(\"[T][\\u2713] todo item 2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new ToDo(\"todo item 2\", true).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 15
    }
  }
]
