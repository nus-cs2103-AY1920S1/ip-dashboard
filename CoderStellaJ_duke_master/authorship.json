[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 2,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 34,
      "-": 15
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "E|0|eat|15/09/2019|Sheldon(friend)666"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "D|1|sleep|Tonight|Amy(Sheldon\u0027s wife)888"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "T|0|drink|Penny()N.A."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "T|0|study|Poorme()123"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "T|0|sleep again|"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 5
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### What is Shuyuan\u0027s Task Manager(STM)?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "**STM** is a task manager. This desktop application offers people "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "functionalities to create and different types of tasks with specified time and related people;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "add and view tasks lists; mark and delete tasks. This application use command line interface; "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "this means that you operate the application mainly by typing commands into the text box."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This is what STM looks like:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure1](UG_GUI.PNG)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 1. The graphical user interface for STM.*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "## Getting started"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " You can type your command into text box and view STM\u0027s responses in the pane."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " You can also view the conversation history by scrolling up or down."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This application offers the following features:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Add tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Delete tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* List tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Mark tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Find tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Tasks have `event`,`deadline`,`todo` types. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Each task contains description, time(only for `deadline` and `event`) and "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "people."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Each person consists of name, title/relationship and contact number. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "A person can be represented by `name(title)123456`. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If title or contact number are unknown, they can be omitted. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Thus, these commands are also applicable: `James`,`James(boss)`,`James()123`. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### Add tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "You can use `event`,`deadline`,`todo` commands to add different types of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "#### Add event task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type `event|task description|at some time|person1|person2|...`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Persons can be omitted. e.g. `event|work|Friday`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Now the event task is added into the list and STM returns its information as well as the total number of tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure2](event_result.PNG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 2. Result of event command.*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "#### Add deadline task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type `deadline|task description|by some time|person1|person2|...`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Persons can be omitted. e.g. `deadline|release Duke|Sunday|Shuyuan(student)666`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Now the deadline task is added into the list and STM returns its information as well as the total number of tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure3](deadline_result.PNG)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 3. Result of deadline command.*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "#### Add todo task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type `todo|task description|person1|person2|...`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Persons can be omitted. e.g. `todo|study|Poorme()123`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Now the todo task is added into the list and STM returns its information as well as the total number of tasks in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure4](todo_result.PNG)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 4. Result of todo command.*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### Delete tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type in `delete|\u003cnumber of task you want to delete\u003e`. e.g. `delete|5`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Now STM shows the deleted task information."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure5](delete_result.PNG)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 5. Result of delete command.*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### List tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "`list` command lists out all the current tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type `list` in text box."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. You can view the tasks lists and all the task details now."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure6](list_result.PNG)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 6. Result of list command.*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### Mark tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "`done` command updates a task status from `-`(not done) to `+`(done)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type in `done|\u003cnumber of task you want to delete\u003e`. e.g. `done|5`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Now STM shows the updated task information."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure7](done_result.PNG)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 7. Result of done command.*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### Find tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "`find` command searches the string in task descriptions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type in `find|\u003cstring you want to search\u003e`. e.g. `find|sleep`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Now STM returns all the tasks whose descriptions contain string \"sleep\"."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure8](find_result.PNG)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 8. Result of find command.*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "### Save history and exit application"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "`bye` command saves and updates your task list into `.txt` file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr/\u003e![Figure9](bye_result.PNG)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003e*Figure 9. Result of bye command.*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Q: What if I typed some invalid commands?"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cbr\u003eA: No worries, STM gives you warnings and reminds you where the commands are wrong. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 80,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Returns dialog."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param text String of displayed text."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param img image to be shown in dialog box as person profile photo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return Dialog box object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 68
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.TaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private PersonList acquaintance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * constructor for Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param filePath which specifies the path for the .txt file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        acquaintance \u003d new PersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(\"./data/tasks.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Instantiate a Duke object and run it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param args standard main args"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        new Duke(\"./data/tasks.txt\").run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Runs duke from intellij console."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String greeting \u003d ui.showWelcome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                output \u003d output.concat(ui.showLine());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                TaskCommand c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                output \u003d output.concat(c.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                output \u003d output.concat(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                output \u003d output.concat(ui.showLine());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            System.out.print(output);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Runs process of Duke from GUI."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String run(String fullCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            output \u003d output.concat(ui.showLine());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            TaskCommand c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            output \u003d output.concat(c.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            output \u003d output.concat(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            output \u003d output.concat(ui.showLine());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        //return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 96,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "//@Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 33
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Stickman.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Sakura.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 52
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class AddCommand extends TaskCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputNoTask \u003d \"No task to be added to the list\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputAddTask \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputStringPre \u003d \"Now you have \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputStringPost \u003d \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Constructor of AddCommand which executes add functionality."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param task the new task which needs to be added to the task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Tells whether this is an exit duke.command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Adds the new task into task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList The list of duke.tasks maintained in duke.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       Ui module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  in charge of loading and saving the duke.tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when the duke.command is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputNoTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(outputAddTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        sb.append(task + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        sb.append(outputStringPre + taskList.getSize() + outputStringPost);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return ui.print(sb.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DeleteCommand extends TaskCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputRemoveTask \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Constructor which creates a delete command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param number the task number"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DeleteCommand(int number) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Tells this is not an exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Deletes the task in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       interact with user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  load and save duke.tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when command is invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(outputRemoveTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (number \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputInvalidTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(number);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        sb.append(deletedTask + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return ui.print(sb.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DoneCommand extends TaskCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputDoTask \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DoneCommand(int number) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Executes done command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList The list of tasks maintained in Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       Ui module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  in charge of loading and saving the tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when the task doesn\u0027t exist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(outputDoTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (number \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputInvalidTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Task doneTask \u003d taskList.markDone(number);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        sb.append(doneTask + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return ui.print(sb.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ExitCommand extends TaskCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static String bye \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Executes exit command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList The list of tasks maintained in Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       Ui module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  in charge of loading and saving the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when execution encounters problem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        storage.save(taskList.getList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return ui.print(bye);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class FindCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputFindTask \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String str;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public FindCommand(String str) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.str \u003d str;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Tells whether the command is exit command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return true when it is."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Execute the duke.command according to the command type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList The list of tasks maintained in Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       Ui module"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  in charge of loading and saving the tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when the command is invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArrayList\u003cTask\u003e findList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (task.getDescription().contains(str)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                findList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(outputFindTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c findList.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            sb.append((i + 1) + \".\" + findList.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return ui.print(sb.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 49
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ListCommand extends TaskCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputListTask \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Lists out all the tasks currently in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList The list of tasks maintained in Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       Ui module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  in charge of loading and saving the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when execution encounters problem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(outputListTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            sb.append((i + 1) + \".\" + taskList.getTask(i + 1) + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return ui.print(sb.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 30
    }
  },
  {
    "path": "src/main/java/duke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public abstract class TaskCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    protected static final String outputInvalidTask \u003d \"It\u0027s an invalid task\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Tells whether the duke.command is exit duke.command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return true when it is."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Executes the duke.command according to the duke.command type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param taskList The list of duke.tasks maintained in duke.Duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param ui       Ui module"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param storage  in charge of loading and saving the duke.tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when the duke.command is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        message \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return \"\\tOOPS!!! \" + this.message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 18
    }
  },
  {
    "path": "src/main/java/duke/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Person(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(name, \"\", \"N.A.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Person(String name, String title) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(name, title, \"N.A.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * constructor for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param name    String of person\u0027s name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param title   person\u0027s title"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param contact the person\u0027s contact number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Person(String name, String title, String contact) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getContact() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return contact;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void modifyName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void modifyTitle(String title) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void modifyContact(String contact) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return this.name + \"(\" + this.title + \")\" + this.contact;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 56
    }
  },
  {
    "path": "src/main/java/duke/person/PersonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class PersonList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ArrayList\u003cPerson\u003e list;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public PersonList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public PersonList(ArrayList\u003cPerson\u003e list) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Person addPerson(Person p) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list.add(p);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Person getPerson(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * converts personlist object to string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return string which represents a personlist object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getSize(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (i !\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                output \u003d output + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            output \u003d output + this.getPerson(i).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * returns personlist as a string and write to .txt"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String writer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getSize(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Person p \u003d this.getPerson(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (i !\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                text \u003d text + \"|\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text + p.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 61
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputNoSave \u003d \"Tasks are not able to be saved into .txt file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * loads the history of Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return return an arraylist of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when loading encounters exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String[] splits \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                assert splits.length \u003e\u003d 3 : \"tasks.txt should follow the format with |\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                int completed \u003d Integer.parseInt(splits[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                Task newTask;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                switch (splits[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    newTask \u003d parseTodo(splits);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    newTask \u003d parseEvent(splits);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    newTask \u003d parseDeadline(splits);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    newTask \u003d new Task(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                if (completed \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    newTask.changeStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            //e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * saves the tasks into a .txt file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param list a list of tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            File myFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (!myFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                myFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            //FileWriter: the file\u0027s parent directory must exist"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            String textToAdd \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                if (!textToAdd.equals(\"\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    textToAdd \u003d textToAdd.concat(\"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                textToAdd \u003d textToAdd.concat(task.writer());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputNoSave);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private PersonList parsePersonList(String[] parts) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d new PersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (String str : parts) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            int startIndex \u003d str.indexOf(\"(\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            int endIndex \u003d str.lastIndexOf(\")\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (startIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String name \u003d str;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                list.addPerson(new Person(name));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String name \u003d str.substring(0, startIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String title \u003d str.substring(startIndex + 1, endIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                if (endIndex \u003d\u003d str.length() - 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    list.addPerson(new Person(name, title));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    String contact \u003d str.substring(endIndex + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    list.addPerson(new Person(name, title, contact));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Task parseTodo(String[] parts) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d parsePersonList(Arrays.copyOfRange(parts, 3, parts.length));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new Todo(parts[2], list);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Task parseEvent(String[] parts) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d parsePersonList(Arrays.copyOfRange(parts, 4, parts.length));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new Event(parts[2], parts[3], list);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Task parseDeadline(String[] parts) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d parsePersonList(Arrays.copyOfRange(parts, 4, parts.length));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new Deadline(parts[2], parts[3], list);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 131
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * constructor for deadline type task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param by          time by which the task should be done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param list        list of people who are related to the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Deadline(String description, String by, PersonList list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(description, list);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                + \"\\nList of People:\\n\" + super.getPersonList().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String writer() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String text \u003d \"D|\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (getStatus() \u003d\u003d false) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text.concat(\"0|\" + getDescription() + \"|\" + getBy());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text.concat(\"1|\" + getDescription() + \"|\" + getBy());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        text \u003d text + \"|\" + super.getPersonList().writer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 41
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * creates an event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param at          time information"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * constructor for event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param at time that event is held at"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param list list of people related to the event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Event(String description, String at, PersonList list) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(description, list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                + \"\\nList of People:\\n\" + super.getPersonList().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String writer() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String text \u003d \"E|\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (getStatus() \u003d\u003d false) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text.concat(\"0|\" + getDescription() + \"|\" + getAt());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text.concat(\"1|\" + getDescription() + \"|\" + getAt());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        text \u003d text + \"|\" + super.getPersonList().writer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 52
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputTask \u003d \"This is a task\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private PersonList personList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(\"\", new PersonList());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * constructor of Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(description, new PersonList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * constructor of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param list list of people related to the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Task(String description, PersonList list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.personList \u003d list;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return (isDone ? \"+\" : \"-\"); //return tick or X symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void changeStatus() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + this.getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String writer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return outputTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public PersonList getPersonList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 63
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * deletes a task from the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param number task number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return return the deleted task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Task deleteTask(int number) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Task deletedTask \u003d list.get(number - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list.remove(deletedTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Task markDone(int number) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list.get(number - 1).changeStatus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.get(number - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Task getTask(int number) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.get(number - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 50
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Todo(String description, PersonList list) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(description, list);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(description, new PersonList());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return \"[T]\" + super.toString()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                + \"\\nList of People:\\n\" + super.getPersonList().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String writer() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String text \u003d \"T|\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (getStatus() \u003d\u003d false) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text.concat(\"0|\" + getDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            text \u003d text.concat(\"1|\" + getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        text \u003d text + \"|\" + super.getPersonList().writer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.TaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.person.PersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyInput \u003d \"Your input cannot be empty.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputInvalidInput \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyDoneDescription \u003d \"The description of a done cannot be empty.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyDeleteDescription \u003d \"The description of a delete cannot be empty.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyTodoDescription \u003d \"The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyDeadlineDescription \u003d \"The description of a deadline cannot be empty.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyDeadlineTime \u003d \"Please provide a time for your deadline task\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyEventDescription \u003d \"The description of a event cannot be empty.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyEventTime \u003d \"Please provide a time for your event task\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String outputEmptyFind \u003d \"Please provide the string you want to search in the tasks\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * parses the command string and create according type of command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param fullCommand string of command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return return a new command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws DukeException when command is invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static TaskCommand parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String[] parts \u003d fullCommand.split(\"[|]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else if (parts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        switch (parts[0]) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseList(parts);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseDone(parts);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseDelete(parts);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseTodo(parts);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseDeadline(parts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseEvent(parts);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return parseFind(parts);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputInvalidInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseList(String[] parts) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseDone(String[] parts) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (parts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyDoneDescription);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        int number \u003d Integer.parseInt(parts[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new DoneCommand(number);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseDelete(String[] parts) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (parts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyDeleteDescription);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        int number \u003d Integer.parseInt(parts[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new DeleteCommand(number);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseTodo(String[] parts) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (parts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyTodoDescription);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String description \u003d parts[1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d parsePersonList(Arrays.copyOfRange(parts, 2, parts.length));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Task todoTask \u003d new Todo(description, list);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new AddCommand(todoTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseDeadline(String[] parts) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (parts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyDeadlineDescription);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else if (parts.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyDeadlineTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String description \u003d parts[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String date \u003d parts[2];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d parsePersonList(Arrays.copyOfRange(parts, 3, parts.length));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Task deadlineTask \u003d new Deadline(description, date, list);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new AddCommand(deadlineTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseEvent(String[] parts) throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (parts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyEventDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else if (parts.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyEventTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String description \u003d parts[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String date \u003d parts[2];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList personList \u003d parsePersonList(Arrays.copyOfRange(parts, 3, parts.length));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Task deadlineTask \u003d new Event(description, date, personList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new AddCommand(deadlineTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static TaskCommand parseFind(String[] parts) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (parts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new DukeException(outputEmptyFind);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String description \u003d parts[1];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new FindCommand(description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static PersonList parsePersonList(String[] parts) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        PersonList list \u003d new PersonList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (String str : parts) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            int startIndex \u003d str.indexOf(\"(\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            int endIndex \u003d str.lastIndexOf(\")\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (startIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String name \u003d str;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                list.addPerson(new Person(name));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String name \u003d str.substring(0, startIndex);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                String title \u003d str.substring(startIndex + 1, endIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                if (endIndex \u003d\u003d str.length() - 1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    list.addPerson(new Person(name, title));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    String contact \u003d str.substring(endIndex + 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    list.addPerson(new Person(name, title, contact));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 153
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String greeting \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String loadError \u003d \"This is your first time using Duke, no history loaded.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String line \u003d \"__________________________________________________\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * reads the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return return string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * prints out greeting information."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String output \u003d logo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        output \u003d output.concat(showLine()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                .concat(greeting)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                .concat(showLine())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * shows errors encountered during execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param message error message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return loadError;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * prints out information in certain format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param str message to be printed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String print(String str) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 71
    }
  },
  {
    "path": "src/main/resources/view/Dialogbox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"21.0\" prefHeight\u003d\"536.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"538.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "      \u003cLabel prefHeight\u003d\"24.0\" prefWidth\u003d\"400.0\" text\u003d\"                                        Shuyuan\u0027s Task Manager\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 22
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 11
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "       [T][-] borrow book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     1.[T][-] borrow book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "       [D][-] return book (by: Sunday)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "       [E][-] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     [D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     [D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 40
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Task.java ..\\src\\main\\java\\Todo.java ..\\src\\main\\java\\Event.java ..\\src\\main\\java\\Deadline.java ..\\src\\main\\java\\DukeException.java ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 21
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we will be creating a GUI for Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Mockup for Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "![Duke\u0027s layout](assets/DukeSceneGraph.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ..."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout?"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 1,
      "-": 157
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations!"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 1,
      "-": 242
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Create a folder `[project root]\\text-duke.ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "   java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "   java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 5,
      "-": 69
    }
  }
]
