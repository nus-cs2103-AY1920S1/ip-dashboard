[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# CS2103T Individual Component - duke, The Handsome Bot"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "![OH MAI GAWD](https://i.kym-cdn.com/photos/images/newsfeed/000/972/842/1aa.gif)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "***Save me plz, Bell Curve God***"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "## Tutorials "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "duke Increment | Tutorial"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "krusagiz": 9,
      "-": 35
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "group \u0027kmz.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "version \u00270.1.69\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    mainClassName \u003d \"bot.duke.Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    mainClassName \u003d \"bot.duke.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    archiveVersion \u003d \"1.0.69\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "run{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "krusagiz": 40,
      "-": 12
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "E | F | Saying Hi to Feebo | 12/12/2019 17:30 | 12/12/2019 17:32"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "D | T | Homework | 19/09/2019 02:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "T | F | Harvest Corn from the Field"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "T | F | Collect Debt from James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "E | F | Secret Ritual | 18/08/2028 18:08 | 18/08/2028 18:58"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 5
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "D | F | juest | gay"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "T | T | you"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "E | F | gay | gg | gg"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 3
    }
  },
  {
    "path": "src/main/java/bot/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Gui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Drives the duke.Duke bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * This is the main driver class and entry point."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Instance of TaskList. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Instance of Ui. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Instance of Storage. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** States if the application is ready to exit. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private boolean isGoodbye \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the Duke Object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param filePath Path to the data text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.addPreLaunchMsg(\"STARTUP: File at \" + filePath + \" loaded successfully, populating Tasks. \\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.addPreLaunchMsg(\"STARTUP: File not found at \" + filePath + \", starting with a clean slate. \\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.addPreLaunchMsg(\"STARTUP: Unable to read file at \" + filePath + \", starting with a clean slade\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Runs the logic of Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Deprecated due to GUI, kept around for contingencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.ui.printWelcomeMsg();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        boolean isGoodbye \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        while (!isGoodbye) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String fullInput \u003d ui.readInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                Command c \u003d Parser.parse(fullInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                isGoodbye \u003d c.isExit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ui.exposeError(de.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Starts the Duke instance."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param args Command line arguments"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Gui gui \u003d new Gui();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        //Duke dukeInstance \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        //dukeInstance.run();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Gets response to input from JavaFX Gui."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param fullInput Full input string from JavaFx GuiWindow"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void getResponse(String fullInput) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (this.isGoodbye) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Command c \u003d Parser.parse(fullInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                this.isGoodbye \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.exposeError(de.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 105,
      "-": 3
    }
  },
  {
    "path": "src/main/java/bot/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 15
    }
  },
  {
    "path": "src/main/java/bot/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.add.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.add.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.add.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.flow.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.list.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.list.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.update.DeleteTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.update.MakeDoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeDeadlineException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeFindException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeTodoException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Parses a given user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param input Given user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws DukeException If the inputs are incorrect in any way"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assert !input.equals(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.matches(\"find.*\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (input.equals(\"find\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeFindException(DukeFindException.EMPTY_DETAILS_ERROR_MSG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else if (input.charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String detail \u003d input.substring(5);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                if (detail.length() \u003c 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    throw new DukeFindException(DukeFindException.EMPTY_DETAILS_ERROR_MSG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    return new FindCommand(detail);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.matches(\"todo.*\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (input.equals(\"todo\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeTodoException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else if (input.charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String detail \u003d input.substring(5);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                if (detail.length() \u003c 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    throw new DukeTodoException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    return new AddTodoCommand(detail);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.matches(\"deadline.*\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (input.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeDeadlineException(DukeDeadlineException.EMPTY_DETAILS_ERROR_MSG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else if (input.charAt(8) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String detail \u003d input.substring(9);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                if (detail.length() \u003c 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    throw new DukeDeadlineException(DukeDeadlineException.EMPTY_DETAILS_ERROR_MSG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                } else if (!detail.contains(\"/by\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    throw new DukeDeadlineException(DukeDeadlineException.FORMAT_ERROR_MSG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    String[] detailSplit \u003d detail.split(\" /by \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    return new AddDeadlineCommand(detailSplit[0], detailSplit[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.matches(\"event.*\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (input.equals(\"event\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeEventException(DukeEventException.EMPTY_DETAILS_ERROR_MSG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else if (input.charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String detail \u003d input.substring(6);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                if (detail.length() \u003c 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    throw new DukeEventException(DukeEventException.EMPTY_DETAILS_ERROR_MSG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                } else if (!detail.contains(\"/at\") || !detail.contains(\" - \")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    throw new DukeEventException(DukeEventException.FORMAT_ERROR_MSG);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    String[] detailSplit \u003d detail.split(\" /at \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    String[] dateSplit \u003d detailSplit[1].split(\" - \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    return new AddEventCommand(detailSplit[0], dateSplit[0], dateSplit[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.matches(\"done\\\\s\\\\d+\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            int chosenTaskNo \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new MakeDoneCommand(chosenTaskNo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.matches(\"delete\\\\s\\\\d+\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            int chosenTaskNo \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new DeleteTaskCommand(chosenTaskNo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 105
    }
  },
  {
    "path": "src/main/java/bot/duke/command/add/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeDeadlineException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Details of the event. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String detail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Date-Time of the Deadline. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String datetime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the AddDeadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param detail   Details of the Deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param datetime Deadline of the Task object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public AddDeadlineCommand(String detail, String datetime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Adds new Deadline event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks The current TaskList object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui The current Ui object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Date datetimeDate \u003d Task.DATE_FORMAT.parse(datetime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(detail, datetimeDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            assert newDeadline !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tasks.add(newDeadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.printAddSuccess(tasks.getTasks(), newDeadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.exposeError(new DukeDeadlineException(DukeDeadlineException.FORMAT_ERROR_MSG).getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 61
    }
  },
  {
    "path": "src/main/java/bot/duke/command/add/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.exception.DukeEventException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Details of the event. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String detail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Date-Time starting from. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String datetimeFrom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Date-Time ending with. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String datetimeTo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the AddEventCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param detail       Name of the Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param datetimeFrom Starting from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param datetimeTo   Ending with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public AddEventCommand(String detail, String datetimeFrom, String datetimeTo) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.datetimeFrom \u003d datetimeFrom;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.datetimeTo \u003d datetimeTo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Adds new Event task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks The current TaskList object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui The current Ui object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Date datetimeFromDate \u003d Task.DATE_FORMAT.parse(datetimeFrom);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Date datetimeToDate \u003d Task.DATE_FORMAT.parse(datetimeTo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Event newEvent \u003d new Event(detail, datetimeFromDate, datetimeToDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tasks.add(newEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Ui.printAddSuccess(tasks.getTasks(), newEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (ParseException dfe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.exposeError(new DukeEventException(DukeEventException.FORMAT_ERROR_MSG).getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 65
    }
  },
  {
    "path": "src/main/java/bot/duke/command/add/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Details of the Todo.*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String detail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the AddTodoCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param detail Details of the Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public AddTodoCommand(String detail) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Adds new Todo task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks The current TaskList object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui The current Ui object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Todo newTodo \u003d new Todo(this.detail);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assert newTodo !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        tasks.add(newTodo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ui.printAddSuccess(tasks.getTasks(), newTodo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    ;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 48
    }
  },
  {
    "path": "src/main/java/bot/duke/command/flow/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.flow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Saves and Exits from the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks The current TaskList object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui The current Ui object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            ui.exposeError(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ui.printExitMsg();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 37
    }
  },
  {
    "path": "src/main/java/bot/duke/command/list/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Search keyword. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the FindCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param keyword Search keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Lists the Search Results based on the keyword"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks The current TaskList object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui The current Ui object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArrayList\u003cInteger\u003e searchResult \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Task currTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            assert currTask !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            boolean hasKeyword \u003d  currTask.toString().toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            boolean hasDateLike \u003d currTask.toDelimitedString()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    .replaceAll(\"\\\\D+\",\"\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    .contains(keyword.replaceAll(\"\\\\D+\",\"\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    \u0026\u0026 !keyword.replaceAll(\"\\\\D+\",\"\").isEmpty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (hasKeyword | hasDateLike) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                searchResult.add(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ui.listSearchResults(taskList, searchResult);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 59
    }
  },
  {
    "path": "src/main/java/bot/duke/command/list/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Lists the Task objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks   The current TaskList object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui      The current Ui object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ui.listTasks(tasks.getTasks());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 30
    }
  },
  {
    "path": "src/main/java/bot/duke/command/update/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.update;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Chosen Task index. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    int chosenTaskNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DeleteTaskCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param chosenTaskNo Chosen Task index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DeleteTaskCommand(int chosenTaskNo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.chosenTaskNo \u003d chosenTaskNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Deletes Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks   The current TaskList object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui      The current Ui object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Task deletedTask \u003d tasks.doDeleteTask(chosenTaskNo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ui.printDeleteSuccess(tasks.getTasks(), deletedTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 45
    }
  },
  {
    "path": "src/main/java/bot/duke/command/update/MakeDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.command.update;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class MakeDoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Chosen Task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    int chosenTaskNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the MakeDoneCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param chosenTaskNo Chosen Task index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public MakeDoneCommand(int chosenTaskNo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.chosenTaskNo \u003d chosenTaskNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Marks Task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks The current TaskList object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param ui The current Ui object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param storage The current Storage object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Task doneTask \u003d tasks.doDoneTask(chosenTaskNo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ui.printDoneSuccess(doneTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether this is an exiting command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Whether this command exits the application"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 44
    }
  },
  {
    "path": "src/main/java/bot/duke/exception/DukeDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DukeDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String FORMAT_ERROR_MSG \u003d \"☹ OOPS!!! The format of Deadline is wrong! The format is:\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Deadline \u003cDeadline Details\u003e /by dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String EMPTY_DETAILS_ERROR_MSG \u003d \"☹ OOPS!!! The description of a Deadline cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DukeDeadlineException object with a custom error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param message Custom error message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DukeDeadlineException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 19
    }
  },
  {
    "path": "src/main/java/bot/duke/exception/DukeEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DukeEventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String FORMAT_ERROR_MSG \u003d \"☹ OOPS!!! The format of event is wrong! The format is:\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"event \u003cEvent Details\u003e /at dd/MM/yyyy HH:mm - dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String EMPTY_DETAILS_ERROR_MSG \u003d \"☹ OOPS!!! The description of a event cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DukeEventException object with a custom error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param message Custom error message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DukeEventException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 19
    }
  },
  {
    "path": "src/main/java/bot/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DukeException object with a custom error message."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param message Custom error message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 13
    }
  },
  {
    "path": "src/main/java/bot/duke/exception/DukeFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DukeFindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String EMPTY_DETAILS_ERROR_MSG \u003d \"☹ OOPS!!! The search query cannot be empty.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DukeFindException object with a custom error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param message Custom error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DukeFindException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 16
    }
  },
  {
    "path": "src/main/java/bot/duke/exception/DukeTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DukeTodoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DukeTodoException object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DukeTodoException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 11
    }
  },
  {
    "path": "src/main/java/bot/duke/exception/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the DukeUnknownCommandException."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public DukeUnknownCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 11
    }
  },
  {
    "path": "src/main/java/bot/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Path to text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the Storage object with the specified path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param filePath Specified path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Saves TaskList list of Task objects to a text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param taskList TaskList list of Task objects"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws IOException If there is problem writing to the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(fileWriter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            printWriter.println(task.toDelimitedString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Loads list of tasks from a text file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return List of tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws IOException    If there is a problem reading the file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws ParseException If there is a problem with the datetime format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException, ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(new File(filePath)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            String[] lineSplit \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            switch (lineSplit[0]) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                Todo newTodo \u003d new Todo(lineSplit[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                newTodo.setDone(lineSplit[1].equals(\"T\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                tasks.add(newTodo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                Deadline newDeadline \u003d new Deadline(lineSplit[2],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        Task.DATE_FORMAT.parse(lineSplit[3]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                newDeadline.setDone(lineSplit[1].equals(\"T\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                tasks.add(newDeadline);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                Event newEvent \u003d new Event(lineSplit[2],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        Task.DATE_FORMAT.parse(lineSplit[3]), Task.DATE_FORMAT.parse(lineSplit[4]));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                newEvent.setDone(lineSplit[1].equals(\"T\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                tasks.add(newEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 94
    }
  },
  {
    "path": "src/main/java/bot/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Deadline Time(with date). */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Date deadlineTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the Deadline object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param deadlineName Name of deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param deadlineTime Deadline Time (with date)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Deadline(String deadlineName, Date deadlineTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(deadlineName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Deadline name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Deadline name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return super.getTaskName()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \" (by: \" + Task.DATE_FORMAT.format(deadlineTime) + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Representing Letter to distinguish the Task types."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Representing Letter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public char getRepLetter() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return \u0027D\u0027;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns a bar delimited string for storage-related purposes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Bar delimited string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String toDelimitedString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return String.format(\"%c | %c | %s | %s\", this.getRepLetter(), this.isDone() ? \u0027T\u0027 : \u0027F\u0027, super.getTaskName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                Task.DATE_FORMAT.format(this.deadlineTime));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 53
    }
  },
  {
    "path": "src/main/java/bot/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Starting Time(with date) of event. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Date eventTimeFrom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Starting Time(with date) of event. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Date eventTimeTo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the Event object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param eventName     Name of event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param eventTimeFrom Starting Date and Time of event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param eventTimeTo   Ending Date and Time of event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Event(String eventName, Date eventTimeFrom, Date eventTimeTo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(eventName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.eventTimeFrom \u003d eventTimeFrom;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.eventTimeTo \u003d eventTimeTo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Event name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Event name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return super.getTaskName()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \" (at: \" + Task.DATE_FORMAT.format(eventTimeFrom) + \" - \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + Task.DATE_FORMAT.format(eventTimeTo) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Representing Letter to distinguish the Task types."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Representing Letter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public char getRepLetter() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return \u0027E\u0027;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns a bar delimited string for storage-related purposes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Bar delimited string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String toDelimitedString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return String.format(\"%c | %c | %s | %s | %s\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                this.getRepLetter(), this.isDone() ? \u0027T\u0027 : \u0027F\u0027, super.getTaskName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                Task.DATE_FORMAT.format(this.eventTimeFrom), Task.DATE_FORMAT.format(this.eventTimeTo));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 60
    }
  },
  {
    "path": "src/main/java/bot/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.ui.Checkbox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Represents the Task object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * One Task object per task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final SimpleDateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Name of the Task. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /** Done State of the Task. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the Task object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param taskName Name of the Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Task name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Task name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns whether the Task is done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Done state of the Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Sets the Done state of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param isDone Intended Done state"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Representing Letter to distinguish the Task types."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Representing Letter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public char getRepLetter() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return \u0027 \u0027;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns a bar delimited string for storage-related purposes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Bar delimited string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String toDelimitedString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return String.format(\"%c | %c | %s\", this.getRepLetter(), this.isDone() ? \u0027T\u0027 : \u0027F\u0027, this.taskName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String checkbox \u003d this.isDone() ? Checkbox.TICK.icon : Checkbox.CROSS.icon;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return \"[\" + this.getRepLetter() + \"]\" + checkbox + \" \" + this.getTaskName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 81
    }
  },
  {
    "path": "src/main/java/bot/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * ArrayList of Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the TaskList object from existing list of Task objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks Existing list of Task objects"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the TaskList object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns list of Task objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return List of the Task objects"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Task at the specified index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param chosenTaskNo Specified index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Chosen Task object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Task getTask(int chosenTaskNo) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return this.tasks.get(chosenTaskNo - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Adds the Task object to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param task Task object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Sets the Task object at the specified index as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param chosenTaskNo Specified index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Chosen Task object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Task doDoneTask(int chosenTaskNo) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Task doneTask \u003d this.tasks.get(chosenTaskNo - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assert doneTask !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        doneTask.setDone(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Deletes the Task object at the specified index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param chosenTaskNo Specified index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Deleted Task object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Task doDeleteTask(int chosenTaskNo) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Task deletedTask \u003d this.tasks.get(chosenTaskNo - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assert deletedTask !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tasks.remove(chosenTaskNo - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 81
    }
  },
  {
    "path": "src/main/java/bot/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Represents the duke.Duke.Task.Todo object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * One duke.Duke.Task.Todo object per duke.Duke.Task.Todo."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Todo(String todoName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        super(todoName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the Representing Letter to distinguish the Task types."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Representing Letter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public char getRepLetter() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return \u0027T\u0027;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 24
    }
  },
  {
    "path": "src/main/java/bot/duke/ui/Checkbox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public enum Checkbox {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    TICK(\"[✓]\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    CROSS(\"[✗]\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public final String icon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Checkbox(String icon) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.icon \u003d icon;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 14
    }
  },
  {
    "path": "src/main/java/bot/duke/ui/CmdUx.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Provides Command Line Interface elements."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Makes printing easier"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class CmdUx {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private static GuiWindow guiWindow \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void setGuiWindow(GuiWindow currGuiWindow) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        guiWindow \u003d currGuiWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints a message wrapped by horizontal bars."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param str The message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void printHBars(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String horizontalBar \u003d \"    _______________________________________________________________________\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String[] strSplit \u003d str.split(\"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        sb.append(horizontalBar + \"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (String line : strSplit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            sb.append(\"    \" + line + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        sb.append(horizontalBar + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        guiWindow.addLabelToDialogBox(sb.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void print(String str) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        guiWindow.addLabelToDialogBox(str);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 38
    }
  },
  {
    "path": "src/main/java/bot/duke/ui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * A GUI for duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private static final String WINDOW_TITLE \u003d \"Duke, The Handsome Bot ~ by Krusagiz ~\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Constructs the Gui Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Explicitly added to fix initialisation issues"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Gui() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/GuiWindow.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            stage.setTitle(WINDOW_TITLE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            fxmlLoader.\u003cGuiWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Ui.printWelcomeMsg();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 44
    }
  },
  {
    "path": "src/main/java/bot/duke/ui/GuiWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class GuiWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.setGuiWindow(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        addLabelToDialogBox(\"\u003e\u003e\u003e\" + input + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Adds the specified String into the dialog container as a Label."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param input String to add to the dialog container as a Label."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void addLabelToDialogBox(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Label output \u003d new Label(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        output.setWrapText(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        output.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        dialogContainer.getChildren().add(output);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 62
    }
  },
  {
    "path": "src/main/java/bot/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package bot.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import bot.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Contains methods that interfaces with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    static final String WELCOME_MSG \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    static final String EXIT_MSG \u003d \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Press ENTER to exit!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    static String preLaunchMsg \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void addPreLaunchMsg(String msg) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        preLaunchMsg \u003d preLaunchMsg + msg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints the Welcome message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void printWelcomeMsg() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        final int WELCOME_PREPEND_SPACING_COUNT \u003d 23;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(preLaunchMsg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.print(\"\\n\".repeat(WELCOME_PREPEND_SPACING_COUNT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.print(\"\\nHello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(WELCOME_MSG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints the Exit message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void printExitMsg() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(EXIT_MSG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Reads input from the console."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return input from the console"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static String readInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return SCANNER.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Lists the Task objects in a given list of Task objects."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param taskList An ArrayList of tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void listTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            sb.append(i++ + \".\" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(sb.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Lists search results."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks         Full list of tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param searchResults Index of tasks in search result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void listSearchResults(ArrayList\u003cTask\u003e tasks, ArrayList\u003cInteger\u003e searchResults) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (searchResults.size() \u003e 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            sb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            for (Integer index : searchResults) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                sb.append(index + \".\" + tasks.get(index).toString() + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            sb.append(\"There are no matching tasks in your list! X_X \\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    + \"Try again with another search term!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(sb.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints the message upon successfully adding a task to a given list of Task objects."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks Given ArrayList of Task objects, for counting purposes only"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param task  The Task that was added"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void printAddSuccess(ArrayList\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \"  \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints the message upon successfully marking a Task as done."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param chosenTask The Task that was made done"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void printDoneSuccess(Task chosenTask) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(\"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \" \" + Checkbox.TICK.icon + \" \" + chosenTask.getTaskName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints the message upon successfully deleting a Task from a given list of Task objects."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tasks       Given ArrayList of Task objects, for counting purposes only"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param deletedTask The Task that was deleted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void printDeleteSuccess(ArrayList\u003cTask\u003e tasks, Task deletedTask) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(\"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \"  \" + deletedTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Prints a given error message."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param errorMessage Given error message"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void exposeError(String errorMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CmdUx.printHBars(errorMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 137
    }
  },
  {
    "path": "src/main/resources/view/GuiWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.effect.Blend?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"699.0\" prefWidth\u003d\"706.0\" style\u003d\"-fx-background-color: black;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"bot.duke.ui.GuiWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" centerShape\u003d\"false\" layoutX\u003d\"6.0\" layoutY\u003d\"651.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"617.0\" AnchorPane.bottomAnchor\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"623.0\" layoutY\u003d\"651.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: black;\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"118.0\" pannable\u003d\"true\" prefHeight\u003d\"525.0\" prefWidth\u003d\"706.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"691.0\" style\u003d\"-fx-background-color: black; -fx-font: 12 \u0026quot;Consolas\u0026quot;; -fx-border-color: black; -fx-border-style: dashed;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u003cBlend mode\u003d\"SCREEN\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003cImageView fitHeight\u003d\"118.0\" fitWidth\u003d\"344.0\" layoutX\u003d\"219.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u003cImage url\u003d\"@../images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 40
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "todo Draw Za Warudo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "deadline Do Homework /by Never"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "event Watch Kurtzpel Weekly Brawl /at Mon 9pm - Mon 12pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 23
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 34
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "│     └─seedu/duke/duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        └─seedu/duke/bot.duke.DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/bot.duke.DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 5,
      "-": 165
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Application.launch(duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 3,
      "-": 107
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "In this tutorial, we will be creating a GUI for duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "![Mockup for duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "![duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "![duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        stage.setTitle(\"duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "![duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 8,
      "-": 150
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "For duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    return \"duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "You have successfully implemented a fully functional GUI for duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 7,
      "-": 236
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Let\u0027s return to duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "As part of the effort to separate the code handling duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void setDuke(duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * A GUI for duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private duke duke \u003d new duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 8,
      "-": 286
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 4,
      "-": 70
    }
  }
]
