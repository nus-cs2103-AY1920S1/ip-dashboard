[
  {
    "path": "DukeOutput.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "T | 1 |  read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "E | 1 |  party   | 04/07/2019 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "D | 0 | buy groceries  | 06/07/2018 2311"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "E | 1 | tutorial  | 02/02/2023 1200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 5
    }
  },
  {
    "path": "TestOutput.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "E | 0 | party | 04/07/2019 2359"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 18,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * midcommand is attribute for the string command after \"deadline\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * formattedDate is attribute for the date"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String midcommand; private String formattedDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for child class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * defines the midcommand, and calculates the formattedDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case date is not entered in the correct format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Deadline(String command) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitteddate \u003d command.split(\"/\",2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Date formalDate \u003d ft.parse(splitteddate[1].substring(3));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            formattedDate \u003d dateFormat.format(formalDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        midcommand \u003d splitteddate[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for \"list\" command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if(done){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[D][✓] \" + midcommand + \"(by: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[D][✗] \" + midcommand + \"(by: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for text file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if(done){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"D | 1 | \" + midcommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"D | 0 | \" + midcommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * read user input as convert it into a Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param s is the user input string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return a Task (Deadline) object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case segments[3] is not in the proper date format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Task outputAsDeadline(String s) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]segments \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String taskCommand \u003d segments[2] + \"/by: \" + segments[3];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Deadline newTask \u003d new Deadline(taskCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (segments[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            newTask.taskDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks when task is done"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 89
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Duke(String filePath) throws Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "           tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void run() throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui.run(tasks, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        new Duke(\"DukeOutput.txt\").run();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 30,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * exception for incorrect date format"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param message is dummy parameter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * midcommand is attribute for the string command after \"deadline\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * formattedDate is attribute for the date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String midcommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String formattedDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for child class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * defines the midcommand, and calculates the formattedDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case date is not entered in the correct format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Event(String command) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitteddate \u003d command.split(\"/\",2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Date formalDate \u003d ft.parse(splitteddate[1].substring(3));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            formattedDate \u003d dateFormat.format(formalDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        midcommand \u003d splitteddate[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for \"list\" command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if(done){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[E][✓] \" + midcommand + \"(at: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[E][✗] \" + midcommand + \"(at: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for text file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"E | 1 | \" + midcommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"E | 0 | \" + midcommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * read user input as convert it into a Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param s is the user input string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return a Task (Event) object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case segments[3] is not in the proper date format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Task outputAsEvent(String s) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]segments \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String taskCommand \u003d segments[2] + \"/at: \" + segments[3];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Event newTask \u003d new Event(taskCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (segments[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            newTask.taskDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks if task is done"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 88
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * storage and tasks variables dictates where to store and output"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Storage storage; private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Parser(Storage storage, TaskList tasks){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * clears the DukeOutput in case anything goes wrong, but does not clear list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void EmptyOutput() throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        storage.emptyOutput();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"Output Emptied\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks tasks as done and prints the output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the string input that is processed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void done(String command){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            int val \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.taskDone(val-1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" + tasks.taskPrint(val-1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.printToOutput(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Error, you have entered an invalid number\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * deletes the task from TaskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the string input that is processed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void delete(String command){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            int val \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\"+ \"\\n\" + tasks.taskPrint(val-1) +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    \"\\n\"+ \"Now you have \" + (tasks.size()-1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.remove(val - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.printToOutput(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Error, you have entered an invalid number\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates a new ToDo task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user string input to be processed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case user inputs in an incorrect format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void todo(String command) throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String midCommand \u003d splitWords[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (midCommand.length() !\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.add(new ToDo(midCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.printToOutput(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates a new deadline task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user string input to be processed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case user inputs in an incorrect format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void deadline(String command) throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String midCommand \u003d splitWords[1].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (midCommand.length() !\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.add(new Deadline(midCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.printToOutput(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates a new event task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user string input to be processed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case user inputs in an incorrect format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void event(String command) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String midCommand \u003d splitWords[1].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (midCommand.length() !\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.add(new Event(midCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.printToOutput(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 102
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * variable is the filename to output to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param filename is the name of hard drive file to output to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Storage(String filename){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to load the list from output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return ArrayList of tasks to create TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case BufferedReader is unable to read the filename"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws Exception  {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ArrayList\u003cTask\u003elist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        BufferedReader br \u003d Files.newBufferedReader(Paths.get(filename));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String lineToRead;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        while ((lineToRead \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if( (!lineToRead.equals(\"\")) \u0026\u0026 (lineToRead.charAt(0)\u003d\u003d\u0027T\u0027) ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Task newTask \u003d ToDo.outputAsToDo(lineToRead);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }else if( (!lineToRead.equals(\"\")) \u0026\u0026 (lineToRead.charAt(0)\u003d\u003d\u0027D\u0027)){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Task newTask \u003d Deadline.outputAsDeadline(lineToRead);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }else if((!lineToRead.equals(\"\")) \u0026\u0026 (lineToRead.charAt(0)\u003d\u003d\u0027E\u0027)){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Task newTask \u003d Event.outputAsEvent(lineToRead);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }else{}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints list on the output text file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param tasks is the list of tasks to be printed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException in case filename is not found"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void printToOutput(TaskList tasks) throws FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PrintStream outputTo \u003d new PrintStream(filename);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.println(tasks.printForOutput());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * empties out the output if required, but not the TaskList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException in case the filename is not found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void emptyOutput() throws FileNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PrintStream outputTo \u003d new PrintStream(filename);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.println(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 70
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * attributes for the user input string and to flag whether task is done"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    protected String command; protected Boolean done;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is teh user input string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Task(String command){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints a task in the format required for a list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the string to print"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[✓] \" + command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[✗]\" + command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * dummy method to be overriden by child class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return dummy String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks the task as done;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 47
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * variable list contains all of user\u0027s tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor if the hard drive already contains tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param list is the input list from hard drive"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor in case the hard drive file is not read"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints the tasks on the list in the format of list required"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void printForList(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(int i\u003d1; i\u003c\u003dlist.size(); i++){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(i + \". \" + list.get(i-1).printer());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * outputs the tasks on the list in the format for hard drive output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the string which then will be outputted on the text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printForOutput(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        StringBuilder result\u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(int i\u003d1; i\u003c\u003dlist.size(); i++){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            result.append(list.get(i - 1).printToOutput()).append(\"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks the specific task as done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of the task to be marked as done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(int x){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        list.get(x).taskDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * returns the task details in a list-printable format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of task to be printed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the task details"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String taskPrint(int x){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.get(x).printer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print latest task addition to the list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return task details in string format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printLatest(){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.get(list.size()-1).printer();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * size of the Arraylist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return int value of the size"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Integer size(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * remove task from list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of the task in the list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void remove(int x){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        list.remove(x);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * adds a new task to the list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param newTask is the Task to add"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void add(Task newTask){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 93
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for the child class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ToDo(String command){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for \"list\" command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[T][✓] \" + command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[T][✗] \" + command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for text file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"T | 1 | \" + command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"T | 0 | \" + command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * read user input as convert it into a Task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param s is the user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return a Task (ToDo) object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Task outputAsToDo(String s){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]segments \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ToDo newTask \u003d new ToDo(segments[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //System.out.println(segments[0] + \",\" + segments[1] + \",\" + segments[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (segments[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            newTask.taskDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks task as done"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 60
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Prints introduction, takes in user input, and processes it"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param tasks gives the TaskList that contains all tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param storage gives the storage object to retrieve \u0026 output data"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void run(TaskList tasks, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final String LINE_BORDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(LINE_BORDER + \"\\n\" + \"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\" + \"\\n\" + LINE_BORDER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Parser parser \u003d new Parser(storage, tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        while(true){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String[]words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(LINE_BORDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (command.equals(\"bye\")) {                                                                                //IF BYE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\" + \"\\n\" + LINE_BORDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if (command.equals(\"EmptyOutput\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                parser.EmptyOutput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if ( (words.length\u003d\u003d2) \u0026\u0026 (words[0].equals(\"done\")) \u0026\u0026 (isNumeric(words[1])) ) {                     //IF DONE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                parser.done(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if ((words.length\u003d\u003d2)\u0026\u0026(words[0].equals(\"delete\"))\u0026\u0026(isNumeric(words[1]))){                          //IF DELETE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                parser.delete(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if (command.equals(\"list\")){                                                                         //IF LIST"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                tasks.printForList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    String[]splitwords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    if (splitwords[0].equals(\"todo\")) {                                                                 //IF TODO"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        parser.todo(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    } else if (splitwords[0].equals(\"deadline\")) {                                                      //IF DEADLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        parser.deadline(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    } else if (splitwords[0].equals(\"event\")) {                                                         //IF EVENT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        parser.event(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                        throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task:\" + \"\\n\" + tasks.printLatest()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                            + \"\\n\" + \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                }catch(IllegalArgumentException e){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-()\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                }catch(DukeException e){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    System.out.println(\"☹ OOPS!!! The date format is wrong.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                }catch(Exception e){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    System.out.println(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(LINE_BORDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints error message if file is not available"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"File not available\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * determines whether parameter is an integer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param str takes in the string that will be checked"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return boolean value"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch(NumberFormatException e){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 92
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void printToOutputTest() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(\"D | 0 | submission  | 04/07/2019 2359\" ,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new Deadline(\"submission /by 4/7/2019 2359\").printToOutput());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 11
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void isNumericTest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(true, Parser.isNumeric(\"1\"));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 9
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void loadTest() throws Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ArrayList\u003cTask\u003etestTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        testTask.add(new ToDo(\" read book\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        testTask.add(new Event(\" party /at 04/07/2019 2359\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(new TaskList(testTask).printForOutput(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new TaskList(new Storage(\"TestOutput.txt\").load()).printForOutput());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 17
    }
  }
]
