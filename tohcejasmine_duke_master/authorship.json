[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/*checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "tohcejasmine": 30
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.commands.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * A program named Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Something like a Personal Assistant Chatbot that helps"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * a person keep track of various things, it can only"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * understand text commands of a specific structure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Duke(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui.showGreetings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        boolean doesProgramContinue \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        while (doesProgramContinue) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                String userFullInput \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                Command c \u003d parser.parse(userFullInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                c.execute(this.getTaskList(), this.getStorage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                assert doesProgramContinue \u003d\u003d true : \"doesProgramContinue should be true\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                doesProgramContinue \u003d c.continuesProgram();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        new Duke(\"F:\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").run();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //////////////"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // GETTERS //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ////////////"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "tohcejasmine": 60
    }
  },
  {
    "path": "src/main/java/com/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Mainly contains the ArrayList of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Supports operations to modify this AL"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTask) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr \u003d listOfTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /////////////////"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // OPERATIONS //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ///////////////"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Adds new task to list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Number of tasks in list increases by one."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Task addTask(Task newTask) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr.add(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Marks task at given list index as done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param doneIdx"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return Task that was marked done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Task markTaskDone(int doneIdx) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Task doneTask \u003d taskArr.get(doneIdx-1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (doneTask.isDone()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeException(StaticStrings.TASK_ALREADY_DONE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        doneTask.markDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Removes task at given list index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Number of tasks in list decreases by one."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param deleteIdx"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Task deleteTask(int deleteIdx) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Task deletedTask \u003d taskArr.get(deleteIdx-1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr.remove(deletedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ////////////////////"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // HELPER METHODS //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ///////////////////"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArr() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return taskArr;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public int getNumTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return taskArr.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 79
    }
  },
  {
    "path": "src/main/java/com/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Whether command has meta info (like /by, /at)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected boolean hasSubCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructor for commands adding tasks to list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param commandWord keyword"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param description description of task to add"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param hasSubCommand whether it has a subcommand like \u0027/by\u0027, \u0027/at\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public AddCommand(String commandWord, String description, boolean hasSubCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.hasSubCommand \u003d hasSubCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super.print();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Command description: \" + description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Has subcommand: \" + hasSubCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (o \u003d\u003d this) { return true; }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Not even the same class"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(o instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        AddCommand c \u003d (AddCommand) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return description \u003d\u003d c.description \u0026\u0026"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                hasSubCommand \u003d\u003d c.hasSubCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 46
    }
  },
  {
    "path": "src/main/java/com/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Contains information given by user about command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a command. A \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * corresponds to a main command word (e.g. \u003ccode\u003elist\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e etc.)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * and details required for it to be execute (e.g. description of event, index of task to be"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * deleted from list, details of subcommands like \u003ccode\u003e/by\u003c/code\u003e)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected String command; // e.g. list, done, bye, todo, deadline, event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected boolean continuesProgram;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Command(String commandWord) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.command \u003d commandWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        continuesProgram \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean continuesProgram() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return continuesProgram;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * To help with debugging."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Command: \" + command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * For testing and assertions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param o Object to compare to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return Whether object is equivalent/equal."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Not even same class"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(o instanceof Command)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command c \u003d (Command) o;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return command.equals(c.command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 60
    }
  },
  {
    "path": "src/main/java/com/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.command.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected int deleteIdx;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DeleteCommand(int deleteTaskIdx) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"delete\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.deleteIdx \u003d deleteTaskIdx;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Deletes task from list, saves changes in text file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Checks if index of task to delete is within range"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numTasks \u003d taskList.getNumTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeExecuteException(StaticStrings.NO_TASKS_DELETE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (deleteIdx \u003c 1 || deleteIdx \u003e numTasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeExecuteException(StaticStrings.NOT_IN_RANGE + numTasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(deleteIdx);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        storage.save(taskList.getTaskArr());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui.showDeleteTaskResponse(deletedTask, taskList.getTaskArr());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public int getDeleteIdx() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return deleteIdx;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super.print();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Index of task to mark done: \" + deleteIdx);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Not even same class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(o instanceof Command)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        DeleteCommand c \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        boolean sameDeleteIdx \u003d deleteIdx \u003d\u003d c.getDeleteIdx();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return super.equals(o) \u0026\u0026 !sameDeleteIdx;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 64
    }
  },
  {
    "path": "src/main/java/com/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.command.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected int doneIdx;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DoneCommand(int doneTaskIdx) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"done\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.doneIdx \u003d doneTaskIdx;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Marks a task done, saves changes in text file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Checks if index of task to mark done is within range"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numTasks \u003d taskList.getNumTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeCommandException(StaticStrings.NO_TASKS_DONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (doneIdx \u003c 1 || doneIdx \u003e numTasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeExecuteException(StaticStrings.NOT_IN_RANGE + numTasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            assert doneIdx \u003c numTasks : \"index of done task should be equals to or less than number of tasks\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Task doneTask \u003d taskList.markTaskDone(doneIdx);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            storage.save(taskList.getTaskArr());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ui.showMarkTaskDoneResponse(doneTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super.print();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Index of task to mark done: \" + doneIdx);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (o \u003d\u003d this) { return true; }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Not even the same class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(o instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        DoneCommand c \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return c.doneIdx \u003d\u003d doneIdx;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 59
    }
  },
  {
    "path": "src/main/java/com/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"bye\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        execute();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        continuesProgram \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 21
    }
  },
  {
    "path": "src/main/java/com/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * List of words to find from tasks\u0027 descriptions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected ArrayList\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public FindCommand(ArrayList\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"find\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            for (Task currTask : taskList.getTaskArr()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                boolean alreadyFound \u003d matchingTasks.contains(currTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                if (!alreadyFound \u0026\u0026 currTask.containsKeyword(keyword)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    matchingTasks.add(currTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (matchingTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ui.showNoTasksMatchingKeywordResponse();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ui.showFindKeywordResponse(matchingTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 39
    }
  },
  {
    "path": "src/main/java/com/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"list\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (taskList.getNumTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ui.showMessage(StaticStrings.NO_TASKS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ui.showListCommandResponse(taskList.getTaskArr());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * To help with debugging."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super.print();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 28
    }
  },
  {
    "path": "src/main/java/com/commands/SubCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.command.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Commands which adds a task to list,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * where task has meta information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class SubCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected String subCommand, subDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public SubCommand(String commandWord, String description,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                      String subCommandWord, String subDescription) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(commandWord, description, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.subCommand \u003d subCommandWord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.subDescription \u003d subDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            newTask \u003d new Deadline(description, subDescription);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            newTask \u003d new Event(description, subDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeExecuteException(StaticStrings.NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d taskList.getTaskArr();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        storage.save(taskArr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui.showAddTaskResponse(newTask, taskArr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super.print();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Subcommand: \" + subCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Subcommand description: \" + subDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Not even the same class"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(o instanceof SubCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        SubCommand sc \u003d (SubCommand) o;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return sc.subCommand \u003d\u003d subCommand \u0026\u0026"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                sc.subDescription \u003d\u003d subDescription;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 68
    }
  },
  {
    "path": "src/main/java/com/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ToDoCommand(String taskDescription) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"todo\", taskDescription, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Adds ToDo task to list, saves new list to text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Task newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d taskList.getTaskArr();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        storage.save(taskArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui.showAddTaskResponse(newTask, taskArr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 30
    }
  },
  {
    "path": "src/main/java/com/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.message \u003d ui.indentMessage(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 19
    }
  },
  {
    "path": "src/main/java/com/exceptions/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Thrown when data in text file in wrong format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DukeStorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DukeStorageException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 10
    }
  },
  {
    "path": "src/main/java/com/exceptions/DukeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DukeTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DukeTaskException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 9
    }
  },
  {
    "path": "src/main/java/com/exceptions/command/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DukeCommandException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 9
    }
  },
  {
    "path": "src/main/java/com/exceptions/command/DukeExecuteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DukeExecuteException extends DukeCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DukeExecuteException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 8
    }
  },
  {
    "path": "src/main/java/com/exceptions/parser/DukeParserException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DukeParserException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DukeParserException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 11
    }
  },
  {
    "path": "src/main/java/com/exceptions/parser/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//Empty description after command (todo, event, deadline, list, done)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Thrown if Empty description after command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * (e.g. todo, event, deadline, list, done)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class EmptyDescriptionException extends DukeParserException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public EmptyDescriptionException(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"The description of \" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                command +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \" cannot be empty.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 18
    }
  },
  {
    "path": "src/main/java/com/exceptions/parser/IncorrectInfoInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Thrown when incorrect usage of commands with subcommands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * e.g. deadline with /by, event with /at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * These commands require additional info of subcommands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * These info can either be absent or more than one subcommand was entered"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class IncorrectInfoInputException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public IncorrectInfoInputException(String subCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"Please have one \\\"\" + subCommand + \"\\\" provided.\" );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 15
    }
  },
  {
    "path": "src/main/java/com/exceptions/parser/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.exceptions.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Thrown when user input (first word) is unrecognised/not in program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 12
    }
  },
  {
    "path": "src/main/java/com/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructor for Deadline tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param by when to finish the task by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(description, by);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // If deadline /by is of correct format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            if (isValidDateTimeFormat(by)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                SimpleDateFormat displayFormat \u003d new SimpleDateFormat(\"dd MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                // Note: SimpleDateFormat will also recognise dd/MM/yy (where yy A.D.)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                SimpleDateFormat inputFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                Date date \u003d inputFormat.parse(by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                // Output: 2nd of December 2019, 6pm"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                String newBy \u003d displayFormat.format(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                this.subDescription \u003d newBy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            new Ui().showMessage(\"Date not valid.\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    \"(Example: Recognised format \\\"2/12/2019 1800\\\"; converts to \\\"2nd of December 2019, 6pm\\\")\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + subDescription + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcKeyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcDescription \u003d description.toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcSubDescription \u003d subDescription.toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return lcDescription.contains(lcKeyword) || lcSubDescription.contains(lcKeyword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns whether description for /by is of"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * recognised date-time format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Format: 2/12/2019 1800"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Which can then be converted to format: 2 December 2019 6:00 pm"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param str by description"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return Whether description for /by can be converted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private boolean isValidDateTimeFormat(String str) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        SimpleDateFormat inputFormat \u003d new SimpleDateFormat(\"dd/MM/yyy hhmm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            inputFormat.parse(str);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 69
    }
  },
  {
    "path": "src/main/java/com/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(description, at);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + subDescription + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcKeyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcDescription \u003d description.toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcSubDescription \u003d subDescription.toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return lcDescription.contains(lcKeyword) || lcSubDescription.contains(lcKeyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 25
    }
  },
  {
    "path": "src/main/java/com/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a task (something that needs to be done)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Parent class of different types of Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected String subDescription; // For /by, /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Task(String description, String subDescription) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.subDescription \u003d subDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return (isDone? \"v\" : \"x\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getSubDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return subDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean isDone() { return isDone; }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //Display \"[status-icon] task-description\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Mainly for use in saving data to hard disk"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getTaskType() { return \"?\"; }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Returns true if description or subdescription contains keyword!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcKeyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String lcDescription \u003d description.toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return lcDescription.contains(lcKeyword);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 56
    }
  },
  {
    "path": "src/main/java/com/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(description, null);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 17
    }
  },
  {
    "path": "src/main/java/com/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.parser.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.awt.font.NumericShaper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Makes sense of the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Creates the appropriate Command to be executed later."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Split input into individual words"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e fullUserInputArr \u003d splitStrIntoArr(userInput.trim(), \" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command currCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Identify command by first word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String firstWord \u003d fullUserInputArr.get(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d parseToDoCommand(fullUserInputArr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d parseFindCommand(fullUserInputArr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d parseDeadlineCommand(fullUserInputArr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d parseEventCommand(fullUserInputArr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d parseDoneCommand(fullUserInputArr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            currCommand \u003d parseDeleteCommand(fullUserInputArr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return currCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseToDoCommand(ArrayList\u003cString\u003e fullUserInputArr) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numInputWords \u003d fullUserInputArr.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Empty task description, just \"todo\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numInputWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Splice back the description"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String taskDescription \u003d joinArrIntoStr(fullUserInputArr.subList(1, numInputWords));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command newCommand \u003d new ToDoCommand(taskDescription);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Handles user input of commands with subcommands (e.g. /by, /at)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param command Command word (e.g. deadline, event)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param subCommand String preceding sub-description, starts with backslash (e.g. /by, /at)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param fullUserInputArr ArrayList of user input split into words"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return Corresponding command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseSubCommand(String command, String subCommand, ArrayList\u003cString\u003e fullUserInputArr) throws DukeException{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numInputWords \u003d fullUserInputArr.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        boolean hasOnlyCommandWord \u003d numInputWords \u003d\u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Empty description (e.g. just \"deadline\", \"event /at\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (hasOnlyCommandWord || fullUserInputArr.get(1).equalsIgnoreCase(subCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new EmptyDescriptionException(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Index of first occurrence of subcommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int firstSubCommandIdx \u003d fullUserInputArr.indexOf(subCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int lastSubCommandIdx \u003d fullUserInputArr.indexOf(subCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        boolean hasSubCommand \u003d firstSubCommandIdx !\u003d -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        boolean hasMultipleSubCommands \u003d firstSubCommandIdx !\u003d lastSubCommandIdx;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // No \"/by\",\"/at\" or multiple \"/by\"s, \"/at\"s provided"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!hasSubCommand || hasMultipleSubCommands) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new IncorrectInfoInputException(subCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        boolean hasSubCommandDescription \u003d firstSubCommandIdx !\u003d fullUserInputArr.size()-1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // No description of \"/by\" or \"/at\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!hasSubCommandDescription) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new EmptyDescriptionException(subCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assert firstSubCommandIdx \u003e 1 : \"firstSubCommandIdx not be the first word in input\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assert firstSubCommandIdx \u003c numInputWords -1 : \"firstSubCommandIdx should not be the last word in user input\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assert firstSubCommandIdx !\u003d lastSubCommandIdx : \"there should only be one subcommand\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String taskDescription \u003d joinArrIntoStr(fullUserInputArr.subList(1, firstSubCommandIdx));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String subCommandDescription \u003d joinArrIntoStr(fullUserInputArr.subList(firstSubCommandIdx+1, numInputWords));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command newCommand \u003d new SubCommand(command, taskDescription, subCommand, subCommandDescription);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseDeadlineCommand(ArrayList\u003cString\u003e fullUserInputArr) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return parseSubCommand(\"deadline\", \"/by\", fullUserInputArr);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseEventCommand(ArrayList\u003cString\u003e fullUserInputArr) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return parseSubCommand(\"event\", \"/at\", fullUserInputArr);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseFindCommand(ArrayList\u003cString\u003e fullUserInputArr) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numInputWords \u003d fullUserInputArr.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Empty description, just \"find\" with no keyword"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numInputWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new EmptyDescriptionException(\"find\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e findKeywords \u003d convertToArrayList(fullUserInputArr.subList(1, numInputWords));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command newCommand \u003d new FindCommand(findKeywords);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseDoneCommand(ArrayList\u003cString\u003e fullUserInputArr) throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numInputWords \u003d fullUserInputArr.size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Empty description, just \"done\" with no keyword"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numInputWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new IncorrectInfoInputException(StaticStrings.NO_DONE_IDX_PROVIDED);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // More than one input after \"done\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numInputWords \u003e 2) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new IncorrectInfoInputException(StaticStrings.TOO_MANY_DONE_INPUT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            // Check if integer is provided, not characters"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            int doneIdx \u003d Integer.parseInt(fullUserInputArr.get(1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Command newCommand \u003d new DoneCommand(doneIdx);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return newCommand;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeException(StaticStrings.NON_INT_PROVIDED_DONE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Command parseDeleteCommand(ArrayList\u003cString\u003e fullUserInputArr) throws DukeException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numInputWords \u003d fullUserInputArr.size();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Empty description, just \"delete\" with no keyword"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numInputWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeException(StaticStrings.NO_DELETE_IDX_PROVIDED);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // More than one input after \"delete\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (numInputWords \u003e 2) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeException(StaticStrings.TOO_MANY_DELETE_INPUT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            // Check if integer is provided, not characters"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            int deleteIdx \u003d Integer.parseInt(fullUserInputArr.get(1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Command newCommand \u003d new DeleteCommand(deleteIdx);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return newCommand;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeException(StaticStrings.NON_INT_PROVIDED_DELETE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ////////////////////"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // HELPER METHODS //"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ///////////////////"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private ArrayList\u003cString\u003e convertToArrayList(String[] arr) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new ArrayList\u003cString\u003e(Arrays.asList(arr));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private ArrayList\u003cString\u003e convertToArrayList(List\u003cString\u003e arr) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new ArrayList\u003cString\u003e(arr);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Splits a string by given regex pattern."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * E.g. \"A B C\" to [A, B, C] with pattern \" \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param input String or sentence"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param pattern Regex expression to separate string by"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return ArrayList where each item is a substring"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private ArrayList\u003cString\u003e splitStrIntoArr(String input, String pattern) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d convertToArrayList(input.split(pattern));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private String joinArrIntoStr(List\u003cString\u003e arr) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String result \u003d String.join(\" \", arr);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 200
    }
  },
  {
    "path": "src/main/java/com/util/StaticStrings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class StaticStrings {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String BORDER \u003d INDENT + \"___________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String STORAGE_SEPARATOR \u003d \" | \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Responses to commands"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String GREETING \u003d \"Hello! I\u0027m Duke\\n    What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String ADD_TASK \u003d \"Noted. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String REMOVE_TASK \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String LIST_TASK \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String MATCHING_TASK \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String TASK_ALREADY_DONE \u003d \"This task has already been marked done!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Exception messages for Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String ERROR_FILE_NOT_FOUND \u003d \"File not found at given file path. Error in creating new file there. :-(\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String ERROR_READ_FROM_FILE \u003d \"Woah! File not written in the right format. :-( \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String ERROR_SAVE_FROM_FILE \u003d \"Whoops! There was an error in saving to the file.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Exception messages when executing Commands"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_TASKS_DELETE \u003d \"You have no tasks to delete!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_TASKS_MATCH \u003d \"No matching tasks!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_TASKS_DONE \u003d \"You have no tasks to mark done!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_TASKS \u003d \"You have no tasks yet\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NOT_IN_RANGE \u003d \"Please give a number from 1 to \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_SUCH_COMMAND \u003d \"No such command with subcommand!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Exception messages for Storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_DONE_IDX_PROVIDED \u003d \"Please provide index of task in list to be marked done.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String TOO_MANY_DONE_INPUT \u003d \"Please just put the index of task in list after \\\"done\\\" and nothing else.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NON_INT_PROVIDED_DONE \u003d \"Please enter an integer after \\\"done\\\".\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NO_DELETE_IDX_PROVIDED \u003d \"Please provide index of task in list to be deleted.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String TOO_MANY_DELETE_INPUT \u003d \"Please just put the index of task in list after \\\"delete\\\" and nothing else.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String NON_INT_PROVIDED_DELETE \u003d \"Please enter an integer after \\\"delete\\\".\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 48
    }
  },
  {
    "path": "src/main/java/com/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.util.StaticStrings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Class responsible for loading and saving tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * from a text file saved in the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Format of file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // T | 1 | read book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // T | 1 | join sports club"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private boolean doesFileExist;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Storage (String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.doesFileExist \u003d file.exists();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Reads in data from given text file,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * reads and converts to a list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * If no such file, returns an empty list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return List of tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // If no such file, create one"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!doesFileExist) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ArrayList\u003cTask\u003e newTaskArr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            save(newTaskArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return newTaskArr;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            // If file exists, read in data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Scanner input \u003d new Scanner(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            ArrayList\u003cString\u003e oneLineTextArr; // One line of file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            String taskType; // T (todo), D (deadline), E (event)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            boolean isTaskDone; // 0 (not done) , 1 (done)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Task currTask;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                // Splits data from A | B | C to [A, B, C]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                oneLineTextArr \u003d new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        Arrays.asList(input.nextLine().split(\" \\\\| \"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                taskType \u003d oneLineTextArr.get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                isTaskDone \u003d oneLineTextArr.get(1).equals(\"1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    currTask \u003d new ToDo(oneLineTextArr.get(2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    currTask \u003d new Deadline(oneLineTextArr.get(2), oneLineTextArr.get(3));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    currTask \u003d new Event(oneLineTextArr.get(2), oneLineTextArr.get(3));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    // No such task type as entered in text file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    throw new DukeStorageException(StaticStrings.ERROR_READ_FROM_FILE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                if (isTaskDone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    currTask.markDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                taskArr.add(currTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return taskArr;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeStorageException(StaticStrings.ERROR_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Saves given updated list of tasks to text file in hard disk."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param taskArr"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e taskArr) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            // Note: Overwrites file if currently exists"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            for (Task currTask : taskArr) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                // If available, for tasks with subcommands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                String subDescription \u003d currTask.getTaskType().equals(\"T\") ?"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        \"\" : currTask.getSubDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                // Format: D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                fw.write(currTask.getTaskType() + StaticStrings.STORAGE_SEPARATOR +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        (currTask.isDone()? 1 : 0) + StaticStrings.STORAGE_SEPARATOR +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        currTask.getDescription() + StaticStrings.STORAGE_SEPARATOR +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        subDescription"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                // If not last task in data, append new line"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                int currTaskIdx \u003d taskArr.indexOf(currTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                if(currTaskIdx + 1 !\u003d taskArr.size()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    fw.write(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new DukeStorageException(StaticStrings.ERROR_SAVE_FROM_FILE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 123
    }
  },
  {
    "path": "src/main/java/com/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package com.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import com.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Deals with interaction with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Mainly printing to console appropriate messages and information (program status)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * of specified format and indentation, according to situation."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Also responsible for reading in user inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Scanner input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //////////////////"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // USER INPUTS //"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ////////////////"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns text that user has entered in console"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return User input as string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return input.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    //////////////////////"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // CONSOLE OUTPUTS //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ////////////////////"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showGreetings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(indentMessage(StaticStrings.GREETING));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(indentMessage(StaticStrings.GOODBYE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showAddTaskResponse(Task addedTask, ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(StaticStrings.ADD_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(addedTask.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(numTasksLeftMessage(taskArr));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(response);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showDeleteTaskResponse(Task deletedTask, ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(StaticStrings.REMOVE_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(deletedTask.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(numTasksLeftMessage(taskArr));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(response);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showMarkTaskDoneResponse(Task doneTask) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(StaticStrings.DONE_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(doneTask.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(response);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showListCommandResponse(ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(StaticStrings.LIST_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.addAll(listOfTasksMessage(taskArr));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(response);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showFindKeywordResponse(ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.add(StaticStrings.MATCHING_TASK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        response.addAll(listOfTasksMessage(taskArr));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(response);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showNoTasksMatchingKeywordResponse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(indentMessage(StaticStrings.NO_TASKS_MATCH));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Ordered list of tasks in string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Includes their index in list, done or not, description etc."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Presents each task in a new line."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Format:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * 1. [T][x] task-description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * 2. [E][v] task-description (at: venue)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * 3. [D][x] task-description (by: date)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param taskArr ArrayList of Task objects"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return Message in a single string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private ArrayList\u003cString\u003e listOfTasksMessage(ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d taskArr"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .map((t) -\u003e (taskArr.indexOf(t) + 1) + \". \" + t.toString())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .collect(Collectors"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        .toCollection(ArrayList::new));;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private String numTasksLeftMessage(ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int numTasks \u003d taskArr.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return (\"Now you have \" + numTasks +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                (numTasks \u003d\u003d 1? \" task\":\" tasks\") +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \" in the list.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /////////////////////"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // HELPER METHODS //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    ///////////////////"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String indentMessage(String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return StaticStrings.INDENT + message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Indents and ends each line in message with a \"\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param message Using varargs, each argument is a line in the message"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return Final message to be output to console, in a single string"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private String joinWithNewLines(ArrayList\u003cString\u003e message) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int lastIdx \u003d message.size()-1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String output \u003d message"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .subList(0, lastIdx)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .reduce(\"\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                        (subOutput, line) -\u003e subOutput + indentMessage(line) + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        output +\u003d indentMessage(message.get(lastIdx));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assert !output.substring(output.length() - 2).equals(\"\\n\") : \"message should not end with newline\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Sandwiches text between borders, prints it."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param message A string"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assert message.substring(0, 3) \u003d\u003d StaticStrings.INDENT : \"message should be indented\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(StaticStrings.BORDER);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(StaticStrings.BORDER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Sandwiches lines of text between borders, prints it."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Each line of text is a new line."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param message An arraylist where each element is a line in the message"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showMessage(ArrayList\u003cString\u003e message) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(joinWithNewLines(message));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void showMessage(String... message) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Convert String[] to ArrayList\u003cString\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003cString\u003e(Arrays.asList(message));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showMessage(output);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 168
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 10
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void parse_listCommand_success() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //TaskList taskList \u003d new Duke(\"F:\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").getTaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        TaskList taskList \u003d new Duke().getTaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command expectedOutput \u003d new ListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command actualOutput \u003d new Parser().parse(\"list\", taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void parse_doneCommand_sucess() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //TaskList taskList \u003d new Duke(\"F:\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").getTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        TaskList taskList \u003d new Duke().getTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command expectedOutput \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command actualOutput \u003d new Parser().parse(\"done 1\", taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // Although attributes are the same, may have something to do with how"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // overriden equals() method is defined in Parser class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void parse_todoInput_success() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command expectedOutput \u003d new SubCommand(\"deadline\", \"cs2103 iP\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \"/by\", \"28/8/2019 2359\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        TaskList taskList \u003d new Duke(\"F:\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").getTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(expectedOutput,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                new Parser().parse(\"deadline cs2103 iP /by 28/8/2019 2359\", taskList));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        TaskList taskList \u003d new Duke(\"F:\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").getTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command expectedOutput \u003d new AddCommand(\"todo\", \"finish cs2103 iP tasks\", false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command actualOutput \u003d new Parser().parse(\"todo finish cs2103 iP tasks\", taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Debug"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"***Expected***\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        expectedOutput.print();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"***Actual***\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        actualOutput.print();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void parse_missingBy_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Command expectedOutput \u003d new SubCommand(\"deadline\", \"cs2103 iP\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \"/by\", \"28/8/2019 2359\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //TaskList taskList \u003d new Duke(\"F:\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").getTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        TaskList taskList \u003d new Duke().getTaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            assertEquals(expectedOutput,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    new Parser().parse(\"deadline cs2103 iP 28/8/2019 2359\", taskList));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            assertEquals(\"Please have one \\\"/by\\\" provided.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void splitStrIntoArr_stringInputPattern_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        expectedOutput.add(\"Kiwis\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        expectedOutput.add(\"are\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        expectedOutput.add(\"cute\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(expectedOutput,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                new Parser().splitStrIntoArr(\"Kiwis are cute\", \" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 77
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void load() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void save() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void doesFileExist() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 22
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void addTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void markTaskDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void deleteTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // NOTE: Seems like its more productive to test other methods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // which are more complicated?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void getNumTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr.add(new ToDo(\"finish cs2103 iP\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr.add(new ToDo(\"read AP3 for cs2103 tP\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        taskArr.add(new ToDo(\"eat chocolate\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        assertEquals(3, new TaskList(taskArr).getNumTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 36
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // NOTE: Seems like you can\u0027t really test methods which return void?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void showGoodbye() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//        assertEquals(\"    Bye. Hope to see you again soon!\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//                new Ui().showGoodbye());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void showTasks() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void showAddTaskMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void showDeleteTaskMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void showMarkTaskDoneMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    void showMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 39
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [T][x] read book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 1 task in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [D][x] return book (by: June 6th)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [T][v] return book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [E][x] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [T][x] join sports club"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 4 task in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [T][v] join sports club"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [T][x] borrow book"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 5 task in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    1.[T][v] read book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    2.[D][x] return book (by: June 6th)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    3.[E][x] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    4.[T][v] join sports club"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    5.[T][x] borrow book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [D][x] return book (by: Sunday)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      [E][x] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "-----"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 54
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 21
    }
  }
]
