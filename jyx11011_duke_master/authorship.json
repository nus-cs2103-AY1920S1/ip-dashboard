[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 26,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "T | 1 | abc"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E | 0 | dfa | 2019-12-10T13:40"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 2
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final String FILEPATH \u003d \"/Users/jiangyuxin/Documents/sem1/cs2103/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (FileNotFoundException| IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String command \u003d ui.readCommand(in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (parser.isTerminatingCommand(command)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    storage.store(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    ui.showStoringError(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                ui.sayGoodBye();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Command cmd \u003d parser.parseCommand(command, tasks, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    cmd.execute(tasks, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    ui.showParsingError(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        new Duke(FILEPATH).run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 54,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a add command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add the task to the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param ui an user interface to show messages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute(TaskList tasks, Ui ui){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ui.showAddedTask(task, tasks.getSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * An abstract class representing a command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param ui an user interface to show messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the index of the task is out of range."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui) throws IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 18
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a add deadline task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description and deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DeadlineCommand(String description, LocalDateTime dateTime)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new Deadline(description, dateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d tasks.removeTaskAtIndex(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            ui.showRemovedTask(task, tasks.getSize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalIndexOfTaskException(\"Please provide an valid index of the task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d tasks.setTaskAtIndexDone(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            ui.showDoneTask(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalIndexOfTaskException(\"Please provide an valid index of the task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 25
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing add a event task command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the time at which the event happens."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventCommand(String description, LocalDateTime dateTime)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new Event(description, dateTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a list command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ListCommand(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param ui an user interface to show messages."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ui.showTasks(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing add a todo task command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ToDoCommand(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new ToDo(description));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the command is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalCommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the task description is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalDescriptionException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalDescriptionException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalIndexOfTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the task index is illegal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalIndexOfTaskException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalIndexOfTaskException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if the command is going to terminate the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param command the command to be checked"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if the command is going to terminate the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isTerminatingCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return command.equals(\"bye\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the command by parsing the command string that typed by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param command the command typed by the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskList a list stores all the tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param ui user interface to show messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the command by parsing the command string that typed by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description of the task is illegal."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalCommandException If the command is illegal."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the index provided is illegal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Command parseCommand(String command, TaskList taskList, Ui ui)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalIndexOfTaskException, IllegalDescriptionException, IllegalCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Command cmd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (command.equals(ListCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            cmd \u003d new ListCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            int indexOfSpace \u003d command.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            //if there is no space, assume that the string is a command type"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (indexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                indexOfSpace \u003d command.length();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            //seperate command and description of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String type \u003d command.substring(0, indexOfSpace);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String description \u003d command.substring(indexOfSpace).strip();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (type.equals(DoneCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                cmd \u003d new DoneCommand(Integer.parseInt(description));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else if (type.equals(DeleteCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                cmd \u003d new DeleteCommand(Integer.parseInt(description));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else if (type.equals(ToDoCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                cmd \u003d new ToDoCommand(description.strip());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else if (type.equals(DeadlineCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                int sep \u003d description.indexOf(\"/by\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                if (sep \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    throw new IllegalDescriptionException(\"The format of deadline task is wrong.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                cmd \u003d new DeadlineCommand(description.substring(0, sep).strip(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                parseDate(description.substring(sep + 3).strip()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else if (type.equals(EventCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                int sep \u003d description.indexOf(\"/at\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                if (sep \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    throw new IllegalDescriptionException(\"The format of event task is wrong.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                cmd \u003d new EventCommand(description.substring(0, sep).strip(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                parseDate(description.substring(sep + 3).strip()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalCommandException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a LocalDateTime object representing the date and time of String date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param date a String that is to be parsed into date and time"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a LocalDateTime object representing the date and time of String date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the date or time is illegal."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime parseDate(String date) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfSpace \u003d date.indexOf(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (indexOfSpace !\u003d -1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                time \u003d date.substring(indexOfSpace + 1).strip();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                date \u003d date.substring(0, indexOfSpace).strip();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalDescriptionException(\"The format of date and time is wrong!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String[] dayMonthYear \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.of(Integer.parseInt(dayMonthYear[2]), Integer.parseInt(dayMonthYear[1]),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Integer.parseInt(dayMonthYear[0]),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The format of date and time is wrong\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 104
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class dealing with storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the path of file that stores data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filePath the path of file that stores data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a list of tasks that are stored in disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws FileNotFoundException If the file specified by the filePath is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description of tasks is illegal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, IllegalDescriptionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Scanner in \u003d new Scanner(f);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String[] str \u003d in.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            switch (str[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                task \u003d new ToDo(str[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                task \u003d new Event(str[2], LocalDateTime.parse(str[3]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                task \u003d new Deadline(str[2], LocalDateTime.parse(str[3]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (str[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                task.setDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            list.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Stores tasks in a task list into the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException If  an input or output exception occurred."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void store(TaskList tasks) throws IOException{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fw.write(tasks.getTaskAtIndex(i + 1).toStringForFile() + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a task with a deadline. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for the deadline task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param by the deadline of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Deadline(String description, LocalDateTime by) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return super.toStringForFile() + \" | \" + by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representaion of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task consisting of the task type,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d formatter.format(by);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a event task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for the event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param time the time at which the event starts."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event(String description, LocalDateTime time) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return super.toStringForFile() + \" | \" + time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representaion of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task consisting of the task type,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d formatter.format(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class that represents a task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for Task Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The description of a \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    + getClass().getSimpleName().toLowerCase() + \" cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an icon showing the status of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return tick icon if the task is done otherwise X icon."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Set the status of the task to be done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"%s | %d | %s\", getClass().getSimpleName().substring(0,1), isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the task, consisting of status icon"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 56
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task getTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task setTaskAtIndexDone(int index) throws IndexOutOfBoundsException{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.get(index - 1).setDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task removeTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a todo task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor of the toDo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ToDo(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the task, consisting of the type of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         the task and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jyx11011": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class deals with user interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Prints a block which contains all the lines given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text a list of lines to be printed inside the block"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static void printBlock(String... text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String horizontalLine \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String indentation \u003d \"    \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        System.out.println(indentation + horizontalLine);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (String line: text) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            System.out.println(indentation + \" \" + line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        System.out.println(indentation + horizontalLine + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string of the command read."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param in the scanner used to read command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string of the command read."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String readCommand(Scanner in) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String question \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(greeting, question);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows all tasks in the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskList the task list to be shown."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[taskList.getSize() + 1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + taskList.getTaskAtIndex(i + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows the message that the task has been marked as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been marked as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showDoneTask(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"Nice! I\u0027ve marked this task as done:\", \"  \" + task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows the message that the task has been removed from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been removed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the number of tasks in the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showRemovedTask(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"Noted. I\u0027ve removed this task:\", \"  \" + task,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                String.format(\"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        taskListSize, taskListSize \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows the message that the task has been added to the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the number of tasks in the task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showAddedTask(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"Got it. I\u0027ve added this task:\", \"  \" + task,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                String.format(\"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        taskListSize, taskListSize \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Says good bye to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void sayGoodBye() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows errors that occurs when parsing commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when parsing commands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showParsingError(Exception exception) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"OPPS!!! \" + exception.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows errors that occurs when loading."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when loading."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showLoadingError(Exception exception) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"OPPS!!! Fails to load your tasks.\", exception.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Shows errors that occurs when loading."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when storing."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void showStoringError(IOException exception) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        printBlock(\"OPPS!!! Fails to store your tasks.\", exception.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 117
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[E][\\u2718] test (at: 01 Mar 2020 12:00)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new Event(\"test\", LocalDateTime.of(2020, 3, 1, 12, 0)).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"\", new Event(\"\", LocalDateTime.of(2020, 1, 1, 1, 1)).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a event cannot be empty.\",e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 27
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversionForFile() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"T | 0 | test\", task.toStringForFile());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[\\u2718] test\", task.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void statusIcon_notDone_cross() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"\\u2718\", task.getStatusIcon());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void statusIcon_done_tick() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"\\u2713\", task.getStatusIcon());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown (){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d new Task(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 44
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", new ToDo(\"test\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"\", new ToDo(\"\").toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a todo cannot be empty.\",e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if ! javac -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 34
    }
  }
]
