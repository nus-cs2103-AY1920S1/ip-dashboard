[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "sourceCompatibility \u003d 11"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eejian97": 44,
      "-": 14
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "D | 0 | return book | 12/12/2019, 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "T | 0 | GEQ1000 homework"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "T | 0 | more homework"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "D | 1 | Individual Project | 13/07/2019, 2359"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "D | 0 | Find an Internship | 20/09/2019, 2359"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "T | 0 | Exercise"
      }
    ],
    "authorContributionMap": {
      "eejian97": 6
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Duke is chatbot application that can help you keep track of yours tasks at hand. "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "It is able to create, update, delete and search for various types of tasks such as todos, deadlines, and events."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Furthermore, you can update these tasksto be marked as done once you have finished them. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "The chatbot also automatically stores these tasks on exit "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "and automatically loads them up again when you start it up the next time. Enjoy!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "![](Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Support for Todos, Events and Deadlines."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Supports Create, Update and Delete functionalities for Tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Supports Mark-As-Done functionality for Tasks upon completion."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Supports List functionality to display all Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Supports Filter and Finding functionalities for Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Auto-storing and loading data upon closing and opening Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`deadline \u003cdesciption\u003e /by \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`event \u003cdescription\u003e /at \u003cdate\u003e \u003ctime\u003e`  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`todo \u003cdescription\u003e` "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Create new Tasks for Duke to keep track of. Duke will display the Task you have input and update you on the number of Tasks you currently have."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "For Deadlines and Events, format `\u003cdate\u003e` as  `dd/MM/yyyy` and `\u003ctime\u003e` as `HHmm`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Deadline return book /by 2/12/2019 1800"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Event birthday party /at 13/07/2019 1800"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Todo homework"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - -"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`update \u003cindex\u003e \u003ccommand\u003e`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Update details of an exisitng Task. Duke will display the new updated Tasks and show you the list of Tasks that you currently have ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "For`\u003cindex\u003e`, only valid, in-range integers are allowed. i.e you cannot input an index that is smaller than 1 or larger than the number of Tasks you currently have."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "For `\u003ccommand\u003e`, follow format of Creating new Tasks. e.g. `update 1 deadline return book /by 2/12/2019 1800`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* update 2 Deadline return book /by 13/12/2019"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - -"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Delete redundant Tasks. Duke will display the Task that is being removed and update you on the number of Tasks you currently have."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* delete 1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - -"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`done \u003cindex\u003e`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Mark-As-Done Tasks upon completion. Duke will display the Task and tick the Task to indicate completion."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* done 1"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - -"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Find and filter Tasks. Duke will search through the current list of Tasks and "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "display the list of Tasks that contain the input `keyword`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* find deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - -"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "List down all Tasks. Duke will display all Tasks that you currently have."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - - "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "`Bye`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Exit Duke Application. Duke will save and store the Tasks that you currently have and load them up again upon the next start-up."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* bye"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- - -"
      }
    ],
    "authorContributionMap": {
      "eejian97": 84,
      "-": 14
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Task newTaskToBeAdded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Command to add Task to TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param newTaskToBeAdded is the task that will be added into TaskList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public AddCommand(Task newTaskToBeAdded) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.newTaskToBeAdded \u003d newTaskToBeAdded;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an AddCommand given TaskList, UI, Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        tasks.addTask(newTaskToBeAdded);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ui.printAdd(newTaskToBeAdded, tasks.getSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!(o instanceof AddCommand)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        AddCommand ac \u003d (AddCommand) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return ac.newTaskToBeAdded.toString().equalsIgnoreCase(this.newTaskToBeAdded.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 46
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Used to identify an ExitCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return whether the Command is an ExitCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an Command given TaskList, UI, Storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 19
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Deadline with description, date, time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param description of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param date the date that the Deadline needs to be completed by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param time the time that the Deadline needs to be completed by."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Deadline(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Factory method to construct Deadline given the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param cmd the string input by user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return Deadline object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Deadline genDeadlineTask(String cmd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String descriptionAndTime \u003d cmd.substring(9);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] details \u003d descriptionAndTime.split(\" /by\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] dateTime \u003d details[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String desc \u003d details[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/MM/yyy\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(dateTime[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new Deadline(desc, date, time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The input for Deadline is invalid. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"Please ensure you input \u003cdescription\u003e, \u003cDate\u003e in d/MM/yyyy format, \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"and \u003cTime\u003e in HHmm format.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The description of a Deadline cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The input for Deadline is invalid. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"Please ensure you input \u003cdescription\u003e, \u003cDate\u003e in d/MM/yyyy format, \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"and \u003cTime\u003e in HHmm format.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Illegal input for the date/time. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"Please input date in d/MM/yyyy format and time in HHmm format.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Stringifies the Deadline in the format specified when writing to storage file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return string that is to be written to storage file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"D | \" + super.toDataFormat() + \" | \" + date.format(DateTimeFormatter.ofPattern(\"d/MM/yyyy\"))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \", \" + time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \", \" + time.format(DateTimeFormatter.ofPattern(\"h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 76
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int idxToBeRemoved;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Command to delete a specific Task from TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param idxToBeRemoved the index of the Task to be removed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DeleteCommand(int idxToBeRemoved) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.idxToBeRemoved \u003d idxToBeRemoved;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an DeleteCommand given TaskList, UI, Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Task taskToBeRemoved \u003d tasks.getTask(idxToBeRemoved);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            tasks.removeTask(taskToBeRemoved);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ui.printDelete(taskToBeRemoved, tasks.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Invalid input. Please input a valid number between 1 and \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + tasks.getSize());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 37
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Factory method to construct the DialogBox for User."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param text is the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param img is the image of User."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return Dialog Box object for User."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Factory method to construct the DialogBox for Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param text is the output message from Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param img is the image of Duke."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return Dialog Box object for Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 73
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int idxToMarkAsDone;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Command to mark done a Task from TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param idxToMarkAsDone the index of the Task to be marked as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DoneCommand(int idxToMarkAsDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.idxToMarkAsDone \u003d idxToMarkAsDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an DoneCommand given TaskList, UI, Storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Task taskToMarkAsDone \u003d tasks.getTask(this.idxToMarkAsDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            taskToMarkAsDone.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ui.printDone(taskToMarkAsDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Invalid input. Please input a valid number between 1 and \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + tasks.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 36
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private MainWindow window;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs Duke object instance given the instantiated GUI MainWindow."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param window the instantiated GUI MainWindow."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Duke(MainWindow window) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.ui \u003d new Ui(window);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.storage \u003d new Storage(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.tasks \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.window \u003d window;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs Duke object instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.storage \u003d new Storage(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.tasks \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates instance of Duke and runs the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param args is the method argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Runs the Duke to receive user input and execute command based on user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.ui.printWelcome();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                String command \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                c.execute(this.tasks, this.ui, this.storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                this.ui.printError(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.ui.printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the welcome message when Duke is first initialised."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.ui.printWelcome();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Writes data in TaskList to storage file and print goodbye."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.storage.save(this.tasks.getTaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.ui.printGoodbye();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Parses input given by user and executes the command based on user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void handleUserInput(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            c.execute(this.tasks, this.ui, this.storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                this.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.ui.printError(e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 87,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 7
    }
  },
  {
    "path": "src/main/java/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DukeIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DukeIllegalArgumentException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs an Event with description, date, time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param description of the Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param date the date that the Event happens at."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param time the time that the Event happens at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Factory method to construct Deadline given the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param cmd the string input by user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return Event object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Event genEventTask(String cmd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String descriptionAndTime \u003d cmd.substring(6);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] details \u003d descriptionAndTime.split(\" /at\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] dateTime \u003d details[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String desc \u003d details[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/MM/yyy\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(dateTime[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new Event(desc, date, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The input for Deadline is invalid. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"Please ensure you input \u003cdescription\u003e, \u003cDate\u003e in d/MM/yyyy format, \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"and \u003cTime\u003e in HHmm format.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The description of an Event cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The input for Event is invalid. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"Please ensure you input \u003cdescription\u003e, \u003cDate\u003e in d/MM/yyyy format, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"and \u003cTime\u003e in HHmm format.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Illegal input for the date/time. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"Please input date in d/MM/yyyy format\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"and time in HHmm format.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Stringifies the Event in the format specified when writing to storage file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return string that is to be written to storage file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"E | \" + super.toDataFormat() + \" | \" + date.format(DateTimeFormatter.ofPattern(\"d/MM/yyyy\"))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \", \" + time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \", \" + time.format(DateTimeFormatter.ofPattern(\"h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 74
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 13
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String keywordToFind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Command to find a specific Task from TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param keywordToFind the keyword to filter out matching Task from TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public FindCommand(String keywordToFind) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.keywordToFind \u003d keywordToFind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an FindCommand given TaskList, UI, Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Task t : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (t.description.contains(keywordToFind)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                matchingTasks.add(t);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ui.printMatches(matchingTasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 38
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eejian97": 11
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an ListCommand given TaskList, UI, Storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ui.printList(tasks.getTaskList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 19
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            MainWindow window \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Duke duke \u003d new Duke(window);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            duke.init();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates dialog boxes to echo user input appends it to dialog container."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Calls on duke to handle user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        duke.handleUserInput(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates dialog boxes to show response from duke and  appends it to dialog container."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param message the response message from duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void handleDukeResponse(String message) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 58
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Parses user input into Command object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param command the input command from user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the Command object parsed from user input command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws DukeIllegalArgumentException if user input command does not meet specified format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Command parse(String command) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"User input cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assert command.length() !\u003d 0 : \"user input command is blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] cmdList \u003d command.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String keyword \u003d cmdList[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            switch (keyword.toLowerCase()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                String taskToFind \u003d cmdList[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new FindCommand(taskToFind);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                int idxToMarkAsDone \u003d Integer.parseInt(cmdList[1]) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new DoneCommand(idxToMarkAsDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                int idxToBeRemoved \u003d Integer.parseInt(cmdList[1]) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new DeleteCommand(idxToBeRemoved);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                int idxToUpdate \u003d Integer.parseInt(cmdList[1]) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new UpdateCommand(idxToUpdate, command.substring(9).trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            default:  //it will be an AddCommand or an invalid command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                Task taskToBeAdded \u003d handleNewTask(keyword, command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new AddCommand(taskToBeAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Invalid input. Please ensure input format is correct.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"User input is not a number.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates appropriate Task based on given keyword and user input command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param keyword is the type of Task specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param cmd is the original user input command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the Task object based on keyword."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws DukeIllegalArgumentException if user input does not match any Task keywords."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Task handleNewTask(String keyword, String cmd) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        switch (keyword.toLowerCase()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return Deadline.genDeadlineTask(cmd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return Event.genEventTask(cmd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return Todo.genTodoTask(cmd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 79
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs Storage object to read anf write to storage file given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param filePath the file path to the storage file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Reads the storage file and loads the TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the TaskList after reading storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            File dataFile \u003d createOrRetrieve(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assert dataFile !\u003d null : \"Error from creating or retrieving file.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ArrayList\u003cString\u003e stringOfTasks \u003d readFile(dataFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ArrayList\u003cTask\u003e arrOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (String s : stringOfTasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                Task t \u003d Task.genTaskFromData(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                arrOfTasks.add(t);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return arrOfTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates the storage file if does not exist. Retrieves file otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param filePath the path of the storage file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the File Object of the storage file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws IOException if cannot be created."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static File createOrRetrieve(String filePath) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assert file !\u003d null : \"Error from creating or retrieving file.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Reads the data that is stored in the given storage file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param file the File object of the storage file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return  ArrayList of Task objects after reading from data file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static ArrayList\u003cString\u003e readFile(File file) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cString\u003e stringOfTasks \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                stringOfTasks.add(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return stringOfTasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.err.format(\"Exception occurred trying to read \u0027%s\u0027.\", file);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Saves and writes all Task from TaskArrayList into storage file in the required data format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param taskArrayList the list of Tasks from duke"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e taskArrayList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        File file \u003d new File(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        FileWriter writer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            PrintWriter printer \u003d new PrintWriter(writer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (Task t : taskArrayList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                printer.append(t.toDataFormat() + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            printer.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 102
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Task with description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param description of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Generates the appropriate Task object based on given input from the storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param s the line of String being read from the storage file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the Task object based on input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Task genTaskFromData(String s) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String[] cmdList \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assert cmdList.length \u003e 0 : \"Blank data loaded into storage file\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String keyword \u003d cmdList[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Boolean isDone \u003d cmdList[1].trim().equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String description \u003d cmdList[2].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (keyword.equalsIgnoreCase(\"T\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            t \u003d new Todo(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String dateAndTime \u003d cmdList[3].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] dateTime \u003d dateAndTime.split(\"\\\\s*,\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateTime[0].trim(), DateTimeFormatter.ofPattern(\"d/MM/yyy\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(dateTime[1].trim(), DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (keyword.equalsIgnoreCase(\"D\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                t \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else { // can only be (keyword.equalsIgnoreCase(\"E\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                assert (keyword.equalsIgnoreCase(\"E\")) : \"Wrongly formatted data was stored into storage file\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                t \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Stringifies the Task in the format specified when writing to storage file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return string that is to be written to storage file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return (isDone ? \"1\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 74
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs TaskList used to store all Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Accessor for the ArrayList tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the ArrayList tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Accessor for the specified Task in the ArrayList tasks based in the index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the Task indexed at the ArrayList tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Task getTask(int idx) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Removes the specified Task from the ArrayList tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param taskToBeRemoved the specified Task to be removed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void removeTask(Task taskToBeRemoved) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        tasks.remove(taskToBeRemoved);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Gets the number of tasks in the ArrayList tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return size of the ArrayList tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Adds the specified Task from the ArrayList tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param t the specified Task to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.tasks.add(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void replaceTask(int idxToReplace, Task newTaskToReplace) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        tasks.set(idxToReplace, newTaskToReplace);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 62
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Todo with description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param description of the Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Factory method to construct Todo given the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param cmd the string input by user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the Todo object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Todo genTodoTask(String cmd) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String desc \u003d cmd.substring(5); //words after todo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new Todo(desc);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"The description of a Todo cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Stringifies the Deadline in the format specified when writing to storage file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return string that is to be written to storage file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"T | \" + super.toDataFormat();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 43
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private MainWindow window;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String DUKE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Ui object to print Duke responses out in the command line interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Ui object to output Duke responses out in the graphic user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Ui(MainWindow window) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.window \u003d window;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Passes response message to controller to be printed in graphic user interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param message the response message from Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printInGui(String message) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assert message.length() \u003e 0 : \"Duke reponse error\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        window.handleDukeResponse(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints line that separates user input command from duke responses."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints welcome message when Duke is initialised."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(\"Starting up...\\n\" + DUKE_LOGO + \"\\n\" + \"Hello, I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints goodbye message when Duke is closed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printGoodbye() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints out the list of Tasks in ArrayList tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the ArrayList of tasks Duke is currently storing for user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder sb  \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            sb.append(i + \".\" + tasks.get(i - 1) + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(sb.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the Task that is done by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param taskToMarkAsDone the Task that had been done by user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printDone(Task taskToMarkAsDone) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        sb.append(\"  \" + taskToMarkAsDone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(sb.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the Task that is deleted by the user as well as the number of tasks currently."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param taskToBeRemoved the Task that is to be deleted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param numberOfTasks the remaining number of Tasks in the ArrayList tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printDelete(Task taskToBeRemoved, int numberOfTasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        sb.append(\"  \" + taskToBeRemoved + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        sb.append(\"Now you have \" + numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(sb.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the Task that has been added to ArrayList tasks as well as the number of tasks currently."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param newTaskToBeAdded the Task to be added to ArrayList tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param numberOfTasks the updated number of Tasks in the ArrayList tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printAdd(Task newTaskToBeAdded, int numberOfTasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        sb.append(\"  \" + newTaskToBeAdded + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        sb.append(\"Now you have \" + numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(sb.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Reads the user input command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the user input command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the error message from the exception."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param e the exception that is thrown from lower level methods to Duke."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printError(Exception e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(\"☹ OOPS!!! \" + e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the Tasks that match the user input keyword."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param matchingTasks the ArrayList of matching Tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printMatches(ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            sb.append(i + \".\" + matchingTasks.get(i - 1) + \"\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(sb.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Prints the Task that has been updated based on user input command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param t the updated Task object base don user input command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList currently stored in Duke."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void printUpdatedTask(Task t, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Got it. I\u0027ve updated this task\\n  \" + t + \"\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            sb.append(i + \".\" + tasks.get(i - 1) + \"\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        printInGui(sb.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 163
    }
  },
  {
    "path": "src/main/java/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int idxToUpdate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a Command to update Task to TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param idxToUpdate the index of the Task to be updated."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public UpdateCommand(int idxToUpdate, String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.idxToUpdate \u003d idxToUpdate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Executes an UpdateCommand given TaskList, UI, Storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param ui the UI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param storage the file storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String[] cmdList \u003d command.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String keyword \u003d cmdList[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Task newTaskToReplace \u003d Parser.handleNewTask(keyword, command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            tasks.replaceTask(idxToUpdate, newTaskToReplace);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ui.printUpdatedTask(newTaskToReplace, tasks.getTaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Invalid input. Please input a valid number between 1 and \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + tasks.getSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 42
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "eejian97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "eejian97": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void toDataFormatTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Deadline d \u003d Deadline.genDeadlineTask(\"Deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(d.toDataFormat().equals(\"D | 0 | return book | 2/12/2019, 1800\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Deadline d \u003d new Deadline(\"return book\", \"2/12/2019\", \"1800\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(d.toString().equals(\"[D][\\u2718] return book (by: 2 Dec 2019, 6:00 PM)\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 18
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Command actual \u003d Parser.parse(\"deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        AddCommand expected \u003d new AddCommand(Deadline.genDeadlineTask(\"deadline return book /by 2/12/2019 1800\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(actual.equals(expected));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 12
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Hello, I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "  [T][✘] read book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "  [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "  [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "1.[T][✘] read book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "  [E][✓] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "  [E][✓] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "☹ OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "eejian97": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "eejian97": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "eejian97": 34
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.txt"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "eejian97": 1,
      "-": 73
    }
  }
]
