[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Deadline(String info, String type, String by) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String deadline do by date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original print task from superclass"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return super.printTask() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 26
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " TODO: ADD EXCEPTION SUPPORT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private WriteFile data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  init 3 main components"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String of path where tasks text file is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        data \u003d new WriteFile(path,false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Storage storage \u003d new Storage(data,path,taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storage.initStorage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ui.link(taskList,storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  main run method"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  scans input and turns it"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  into task: event, deadline or to do"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  every print statement wrapped with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  2 solid lines"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if command unknown"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String input \u003d sc.next();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // list all tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.list();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String taskInfo \u003d sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    System.out.println(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int sep \u003d taskInfo.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // use sep to split string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String actualTask \u003d taskInfo.substring(0,sep);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                sep +\u003d 4; // put sep at space after /by"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String time \u003d taskInfo.substring(sep);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task newTask \u003d taskList.addTodo(actualTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.addTask(newTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String taskInfo \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    System.out.println(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int sep \u003d taskInfo.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // use sep to split string"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String actualTask \u003d taskInfo.substring(0,sep);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                sep +\u003d 4; // put sep at space after /by"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String time \u003d taskInfo.substring(sep);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task newTask \u003d taskList.addDeadline(actualTask,time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.addTask(newTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"event\")) {   // list command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String taskInfo \u003d sc.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    System.out.println(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int sep \u003d taskInfo.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // use sep to split string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String actualTask \u003d taskInfo.substring(0,sep);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                sep +\u003d 4; // put sep at space after /by"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String time \u003d taskInfo.substring(sep);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task newTask \u003d taskList.addEvent(actualTask,time);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.addTask(newTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"done\")) {   // list command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task doned \u003d taskList.done(taskNum);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.markDone(doned);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"delete\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task deledTask \u003d taskList.delete(taskNum);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.delTask(deledTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else { // turn into exception"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // handle all other cases"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            input \u003d sc.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ui.goodBye();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Duke d \u003d new Duke(\"C:\\\\Users\\\\Seb\\\\duke\\\\storage\\\\duke.txt\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        d.run();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 103,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // TO DO fill exceptions and handle all errors"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Event(String info, String type, String by) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String by: when event actually is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original print task from superclass"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  including when event is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return super.printTask() + \" (at: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 24
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private WriteFile txtFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Storage(WriteFile data, String path, TaskList t) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        txtFile \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        tasks \u003d t;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void initStorage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // FileReader reads text files in the default encoding."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FileReader fileReader \u003d new FileReader(path);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // always need to wrap file reader in buffer reader"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            while((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                loadTask(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // close file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(FileNotFoundException ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"I can\u0027t see\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(IOException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"That sign will stop me, cos I can\u0027t read!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void loadTask(String task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  load task as from text file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  mimics user input, params"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // converts tasks in string from storage to taskarr"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (task.equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Scanner stringSc \u003d new Scanner(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String type \u003d stringSc.next();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        stringSc.next();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int isDone \u003d stringSc.nextInt();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        stringSc.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String mainInfo \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String info \u003d stringSc.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        while (!info.equals(\"|\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            mainInfo \u003d mainInfo + info;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            info \u003d stringSc.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // take up empty input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String curr \u003d stringSc.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            while (!curr.equals(\"|\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                by \u003d by + \" \" + curr;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                curr \u003d stringSc.next();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            tasks.addDeadline(mainInfo,by);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String curr \u003d stringSc.next();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            while (!curr.equals(\"|\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                by \u003d by + \" \" + curr;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                curr \u003d stringSc.next();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            tasks.addEvent(mainInfo,by);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            ToDo newTask \u003d new ToDo(mainInfo, \"T\",\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            taskArr.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void saveToTextFile() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Task t: taskArr) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String mainTxt \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String type \u003d t.getType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String status \u003d (t.getDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String info \u003d t.getTaskInfo();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d t.getByOrig();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (type \u003d\u003d \"T\") {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                mainTxt \u003d mainTxt + type + \" | \" + status + \" | \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + info + \" | \" + by + \" | \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                mainTxt \u003d mainTxt + type + \" | \" + status + \" | \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + info + \" | \" + by + \" | \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            txtFile.writeToFile(mainTxt);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            txtFile.setAppend(true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        txtFile.setAppend(false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 103
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // all class variables private"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String taskInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String byString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task(String info, String type,String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  constructor, saves info of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.taskInfo \u003d info;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!by.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            this.by \u003d convertToDate(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.byString \u003d by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // getters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of info of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return String task info"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskInfo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of status of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // taken from partial soln tq prof"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of task type"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints task in formatted string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String s \u003d \"[\" + getType() + \"]\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        s +\u003d \"[\" + getStatus() + \"] \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        s +\u003d getTaskInfo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (byString.equals(\"\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return by.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getByOrig() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return byString;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // setters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  setter to mark task is done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   changes output of getStatus"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @returns none"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Date convertToDate(String by) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            date1 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(by);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (ParseException p) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"Use the correct format: dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(by);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return date1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 98
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArr \u003d taskArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskArr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ToDo addTodo(String taskInfo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new To Do, add to tasklist"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted to do string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ToDo newToDo \u003d new ToDo(taskInfo,\"T\",\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newToDo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Deadline addDeadline(String taskInfo, String by) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new Deadline, add to tasklist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted deadline string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @param String that describes task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(taskInfo,\"D\",by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newDeadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Event addEvent(String taskInfo, String by) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new event, add to tasklist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted event string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Event newEvent \u003d new Event(taskInfo,\"E\",by);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task delete(int taskNum) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, deletes task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  based on number provided"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation and formatted task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  as per specified within task printTask method"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints number of remaining tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Task doneTask \u003d taskArr.get(taskNum-1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.remove(taskNum-1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task done(int t) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, marks tasks as done"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints confirmation,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints the done task in formatted string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  (formatted string from task itself)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Task doneTask \u003d taskArr.get(t-1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        doneTask.markDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 86
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // task with nothing attached, so no frills, everything can be simply inherited"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ToDo(String info, String type, String by) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,\"T\",\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!by.equals(\"\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"Please Use a deadline if you have a data to do this task by.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 15
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void link(TaskList t, Storage s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        tasks \u003d t;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storage \u003d s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints welcome message with lines to beautify"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Hello, I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, prints formatted solid line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void markDone(Task doneTask) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(doneTask.printTask());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\" \" + task.printTask() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.getList().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void delTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\" \" + task.printTask());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.getList().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void goodBye() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storage.saveToTextFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  returns all tasks in readable, formatted string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return string of all tasks with new line and spaces as required"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String s \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (int i \u003d 0; i \u003c taskArr.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // printInt to put number for printing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int printInt \u003d i + 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Task currTask \u003d taskArr.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            s +\u003d currTask.printTask() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 72
    }
  },
  {
    "path": "src/main/java/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String  file_path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private boolean append_to_file \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public WriteFile(String file_path, boolean append_value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.file_path \u003d file_path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        append_to_file \u003d append_value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void writeToFile( String textLine ) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  Writes specified text to file in filepath specified upon construction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  Notes: The %s between double quotes means a string of characters of any length."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  The %n means a newline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  So we\u0027re telling the printf method to format a string of characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and add a newline at the end"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String textLine contains text to write to file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FileWriter write \u003d new FileWriter(file_path,append_to_file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            BufferedWriter write_line \u003d new BufferedWriter(write);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.write(textLine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.newLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"No can do son.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAppend(boolean append) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        append_to_file \u003d append;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 39
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    void dummyTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Event test \u003d new Event(\"Why\",\"E\",\"18/09/2109 1406\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testType \u003d test.getType();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"E\", testType);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2718\", testStatus);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        test.markDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2713\", testStatus);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String info \u003d test.getTaskInfo();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"Why\", info);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String by \u003d test.getBy();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"Wed Sep 18 14:06:00 SGT 2109\", by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 25
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    void dummyTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ToDo test \u003d new ToDo(\"Why\",\"T\",\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testType \u003d test.getType();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"T\", testType);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2718\", testStatus);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        test.markDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2713\", testStatus);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String info \u003d test.getTaskInfo();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"Why\", info);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String by \u003d test.getBy();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\", by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 26
    }
  },
  {
    "path": "storage/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "D | 0 | byby |  10/10/1000 1000 | "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "D | 0 | rtyuio |  18/09/1900 1900 | "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "E | 0 | tyuio |  19/10/1000 1000 | "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "T | 0 | tyuioghjk |  | "
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 4
    }
  }
]
