[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "// Creating an executable jar file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "// Reading inputs from keyboard"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "run {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 38,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | aa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "D | 1 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "E | 1 | event | 2/12/2019 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "D | 1 | deadline | 30/02/2019 1800"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 4
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        int lineCount \u003d text.split(\"\\n\").length;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        dialog.setMinHeight((double) lineCount * 20);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 63
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.command.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * The main driver of Duke program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        parser \u003d new Parser(tasks, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Gets a response by Duke in the form of string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * \u003cp\u003eThe list of tasks saved locally would be updated each time this method is called.\u003c/p\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param input The input text"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d parser.processLine(input); // add, delete, etc"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d \"Input must be an integer.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d (e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d (\"Something is wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // save to text file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 58,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An exception class created specifically for exception which occurs when running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(message, cause, enableSuppression, writableStackTrace);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 26
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            stage.show(); // set visibility to true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            // Display intro message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            VBox dialogContainer \u003d (VBox) scene.lookup(\"#dialogContainer\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    DialogBox.getDukeDialog(Ui.printWelcome(), dukeImage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 41
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 58
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class which deals with making sense of the user command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * \u003cp\u003eThis class uses Ui to help interact with user using CLI, by printing helpful messages.\u003c/p\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for class Parser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param tasks An object which consists of a list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param ui An object that deals with user interaction (printing, querying)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Parser(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Processes the string command by user and carries out its corresponding actions, such as"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * adding into task list and marking a task as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput a string command by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If a command is invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String processLine(String userInput) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.list;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (firstWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printList(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else if (firstWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(\"You need to specify a task that is done.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (Integer.parseInt(words[1]) \u003e list.size() || Integer.parseInt(words[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task task \u003d list.get(Integer.parseInt(words[1]) - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printTaskDone(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else if (firstWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(\"You need to specify a task that is done.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (Integer.parseInt(words[1]) \u003e list.size() || Integer.parseInt(words[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task removed \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printDeleteTask(removed, list);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else if (firstWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            String secondWord \u003d words[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ArrayList\u003cTask\u003e listFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks.list.stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    .filter(task -\u003e task.getDescription().contains(secondWord))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    .forEach(listFound::add);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printList(listFound);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (firstWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                if (words.length \u003c 2 || words[1].equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                task \u003d new ToDo(userInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            } else if (firstWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                if (words.length \u003c 2 || words[1].equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String description \u003d userInput.split(\" \", 2)[1].split(\" /\", 2)[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String by \u003d userInput.split(\" \", 2)[1].split(\" /by \", 2)[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                task \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            } else if (firstWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                if (words.length \u003c 2 || words[1].equals(\"\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String description \u003d userInput.split(\" \", 2)[1].split(\" /\", 2)[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String at \u003d userInput.split(\" \", 2)[1].split(\" /at \", 2)[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                task \u003d new Event(description, at);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printAddTask(task, list);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 105
    }
  },
  {
    "path": "src/main/java/duke/command/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param filePath The string representing the path of the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Loads saved data before the program runs, if there is any saved data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return A list of tasks which is saved locally."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If an error occurs when loading."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // check for directory existence"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // check for text file existence"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String filePath \u003d this.filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // read from file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String[] items \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                for (int i \u003d 0; i \u003c items.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    items[i] \u003d items[i].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                if (line.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    Task todo \u003d new ToDo(items[2], items[1].equals(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    list.add(todo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                } else if (line.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    Task event \u003d new Event(items[2], items[1].equals(\"1\"), items[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                } else if (line.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    Task deadline \u003d new Deadline(items[2], items[1].equals(\"1\"), items[3]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    list.add(deadline);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (FileNotFoundException | ParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Save the tasks to the file in the directory provided."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param tasks The tasks to be saved after running duke."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d tasks.list;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            String filePath \u003d this.filePath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                sb.append(task.getFileStringFormat()).append(\"\\r\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (IOException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 106
    }
  },
  {
    "path": "src/main/java/duke/command/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing the list of tasks to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for TaskList, in the event when the list is provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list of tasks to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for TaskList, in the event when local data is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Add a task to the list in this class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Delete the task in the list based on the index parameter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param index The index of the task in the list to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the deleted task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    Task delete(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 55
    }
  },
  {
    "path": "src/main/java/duke/command/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class which deals with the interactions of the user, including printing and requesting for input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static String printWelcome() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Prints the error message due to file not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"Error: Unable to load. File not found. Empty list is created.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Prints each task in the list provided."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list to be printed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String printList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return \"No task found\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            IntStream.rangeClosed(1, list.size()).forEach(x -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                Task task \u003d list.get(x - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                sb.append(x).append(\". \").append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Prints a message to remind user that a task has been marked as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be marked as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printTaskDone(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Nice! I\u0027ve marked this task as done:\\n  \" + task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Prints a message to remind user that a task has been removed from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param removed The deleted task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list, in which the task has been removed from."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printDeleteTask(Task removed, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \"  \" + removed.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \"Now you have \" + list.size() + \" in the list.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Prints a message to remind user that a task has been added to the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list, to which the task is to be added to."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printAddTask(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \"  \" + task.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \"Now you have \" + list.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing an event, inherits from Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for deadline, to be called for instantiating this object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param by The time at which the deadline is due."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Deadline(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for deadline, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Define whether a deadline is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param by The time at which the deadline is due."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"D | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.by;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setBy(String by) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing an event, inherits from Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for event, to be called for instantiating this object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param at The time at which the event occurs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Event(String description, String at) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d formatter.parse(at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for event, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Define whether an event is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param at The time at which the event occurs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Event(String description, boolean isDone, String at) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d formatter.parse(at);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"E | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.at;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setAt(String at) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An abstract class representing a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for task, to be called when instantiating subclasses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for task, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Defines whether a task is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns the status icon of whether a task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a tick if a task is done, otherwise, a cross."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public abstract String getFileStringFormat();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 68
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing a to-do, inherits from task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for to-do, to be called for instantiating this object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the to-do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for to-do, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Define whether a to-do is done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"T | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 40
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cstyle\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            -fx-padding: 0 10 0 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003c/style\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" bottom\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 23
    }
  },
  {
    "path": "src/test/java/duke/command/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import com.sun.source.util.TaskListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Unit test for TaskList class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * A stub for to-do class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    protected static class ToDoStub extends Task {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ToDoStub(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return \"[\\u2718] wash dishes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public String getFileStringFormat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return \"T | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Add a task to TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result Task will be added without any error."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void addToTaskList_inputTask_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        TaskList tasks \u003d  new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        tasks.add(new ToDoStub(\"wash dishes\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(1, tasks.getList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 50
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Unit test for Deadline class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create a deadline object with correct input and format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result A deadline object is created successfully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void deadlineCreation_normalInput_outputMatches() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Deadline(\"submit assignment\", \"29/08/2019 2359\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(task.toString(), \"[D][\\u2718] submit assignment (by: 29/08/2019 2359)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create a deadline object with wrong date format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result An exception will be thrown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkDateFormat_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Deadline(\"submit quiz\", \"20/09/2019\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(e.getMessage(), \"Unparseable date: \\\"20/09/2019\\\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Check the deadline object file string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result The format matches correctly."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkFileStringFormat_correctFormat_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Deadline(\"submit quiz\", \"20/09/2019 2359\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(\"D | 0 | submit quiz | 20/09/2019 2359\", task.getFileStringFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 59
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Unit test for event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create an event object with correct input and format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result An event object is created successfully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void eventCreation_normalInput_outputMatches() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Event(\"party\", \"29/08/2019 2200\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(task.toString(), \"[E][\\u2718] party (at: 29/08/2019 2200)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create an event object with wrong date format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result An exception will be thrown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkDateFormat_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Event(\"event\", \"20/09/2019\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(e.getMessage(), \"Unparseable date: \\\"20/09/2019\\\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Check the event object file string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result The format matches correctly."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkFileStringFormat_correctFormat_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Event(\"an event\", \"12/10/2020 0900\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(\"E | 0 | an event | 12/10/2020 0900\", task.getFileStringFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 59
    }
  }
]
