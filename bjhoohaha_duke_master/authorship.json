[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "run{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    mainClassName \u003d \"duke.main.Launcher\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 47,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToSaveIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddCommand\u003c/code\u003e is the parent class of {@link AddTodoCommand}, {@link AddDeadlineCommand},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link AddEventCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the task to be added by the add command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the line contents of the command passed as a parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of {@link duke.main.Duke}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the specified line as a parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddCommand(String line) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will add the specified task into the list of tasks. The task can be a todo, deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * or event item."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            taskManager.addToTaskList(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            taskManager.addToSchedule(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.save(taskManager.getCurrentTaskListToSave());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showAddInformation(task.toString(), taskManager.getTaskListSize());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FailedToSaveIoException ftsioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the task description from the array."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task description"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected String getTaskDescription(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the date field for the task from the array."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected String getTaskDate(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 76
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddDeadlineCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"deadline\"\u003c/code\u003e. The todo command add a \\"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * deadline task into the list of tasks in {@link TaskManager}. The user interface will display the new deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * task that is added."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add deadline command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * {@link duke.main.Duke} with the specified line as a parameter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the line is blank"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddDeadlineCommand(String line) throws InvalidParameterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String[] arr \u003d super.line.split(\" /by \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assert (arr.length \u003e\u003d 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            super.task \u003d new Deadline(getTaskDescription(arr), getTaskDate(arr));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioobe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(idte.getInvalidDateTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddEventCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"event\"\u003c/code\u003e. The todo command add a event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * task into the list of tasks in {@link TaskManager}. The user interface will display the new event task that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * is added."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add event command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of {@link duke.main.Duke}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the specified line as a parameter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the line is blank"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddEventCommand(String line) throws InvalidParameterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String[] arr \u003d super.line.split(\" /at \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assert (arr.length \u003e\u003d 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            super.task \u003d new Event(getTaskDescription(arr), getTaskDate(arr));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioobe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(idte.getInvalidDateTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddTodoCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"todo\"\u003c/code\u003e. The todo command add a todo task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * into the list of tasks in {@link TaskManager}. The user interface will display the new todo task that is added"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * ."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add todo command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of {@link duke.main.Duke}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the specified line as a parameter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the line is blank"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddTodoCommand(String line) throws InvalidParameterException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String taskDescription \u003d line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            super.task \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is an abstraction over the commands entered by the user. All commands that implements the \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * interface will have to override the \u003ccode\u003eexecute\u003c/code\u003e method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the taskManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the output after command execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the parameters passed into the command are invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String execute(TaskManager taskManager, UserInterface ui, Storage storage) throws InvalidParameterException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToSaveIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eDeleteCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"delete\"\u003c/code\u003e. The delete command will delete"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  a specified task entered by the user. The user interface will display the information of the deleted task if"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  successful."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the index of task to be deleted in the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new delete command with the specified index of the task to be deleted in the list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be deleted in the list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the index of the task specified is not a number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public DeleteCommand(String index) throws InvalidParameterException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will delete the specified task entered by the user from the list of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws duke.exception.InvalidParameterException if the index is out of range"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) throws InvalidParameterException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Task task \u003d taskManager.deleteFromTaskList(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            taskManager.deleteFromSchedule(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.save(taskManager.getCurrentTaskListToSave());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showDeletedMessage(task.toString(), taskManager.getTaskListSize());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FailedToSaveIoException ftsioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IndexOutOfBoundsException aioube) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(\"\" + index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }  catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToSaveIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eDoneCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"done\"\u003c/code\u003e. The done command will mark a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  specified task entered by the user as done. The user interface will display the updated information if it is"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  successful."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The index of the task to be mark as done in the list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new done command with the specified index of the task to be marked as done in the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be mark as done in the list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the index of the task specified is not a number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public DoneCommand(String index) throws InvalidParameterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will mark the task specified by the user as done and display the updated information"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * on the user interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws duke.exception.InvalidParameterException if the index is out of range"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) throws InvalidParameterException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String task \u003d taskManager.markTaskAsDone(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.save(taskManager.getCurrentTaskListToSave());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showMarkedAsDone(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FailedToSaveIoException ftsioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IndexOutOfBoundsException aioube) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(\"\" + index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }  catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToSaveIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eExitCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"bye\"\u003c/code\u003e. The exit command will show the exit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * message and save all tasks in the list of tasks in the {@link TaskManager} class object to the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.storage.Storage}. The storage is the file path specified by {@link duke.main.Duke} and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.storage.Storage}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will save the list of tasks in {@link TaskManager} into the storage. The storage is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * the file path specified by {@link duke.main.Duke} and {@link Storage}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.save(taskManager.getCurrentTaskListToSave());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FailedToSaveIoException ftsioe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showExitMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eFindCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"find\"\u003c/code\u003e. The find command will look through"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  all the tasks in the list of tasks and find results where the tasks\u0027 description matches the keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The keyword to look out for."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** Constructs a new find command with the specified keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the keyword to look out for in the tasks\u0027 description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will look through all the tasks in the list of tasks in {@link TaskManager} and show"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * results found in the user interface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return ui.showResultsFound(taskManager.findFromTaskList(keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eListCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"list\"\u003c/code\u003e. The list command will show the list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * in a table form for the user when executed on the user interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will display the list of tasks in the user interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return ui.showTable(taskManager.showTaskList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 23
    }
  },
  {
    "path": "src/main/java/duke/command/RemindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToSaveIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eRemindCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"remind\"\u003c/code\u003e. The remind command will set a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  reminder for the specified task entered by the user. The user interface will display the updated information if it \\"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  is successful."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class RemindCommand implements Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The index of the task to set the reminder for."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The date of the reminder to be set."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new schedule command with the specified index of the task to be reminded in the list of tasks with"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * the specified date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line of user input that contain the index and date information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the information does not exist in the user input line"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public RemindCommand(String line) throws InvalidParameterException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String[] arr \u003d line.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.index \u003d getIndex(arr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.date \u003d getDate(arr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(\"\" + index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioube) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(idte.getInvalidDateTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will set a reminder for the task specified by the user as done and display the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * updated information on the user interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the task manager for the tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the index is out of range"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) throws InvalidParameterException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assert (date !\u003d null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String task \u003d taskManager.remind(index, date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.save(taskManager.getCurrentTaskListToSave());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSetReminder(task, date.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FailedToSaveIoException ftsioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IndexOutOfBoundsException aioube) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(\"\" + index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }  catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return ui.showSaveError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the index of the task from the task list to set reminder on from the array."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the index of the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private int getIndex(String[] arr) throws ArrayIndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return Integer.parseInt(arr[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the date field of the task from the array."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the date field"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Date getDate(String[] arr) throws ArrayIndexOutOfBoundsException, InvalidDateTimeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return DateParser.parse(String.join(\" \", arr[1], arr[2]));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 94
    }
  },
  {
    "path": "src/main/java/duke/command/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.formatter.DateFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eListCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"list\"\u003c/code\u003e. The list command will show the list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * in a table form for the user when executed on the user interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class ScheduleCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The date to show the schedule for."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new schedule command and displays a schedule for the specified date entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the date to show the schedule for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the information does not exist in the line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public ScheduleCommand(String line) throws InvalidParameterException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.date \u003d line;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else if (isValidDate(line)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.date \u003d line.substring(0, 10);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will display the schedule fo tasks for a specified date in the user interface. If no"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * date is specified by the user, the user interface will display the full schedule for all the tasks without date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * restriction."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskManager the list of tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String execute(TaskManager taskManager, UserInterface ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return ui.showSchedule(taskManager.showSchedule(date));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Checks whether the string representation of the date passed in is a valid date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the date to check whether is valid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the date is valid and \u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            DateFormatter.format(DateParser.parse(date + \" 0000\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 63
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the parent class of all \u003ccode\u003eRuntimeException\u003c/code\u003e that may occur in the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/FailedToLoadIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a exception that occur when the file is parsed line by line."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class FailedToLoadIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the line number that the parsing error occurred."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private int lineCount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the content of the line where the parsing error occurred."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new failed to load exception with the specified line number and contents where the error"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * occurred."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lineCount the line number where it failed to load"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the content of the line where it failed to load"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public FailedToLoadIoException(int lineCount, String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.lineCount \u003d lineCount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the content of the line where the error occured."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the line content"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the line number where the error occurred."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the line number where the error occured"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int getLineCount() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return lineCount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 46
    }
  },
  {
    "path": "src/main/java/duke/exception/FailedToSaveIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a exception that occur when it fails to save."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class FailedToSaveIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the content of the line where the save error occured."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new failed to save exception with a empty line."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public FailedToSaveIoException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new failed to save exception with the line contents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the content of the line where the save error occurred"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public FailedToSaveIoException(String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the content of the line where the save error occurred."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the line content"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a exception that occur when the user enters an invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the command entered by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid command exception where the parameter is \u003ccode\u003enull\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid parameter exception with a specified command entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param command the command entered by the user which is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidCommandException(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the invalid command that is entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the invalid command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getInvalidCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a exception that occur when an invalid date is entered by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the string representation of the invalid date time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid date time exception with the specified invalid date time entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateTime the invalid date time entered by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidDateTimeException(String dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the invalid date time entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the invalid date time entered by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getInvalidDateTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 30
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a exception that occur when the user enters an invalid parameter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InvalidParameterException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the parameter for each Command that will be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid parameter exception where the parameter is \u003ccode\u003enull\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidParameterException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid parameter exception with a specified parameter entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param parameter the parameter of the command to be executed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidParameterException(String parameter) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the invalid parameter that is entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the invalid parameter"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getInvalidParameter() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/NullDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a exception that occurs when the date value is empty or is \u003ccode\u003enull\u003c/code\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class NullDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7
    }
  },
  {
    "path": "src/main/java/duke/extension/InsertionSortComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.extension;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.NullDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A default comparator for tasks to handle insertion sort."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InsertionSortComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Compares two different {@link Task}. Returns \u003ccode\u003e1\u003c/code\u003e if the \u003ccode\u003etask1 \u0026gt; task2\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * if \u003ccode\u003etask1 \u003d\u003d task2\u003c/code\u003e and \u003ccode\u003e-1\u003c/code\u003e if \u003ccode\u003etask1 \u0026lt; task2\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task1 the first task to be compared"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task2 the second task to be compared"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003e1\u003c/code\u003e if the \u003ccode\u003etask1 \u0026gt; task2\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e if \u003ccode\u003etask1 \u003d\u003d task2\u003c/code\u003e and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * \u003ccode\u003e-1\u003c/code\u003e if \u003ccode\u003etask1 \u0026lt; task2\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return task1.getTaskDate().compareTo(task2.getTaskDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (NullDateException nde) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assert (isTodo(task1) || isTodo(task2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            if (isTodo(task1) \u0026\u0026 isTodo(task2)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } else if (isTodo(task1)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Checks whether the specified task is a {@link Todo} item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be checked"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the task is a todo and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Boolean isTodo(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return task instanceof Todo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 45
    }
  },
  {
    "path": "src/main/java/duke/extension/NotificationAlert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.extension;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.view.AlertWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the notification alert that will pop up when the timer runs out."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class NotificationAlert extends TimerTask {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Creates a new notification alert for the specified task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to create the notification alert for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public NotificationAlert(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Runs and triggers the notification alert when timer runs out."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            createAlertWindow();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            task.clearReminder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Creates a new alert window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void createAlertWindow() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AlertWindow alertWindow \u003d new AlertWindow();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertWindow.setTitle(\"Reminder\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertWindow.setContent(task.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertWindow.addImage(\"/images/duke.png\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertWindow.style(\"/style/stylesheet.css\", \"alertPane\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertWindow.display();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 44
    }
  },
  {
    "path": "src/main/java/duke/extension/Reminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.extension;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The user may set a reminder for the task. When a reminder is set for a specified task, a popup alert is set in the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * future that will alert the user upon the specified date time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the timer for the reminder. It will run when the specified date time is reached."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the date time for the reminder to be triggered."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Date dateToRemind;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new reminder for the task for the specified task with the specified date to be be reminded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task whose reminder has been set"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateToRemind the date to trigger the reminder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Reminder(Task task, Date dateToRemind) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.dateToRemind \u003d dateToRemind;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.timer.schedule(new NotificationAlert(task), dateToRemind);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the date of the reminder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the date specified for the reminder"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return dateToRemind;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets a string representation of the reminder."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the reminder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"⏰ \" + dateToRemind.toString() + \" ⏰\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 52
    }
  },
  {
    "path": "src/main/java/duke/formatter/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Formats a date and time format into a string."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a formatted string from the \u003ccode\u003eDate\u003c/code\u003e object in \u003ccode\u003edd/MM/yy HHmm\u003c/code\u003e format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the \u003ccode\u003eDate\u003c/code\u003e object to be formatted"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the \u003ccode\u003eDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static String format(Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").format(date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 20
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The Duke Program is a java program for a simple task manager. Users can add a todo item with just its"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * description, a deadline item with description and the date to complete it by, an event item with description and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * the date the event is held at. The Duke Program has a seperate user interface, storage and task manager to handle"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * different tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the storage / database for Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the task manager to manage the different tasks. Operations can be performed in the TaskManager class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private TaskManager tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the user interface for Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new duke instance by first loading the storage and creating a new task manager to manage different"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * types of task and its relevant operation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userInterface \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            tasks \u003d new TaskManager(storage.load());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            userInterface.showLoadingError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            tasks \u003d new TaskManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Run duke with user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param userInput the user input to pass into the duke program"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the output of the duke program"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String runWithUserInput(String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String fullCommand \u003d userInterface.readCommand(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Command c \u003d CommandParser.parse(fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return c.execute(tasks, userInterface, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidCommandException invalidCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return userInterface.showInvalidCommandError(invalidCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidParameterException invalidParameters) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return userInterface.showInvalidParametersError(invalidParameters);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 65,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Starts the duke application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param args the array of arguments from the command line"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Application.launch(duke.main.Main.class, args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 18
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Starts the Duke program and loads the stage with a scene."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param stage the stage to set the scene on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            FXMLLoader mainWindowLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            BorderPane bp \u003d mainWindowLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Scene scene \u003d new Scene(bp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author bjhoohaha-reused"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            //Used to fix issue where font files could not be loaded in windows / linux"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            //Reused from: https://stackoverflow.com/questions/16855677/how-to-embed-ttf-fonts-is-javafx-2-2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Font.loadFont("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    // Font taken from https://fonts.google.com/specimen/Delius+Unicase"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    // Credits to Designer Natalia Raices"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    Main.class.getResource(\"/fonts/deliusunicase-regular.ttf\").toExternalForm(), 10"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            scene.getStylesheets().add(\"/style/stylesheet.css\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            stage.setMinWidth(630.0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            stage.setMinHeight(703.0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 42,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse a string representation of a command into a \u003ccode\u003eCommand\u003c/code\u003e class object in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.command.Command}. These \u003ccode\u003eCommand\u003c/code\u003e can be executed in the \u003ccode\u003erun\u003c/code\u003e method of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.main.Duke}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the string representation of a command into a \u003ccode\u003eCommand\u003c/code\u003e class object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param fullCommand the full command to be parse"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidCommandException if a invalid command is entered by the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the parameters passed into the command is invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String[] arr \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (arr.length \u003e 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String parameter \u003d getParameter(arr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            switch (getCommand(arr)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new DoneCommand(parameter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new AddTodoCommand(parameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new AddDeadlineCommand(parameter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new AddEventCommand(parameter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new DeleteCommand(parameter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new FindCommand(parameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"remind\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new RemindCommand(parameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new ScheduleCommand(parameter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                throw new InvalidCommandException(getCommand(arr));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ioube) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the command type from the array."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the command type"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getCommand(String[] arr) throws ArrayStoreException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the parameter for the task from the array."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the parameter for the command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getParameter(String[] arr) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return Arrays.stream(arr).skip(1).collect(Collectors.joining(\" \")).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 88
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse string into a \u003ccode\u003eDate\u003c/code\u003e clss object. This is used to save the date"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * information in {@link duke.task.Deadline} and {@link duke.task.Event}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the string into a date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateTime a string representation of the date and time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a \u003ccode\u003eDate\u003c/code\u003e class object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidDateTimeException if an invalid date and time is entered by the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Date parse(String dateTime) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(dateTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }  catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidDateTimeException(dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 28
    }
  },
  {
    "path": "src/main/java/duke/parser/FileToTaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToLoadIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse each line in the file to a \u003ccode\u003eTask\u003c/code\u003e. The \u003ccode\u003eTask\u003c/code\u003e can be added into"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * a list of tasks in \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class FileToTaskParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the number of lines already parsed by the Parser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    static int lineCount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the string into a {@link Task} that can be added into a list of tasks in {@link TaskManager}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line to be parsed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a task that can be added into a list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws FailedToLoadIoException if the line cannot be parsed by the \u003ccode\u003eFileToTaskParser\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Task parse(String line) throws FailedToLoadIoException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        lineCount++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String[] arr \u003d line.split(\",\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (arr.length \u003e\u003d 5);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String isDone \u003d getIsDone(arr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String reminderDate \u003d getReminder(arr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String taskDescription \u003d getTaskDescription(arr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            switch (getTask(arr)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                Task todo \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                todo.markAsDoneIfTrue(isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                todo.setReminderIfPresent(reminderDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return todo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                Task deadline \u003d new Deadline(taskDescription, DateParser.parse(getTaskDate(arr)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                deadline.markAsDoneIfTrue(isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                deadline.setReminderIfPresent(reminderDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                Task event \u003d new Event(taskDescription, DateParser.parse(getTaskDate(arr)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                event.markAsDoneIfTrue(isDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                event.setReminderIfPresent(reminderDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                throw new FailedToLoadIoException(lineCount, line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aiobe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new FailedToLoadIoException(lineCount, line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new FailedToLoadIoException(lineCount, line);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the type of the task from the array."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the type of task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getTask(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets a string representation of the boolean value whether the task is done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the boolean value that indicates whether the task is done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getIsDone(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the reminder of the task from the array."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the reminder for the task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getReminder(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[2];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the description of the task from the array."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task description"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getTaskDescription(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[3];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the date field of the task from the array."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param arr the array which contains the information"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the date field for the task"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the information does not exist in the array"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static String getTaskDate(String[] arr) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return arr[4];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 116
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskToFileParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse individual tasks into a string representation that will be saved into the file path"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * specified in {@link duke.main.Duke} and {@link duke.storage.Storage}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class TaskToFileParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the task into a string to be saved into the storage by encoding each tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be parsed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static String parse(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return task.encode() + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 21
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToSaveIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.UncheckedIOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the storage of the Duke Program. The storage is the \u003ccode\u003efilePath\u003c/code\u003e specified in the constructor of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.main.Duke} object. The \u003ccode\u003eStorage\u003c/code\u003e class loads and save the file into a stream of lines for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * easy parsing into the list of tasks. See {@link TaskManager} for more information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is a string representation of the file path for storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new storage object using the specified file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param filePath the path to the file for storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Loads the file and return a stream of lines inside the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a stream of lines inside the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws IOException if an I/O error occurs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Stream\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return reader.lines();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            createTextFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return Stream.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Saves the stream of lines inside the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param stream the stream of lines to be saved into the file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws IOException if an I/O error occurs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws FailedToSaveIoException if the string cannot be saved to file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void save(Stream\u003cString\u003e stream) throws FailedToSaveIoException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            stream.forEach(line -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                writeLine(writer, line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            createTextFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            save(stream);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (UncheckedIOException uioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new FailedToSaveIoException(uioe.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Writes the line to file using a writer."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param writer the writer used to write the line"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line to be written"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws UncheckedIOException if I/O error occurs"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static void writeLine(BufferedWriter writer, String line) throws UncheckedIOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            writer.write(line);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new UncheckedIOException(line, ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Creates a new text file at the specified path \u003ccode\u003edata/duke.txt\u003c/code\u003e for storage purposes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws IOException if an I/O error occurs"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static void createTextFile() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author bjhoohaha-reused"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Used to fix issue where storage file cannot be found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Reused from: https://stackoverflow.com/questions/3090761/how-to-create-a-new-file-together-with-missing-parent-directories with minor modifications"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        File file \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 97,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A deadline item is a task with description and the date the deadline task is due by. The deadline item can be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * created, marked as done or deleted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new deadline task with description and the date where the deadline task is due by that has not been"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the deadline task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param by the date the task is due by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidDateTimeException if the date is invalid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Deadline(String description, String by) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, DateParser.parse(by));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new deadline task with description, the date where the deadline task is due by that has not been"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the deadline task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param by the date the task is due by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, by);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (by !\u003d null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the deadline task to be stored in the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded deadline task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"deadline,\" + super.encode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the deadline task. The string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * representation consist of (\"[D]\") with the string representation of the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the deadline task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by:\" + super.taskDate.get() + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A event item is a task with description and the date the event will be held at. The event item can be created,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * marked as done or deleted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new event task with description and the date the event will be held at that has not been done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the event task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param at the date the event will be held at"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidDateTimeException if the date is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Event(String description, String at) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, DateParser.parse(at));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new event task with description, the date the event will be held at that has not been done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the event task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param at the date the event will be held at"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (at !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the event task to be stored in the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded event task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"event,\" + super.encode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the event task. The string representation consist of (\"[E]\") with the string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * representation of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the event task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at:\" + super.taskDate.get() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Schedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.extension.InsertionSortComparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.FileToTaskParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the schedule of task items. This supports add, edit, delete operations. When a add, edit or delete"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * operation is to be performed, the \u003ccode\u003eTaskManager\u003c/code\u003e class provides an abstraction to support these operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The tasks are insertion into the schedule by the order of the date field for the task date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the list of task items. It acts as the schedule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private List\u003cTask\u003e schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new schedule."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.schedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Inserts the task into the schedule."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be inserted into the schedule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        schedule.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        insertionSortSchedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Removes the task from the schedule."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be deleted from the schedule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void delete(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        schedule.remove(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Views the current schedule for the specified date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the specified date for schedule view"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the date for the schedule to be viewed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String view(String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(createNewHeaderToDisplay(date));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(schedule.stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                             .filter(x -\u003e x.displayTaskDateIfPresent().equals(date))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                             .map(x -\u003e addTaskToView(x))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                             .reduce(\"\", (x, y) -\u003e x + y));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Views the schedule."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the schedule of task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String view() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(createNewHeaderToDisplay(\"   TODO  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        for (int i \u003d 0; i \u003c  schedule.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Task task \u003d schedule.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String curr \u003d task.displayTaskDateIfPresent();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            if (date.equals(curr)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                outputBuilder.append(addTaskToView(task));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                date \u003d curr;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                outputBuilder.append(createNewHeaderToDisplay(date));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                outputBuilder.append(addTaskToView(task));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Creates a new header to display for view."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param title the title of the header"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the header"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String createNewHeaderToDisplay(String title) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Adds the task to view."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be added to view"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task to be added to view"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String addTaskToView(Task task) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(task.showFullInformation());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Runs insertion sort on the schedule."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void insertionSortSchedule() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Comparator\u003cTask\u003e comparator \u003d new InsertionSortComparator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        for (int i \u003d schedule.size() - 1; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            int prevIndex \u003d i - 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            int currIndex \u003d i;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Task prev \u003d schedule.get(prevIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Task curr \u003d schedule.get(currIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            if (comparator.compare(prev, curr) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Collections.swap(schedule, prevIndex, currIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 132
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.NullDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.extension.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.formatter.DateFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the task item to be added into the list of tasks. The \u003ccode\u003eTask\u003c/code\u003e abstract class provides an"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * abstraction over {@link Todo}, {@link Deadline}, {@link Event} items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the container for the date field of the task. The container may be empty if it is a {@link Todo} task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected Optional\u003cDate\u003e taskDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the container for the date field of the reminder set for the task. The container may be empty if a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * reminder is not set for the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected Optional\u003cDate\u003e reminderDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is used to indicate whether the task is done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new task with description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description for the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new task with description and date field for the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description for the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskDate the date field for the task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task(String description, Date taskDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskDate \u003d Optional.ofNullable(taskDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the status icon of the done status of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a status icon of the done status of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Displays the reminder as a string representation if present."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the reminder and a empty string otherwise"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String displayReminderIfPresent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (reminderDate.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return \"Reminder set to: \" + reminderDate.get().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets a reminder for the task for the specified date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the date of the reminder"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setReminder(Date date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (date !\u003d null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        reminderDate \u003d Optional.ofNullable(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        new Reminder(this, date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Clears the reminder set for the task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void clearReminder() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        reminderDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Checks if the task\u0027s description contain the specified sequence of \u003ccode\u003echar\u003c/code\u003e values in the keyword."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the specified sequence of \u003ccode\u003echar\u003c/code\u003e values"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if task\u0027s description contains \u003ccode\u003equery\u003c/code\u003e,\u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return description.contains(keyword);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the task date for the task if present."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the task date for the task if present"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws NullDateException if the task date is absent"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Date getTaskDate() throws NullDateException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskDate.orElseThrow(NullDateException::new);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Displays a string representation of the task date if present."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task date if present, and an empty string otherwise."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String displayTaskDateIfPresent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (taskDate.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return DateFormatter.format(taskDate.get()).substring(0,10);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes a date field of the task for storage."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param optionalDate the optional date to encode"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the date field if present and \u003ccode\u003e\"null\"\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encodeOptionalDate(Optional\u003cDate\u003e optionalDate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (optionalDate.isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return DateFormatter.format(optionalDate.get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return \"null\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the task into a format for storage purposes."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder(\"\" + isDone);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\u0027,\u0027);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(encodeOptionalDate(reminderDate));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\u0027,\u0027);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\u0027,\u0027);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(encodeOptionalDate(taskDate));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows full information for the task with its task description, date, status and the reminder date if present."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the full information of the task with its corresponding description, date,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *      status and the reminder date if present"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showFullInformation() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"     \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(displayReminderIfPresent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the task. The string representation consist of the status icon with the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * task description."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Mark the task as done if the string passed in is equal to \u003ccode\u003e\"true\"\u003c/code\u003e."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param isDone a string representation of whether the task is done."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void markAsDoneIfTrue(String isDone) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.isDone \u003d isDone.equals(\"true\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Mark the task as done if the boolean value passed in is \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param isDone the boolean value of whether the task is done"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void markAsDoneIfTrue(Boolean isDone) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets the reminder for the task at the specified date if a string representation of the remainder date is valid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param reminderDate the string representation to set the reminder for the date"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidDateTimeException if the string representation of the date passed in has a invalid format"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setReminderIfPresent(String reminderDate) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        boolean isPresent \u003d !reminderDate.equals(\"null\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (isPresent) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Date date \u003d DateParser.parse(reminderDate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.reminderDate \u003d Optional.of(date);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            new Reminder(this, date);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 213
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToLoadIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.FileToTaskParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.TaskToFileParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the list of task items. This supports add, edit, delete operations. When a add, edit or delete operation is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * to be performed, the \u003ccode\u003eTaskList\u003c/code\u003e class provides an abstraction to support these operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the list of task items."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new list of tasks from a stream of line. This stream of lines will be parsed by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * {@link FileToTaskParser} to each individual tasks that will be added individually to form a list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lines the stream of lines to be parsed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TaskList(Stream\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        lines.forEach(line -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                Task task \u003d FileToTaskParser.parse(line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (FailedToLoadIoException lifpe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Ui().showLineError(lifpe.getLineCount(), line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Appends the task to the end of the list of the tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be appended to the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Removes the task at the specified index from the list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task removed to be printed on a user interface."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (index \u003e\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Marks the task at the specified index from the list of tasks as done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the done task to be be printed on a user interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task done(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (index \u003e\u003d 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the number of tasks in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the list of tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the list of tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String view() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return IntStream.range(0, taskList.size())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "               .mapToObj(index -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                   int numbering \u003d index + 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                   Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                   return (\"    \" + numbering + \".\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                           + \"     \" + task.displayReminderIfPresent() + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "               })"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "               .reduce(\"\", (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Finds all matching tasks with the given keyword."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the keyword to look out for in tasks description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the list of tasks that match the keyword"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new TaskList(taskList.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                            .filter(taskDescrption -\u003e taskDescrption.contains(keyword))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                            .map(task -\u003e task.encode())).view();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** Returns a stream of string to be saved into the {@link duke.storage.Storage}. Each task is parsed using a task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * parser. See {@link TaskToFileParser} for more information."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a stream of string to be saved into storage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Stream\u003cString\u003e save() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.stream().map(x -\u003e TaskToFileParser.parse(x));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets a reminder on the specified date for the task in the task list at the specified index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index for the task to set the reminder on"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the  date for the reminder"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the reminded task"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String remind(int index, Date date) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (index \u003e\u003d 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (date !\u003d null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Task remindedTask \u003d taskList.get(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        remindedTask.setReminder(date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return remindedTask.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 138
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToLoadIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.FileToTaskParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.TaskToFileParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the task manager for the duke program. The duke program has a task list as well as a schedule. The task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * manager provides abstraction to both components. This is also to help provide flexibility when more tasks list is"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the list of task items."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the schedule of task items."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new task manager to manage task list and schedule."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new task manager. This stream of lines will be parsed by {@link FileToTaskParser} to each"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * individual tasks that will be added individually to both the task list and the schedule."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lines the stream of lines to be parsed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TaskManager(Stream\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        lines.forEach(line -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                Task task \u003d FileToTaskParser.parse(line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addToTaskList(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addToSchedule(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (FailedToLoadIoException lifpe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Ui().showLineError(lifpe.getLineCount(), line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Appends the task to the end of the task list of the tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be appended to the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void addToTaskList(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Inserts the task to the end of a sorted schedule of the tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be inserted into the schedule"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void addToSchedule(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        schedule.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Removes the task at the specified index from the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the task deleted from the task list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task deleteFromTaskList(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         assert (index \u003e\u003d 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.delete(index - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Search and delete the task from the schedule."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void deleteFromSchedule(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        schedule.delete(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Marks the task at the specified index from the list of tasks as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the done task to be be printed on a user interface."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (index \u003e\u003d 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.done(index - 1).toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the number of tasks in the task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.view();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Retirm a string representation fo the schedule of task at a specified date."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date specifies a particular day of the schedule of tasks to be displayed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the schedule of tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showSchedule(String date) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return date.isBlank() ? schedule.view() : schedule.view(date);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Finds all matching tasks with the given keyword."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the keyword to look out for in tasks\u0027 description"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task list that match the keyword"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String findFromTaskList(String keyword) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.find(keyword);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** Returns a stream of string to be saved into the {@link duke.storage.Storage}. Each task is parsed using a task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * parser. See {@link TaskToFileParser} for more information."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a stream of string to be saved into storage"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Stream\u003cString\u003e getCurrentTaskListToSave() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.save();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Add reminder to the specified index from the task list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the date to set the reminder at"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task in which the reminder was set"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String remind(int index, Date date) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assert (date !\u003d null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.remind(index - 1, date);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 155
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A todo item is a task with description. The todo item can be created, marked as done or deleted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new todo task with description that has not been done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the todo task to be stored in the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded todo task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"todo,\" + super.encode();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the todo task. The string representation consist of \u003ccode\u003e\"[T]\"\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the string representation of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the todo task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 34
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the user interface of the Duke program. The user interface will format the information. Return the system"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * output of duke with given inputs. Welcome messages, error messages, display messages for addition, deletion, marked"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * as done etc of tasks will be done here."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Ui implements UserInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a welcome message for the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the welcome message for the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    What can I do for you?\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message for the user when data cannot be saved to \u003ccode\u003edata/duke.txt\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showSaveError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ⚠️ Cannot be saved to \u0027data/duke.txt\u0027 ⚠️\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message when the user inputs a invalid command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param invalidCommand the invalid command entered"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showInvalidCommandError(InvalidCommandException invalidCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    🙁 OOPS!! Invalid Command: \" + invalidCommand.getInvalidCommand() + \" 🙁\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message when the user inputs a invalid parameter for the command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param invalidParameter the invalid parameter entered"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation fo the error message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showInvalidParametersError(InvalidParameterException invalidParameter) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    🙁 OOPS!! Invalid Parameters: \" + invalidParameter.getInvalidParameter() + \" 🙁\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a loading error message for the user. This will occur when Duke is unable to load the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * file path specified in Duke. See {@link duke.main.Duke} for more information."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"* FAILED TO LOAD DATA\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message for the user with the constituent line number and the its content during parsing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lineCount the line number of the error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the contents of the line itself"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showLineError(int lineCount, String line) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"* Unable to parse line \" + lineCount + \" : \" + line + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Reads the command entered by the user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param userInput the input entered by the user"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the input entered by the user"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String readCommand(String userInput) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows the current tasks in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskList the list to be displayed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the list in table form"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showTable(String taskList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(taskList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows the schedule."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param schedule the schedule to be displayed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the schedule in table form"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showSchedule(String schedule) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    I have fetched your schedule: \\n\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(schedule);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return outputBuilder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows the results of tasks found in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param list the list of tasks to be displayed"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the results of tasks found in the list in table form"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showResultsFound(String list) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(list);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that informs the user that a task has been added into the list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be added into the list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param size the number of tasks in the list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the add information"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showAddInformation(String task, int size) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"     ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"     Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"     ➕  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"     Now you have \" + size + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"     ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that informs the user that the task has been marked as done."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task that is marked done"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task information marked as done"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showMarkedAsDone(String task) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"      \" + task + \"\\n\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that informs the user that the task has been deleted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task that is deleted"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param size the number of tasks remaining in the list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the deleted message"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showDeletedMessage(String task, int size) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    🗑  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Now you have \" + size + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a exit message for the user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the exit message"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showExitMessage() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that says that the reminder has been set."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task whose reminder has been set"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateToRemind the date of the reminder set"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task whose reminder that has been set"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String showSetReminder(String task, String dateToRemind) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuilder outputBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Acknowledged. I\u0027ve set the reminder for this task:\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ⏰ \" + task + \"\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    Reminder has been set to: \" + dateToRemind + \"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        outputBuilder.append(\"    ------------------------------------------------------------\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d outputBuilder.toString();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 228
    }
  },
  {
    "path": "src/main/java/duke/ui/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the user interface of the Duke program. The user interface will format the information. Return the system"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * output of duke with given inputs. Welcome messages, error messages, display messages for addition, deletion, marked"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * as done etc of tasks will be done here."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface UserInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a welcome message for the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the welcome message for the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showWelcome();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a loading error message for the user. This will occur when Duke is unable to load the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * file path specified in Duke. See {@link duke.main.Duke} for more information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message for the user with the constituent line number and the its content during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lineCount the line number of the error"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the contents of the line itself"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showLineError(int lineCount, String line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Reads the command entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param userInput the input entered by the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the input entered by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String readCommand(String userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows the current tasks in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param taskList the list to be displayed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the list in table form"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showTable(String taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows the results of tasks found in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param list the list of tasks to be displayed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the results of tasks found in the list in table form"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showResultsFound(String list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that informs the user that a task has been added into the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be added into the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param size the number of tasks in the list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the add information"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showAddInformation(String task, int size);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that informs the user that the task has been marked as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task that is marked done"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task information marked as done"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showMarkedAsDone(String task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that informs the user that the task has been deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task that is deleted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param size the number of tasks remaining in the list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the deleted message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showDeletedMessage(String task, int size);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a exit message for the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the exit message"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showExitMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message when the user inputs a invalid command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param invalidCommand the invalid command entered"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showInvalidCommandError(InvalidCommandException invalidCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message when the user inputs a invalid parameter for the command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param invalidParameter the invalid parameter entered"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation fo the error message"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showInvalidParametersError(InvalidParameterException invalidParameter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows an error message for the user when data cannot be saved to \u003ccode\u003edata/duke.txt\u003c/code\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the error message"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showSaveError();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows a message that says that the reminder has been set."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task whose reminder has been set"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateToRemind the date of the reminder set"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the reminder that has been set"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showSetReminder(String task, String dateToRemind);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Shows the schedule."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param schedule the schedule to be displayed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the schedule in table form"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    String showSchedule(String schedule);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 119
    }
  },
  {
    "path": "src/main/java/duke/view/AlertWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the alert window that will be display when {@link duke.extension.NotificationAlert} is called."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the controller for the alert window displayed in duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AlertWindow {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the alert that will be displayed in the alert window."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    Alert alert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new alert window with a default alert type of \u003ccode\u003eAlert.AlertType.INFORMATION\u003c/code\u003e. See"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * {@link Alert} for more information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AlertWindow() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.alert \u003d new Alert(Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new alert window passing in enumerations of {@link javafx.scene.control.Alert.AlertType}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param alertType the alert type of the alert"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AlertWindow(Alert.AlertType alertType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets the title of the alert window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param title the title of the alert window"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets the content of the alert window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param message the message content of the alert window"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setContent(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alert.setHeaderText(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Add a customized image to the alert window with the file path of the image."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param path to the image file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void addImage(String path) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ImageView customImage \u003d new ImageView(new Image(path, 100, 100, false, true));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alert.setGraphic(customImage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Style the dialog alert pane by adding stylesheets. The \u003ccode\u003eclassName\u003c/code\u003e can be used in the stylesheet"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * to refer to the different components in the {@link DialogPane} to style."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param path to the stylesheet"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param className the class name referred in the stylesheet"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void style(String path, String className) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        DialogPane alertPane \u003d alert.getDialogPane();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertPane.setPrefWidth(580.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertPane.getStylesheets().add("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            getClass().getResource(path).toExternalForm());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alertPane.getStyleClass().add(className);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Display the alert window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 81
    }
  },
  {
    "path": "src/main/java/duke/view/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.main.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the dialog box controller in duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This control represents a dialog box consisting of a display picture to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the user icon in duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static Image USER_IMAGE \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the system icon in duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static Image DUKE_IMAGE \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the duke program to get the system output with user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static Duke DUKE \u003d new Duke();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the text component of the system output / user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the display picture for user / system icons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Construct a new dialog box with its corresponding text message and image with display picture on the right and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * text on the left."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param text the text to display in the dialog box"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param img the image to display in the display picture"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DialogBox.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        dialog.setId(\"dialogText\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Create a new user dialog box with the input message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param inputMessage the message input by the user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a dialog box with the default user icon"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static DialogBox userDialogBox(String inputMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new DialogBox(inputMessage, USER_IMAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Create a new duke dialog box with the output message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param outputMessage the mesage output by the duke program"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a dialog box with the default system icon"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static DialogBox dukeDialogBox(String outputMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new DialogBox(outputMessage, DUKE_IMAGE).flip();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Flips the dialog box such that the display picture is on the left and text on the right."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a flipped dialog box"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private DialogBox flip() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.flipDialogTextAlignment();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Flips the text alignment in the dialog box. If original text alignment is positioned left, text will be aligned"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * right. Otherwise, text will be aligned left."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void flipDialogTextAlignment() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (dialog.getTextAlignment() \u003d\u003d TextAlignment.LEFT) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            dialog.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the user dialog box from the input message."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param inputMessage the input message by the user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the user dialog box"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static DialogBox getUserDialog(String inputMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userDialogBox(inputMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the duke dialog box from the input message."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param inputMessage the input message by the user"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the duke dialog box"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static DialogBox getDukeDialog(String inputMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String outputMessage \u003d DUKE.runWithUserInput(inputMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return dukeDialogBox(outputMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the welcome dialog box during startup to be displayed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the welcome dialog box"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static DialogBox showWelcome() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return dukeDialogBox(new Ui().showWelcome());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 142
    }
  },
  {
    "path": "src/main/java/duke/view/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class MainWindow extends BorderPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the box used to contain the duke logo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private HBox logoBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the logo picture inside the logo box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private ImageView logoPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the image of the logo. It is contained inside the logo picture."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the dialog box used to contain individual dialogs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the scroll pane used to scroll up and down to look through multiple dialogs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the box used to contain the scroll pane."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private VBox scrollBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the box used to contain the text field and send button."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private HBox inputBox;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the text field where the user input a command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the send button to send the user input to duke."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Initialize the main window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        scrollPane.vvalueProperty().bind(scrollBox.heightProperty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        scrollPane.setContent(scrollBox);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        scrollBox.setId(\"scrollBox\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        scrollBox.getChildren().add(DialogBox.showWelcome());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        logoBox.setId(\"logoBox\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        logoPicture.setImage(logoImage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * the dialog container. Clears the user input after processing. If \u003ccode\u003einput \u003d\u003d \"bye\"\u003c/code\u003e, the duke program"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * will exit."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        scrollBox.getChildren().addAll(DialogBox.getUserDialog(input), DialogBox.getDukeDialog(input));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (isExit(input)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            exitMainWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Exits the main window and closes the application when called."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void exitMainWindow() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        sendButton.setDisable(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author bjhoohaha-reused"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Used to fix issue where exit message is not displayed when exit"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Reused from https://stackoverflow.com/questions/27334455/how-to-close-a-stage-after-a-certain-amount-of-time-javafx with minor modifications"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(3));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        delay.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Checks if the user input is a {@link duke.command.ExitCommand} that tells the program to exit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return true if the user input is the bye command, false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private boolean isExit(String input) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return input.equals(\"bye\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 118,
      "-": 2
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cText fx:id\u003d\"dialog\" text\u003d\"Label\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"517.0\"  /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.view.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cHBox fx:id\u003d\"logoBox\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"120.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            \u003cImageView fx:id\u003d\"logoPicture\" fitHeight\u003d\"112.5\" fitWidth\u003d\"262.5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     \u003cHBox fx:id\u003d\"dialogBox\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" fitToHeight\u003d\"true\" minHeight\u003d\"520.0\" minWidth\u003d\"418.0\" prefHeight\u003d\"520.0\" prefWidth\u003d\"418.0\" vvalue\u003d\"1.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                  \u003cVBox fx:id\u003d\"scrollBox\"  prefHeight\u003d\"520.0\" HBox.hgrow\u003d\"ALWAYS\" fillWidth\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "           \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     \u003cHBox fx:id\u003d\"inputBox\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "             \u003cTextField fx:id\u003d\"userInput\" maxWidth\u003d\"Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "             \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 36
    }
  },
  {
    "path": "src/test/java/duke/parser/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"todo eat food\").getClass(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         new AddTodoCommand(\"eat food\").getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"list\").getClass(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         new ListCommand().getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"done 2\").getClass(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         new DoneCommand(\"2\").getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"deadline hw /by 31/12/2000 2359\").getClass(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         new AddDeadlineCommand(\"hw /by 31/12/2000 2359\").getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"event bbq /at 25/12/1965 1734\").getClass(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         new AddEventCommand(\"event bbq /at 25/12/1965 1734\").getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"delete 5\").getClass(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         new DeleteCommand(\"5\").getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(CommandParser.parse(\"bye\").getClass(), new ExitCommand().getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidCommandException ice) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidParameterException ipe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_failed_with_ExceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidCommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"hello\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"todo \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"deadline sdfdsf\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"deadline meeting /by \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"deadline meeting /by 123456789\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"event sdfdsf\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"event meeting /at \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"event meeting /at 123456789\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"delete task\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"done task\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidCommandException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"helloWorld\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidCommandException.class,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 71
    }
  },
  {
    "path": "src/test/java/duke/parser/DateParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class DateParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"12/03/2301 1200\").toString(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"12/03/2301 1200\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"12/03/2301 2359\").toString(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"12/03/2301 2359\").toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"01/01/0532 1200\").toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"01/01/0532 1200\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"01/01/0000 0000\").toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"01/01/0000 0000\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"12/31/9999 2359\").toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"12/31/9999 2359\").toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_fail_with_ExceptionThrow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"233555\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"11/02/2931\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"11/02/2931 test\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e DateParser.parse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 44
    }
  },
  {
    "path": "src/test/java/duke/parser/FileToTaskParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.FailedToLoadIoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class FileToTaskParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            //todos"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task todo1 \u003d new Todo(\"eat food\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task todo2 \u003d new Todo(\"swim\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task todo3 \u003d new Todo(\"swim\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            todo3.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            //deadline"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task deadline1 \u003d new Deadline(\"hw\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                          new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(\"15/03/2019 1200\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task deadline2 \u003d new Deadline(\"hw\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                          new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(\"01/01/1995 2356\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task deadline3 \u003d new Deadline(\"assignment\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                          new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(\"01/01/1995 2356\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            deadline3.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            //event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task event1 \u003d new Event(\"meeting\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                    new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(\"23/04/2031 1853\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            event1.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task event2 \u003d new Event(\"meeting\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                    new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(\"23/04/2031 1853\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(todo1.toString(), FileToTaskParser.parse(\"todo,false,null,eat food,null\").toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(todo2.toString(), FileToTaskParser.parse(\"todo,false,null,swim,null\").toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(todo3.toString(), FileToTaskParser.parse(\"todo,true,null,swim,null\").toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(deadline1.toString(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileToTaskParser.parse(\"deadline,false,null,hw,15/03/2019 1200\").toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(deadline2.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileToTaskParser.parse(\"deadline,false,null,hw,01/01/1995 2356\").toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(deadline3.toString(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileToTaskParser.parse(\"deadline,true,null,assignment,01/01/1995 2356\").toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(event1.toString(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileToTaskParser.parse(\"event,true,null,meeting,23/04/2031 1853\").toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(event2.toString(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileToTaskParser.parse(\"event,false,null,meeting,23/04/2031 1853\").toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_with_ExceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(FailedToLoadIoException.class, () -\u003e FileToTaskParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                .parse(\"event,true,null,meeting,1834233\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(FailedToLoadIoException.class, () -\u003e FileToTaskParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .parse(\"event,false,null,meeting,1834233\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(FailedToLoadIoException.class, () -\u003e FileToTaskParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .parse(\"null,true,null,meeting,1834233\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(FailedToLoadIoException.class, () -\u003e FileToTaskParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .parse(\"null,null,null,null,null\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(FailedToLoadIoException.class, () -\u003e FileToTaskParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .parse(\"blahblah,true,null,meeting,null\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e FileToTaskParser.parse(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_withAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e FileToTaskParser.parse(\"thisisainvalidargument\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e FileToTaskParser.parse(\"event,sdfsdfgdfsgdf\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e FileToTaskParser.parse(\"deadline,wasdwasdwasd\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e FileToTaskParser.parse(\"\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e FileToTaskParser.parse(\"deadline,\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 82
    }
  },
  {
    "path": "src/test/java/duke/parser/TaskToFileParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class TaskToFileParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task todo1  \u003d new Todo(\"eat food\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task todo2  \u003d new Todo(\"eat food\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            todo2.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task deadline1 \u003d new Deadline(\"meeting\", format.parse(\"10/10/2003 1100\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task deadline2 \u003d new Deadline(\"meeting\", format.parse(\"10/10/2003 1100\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            deadline2.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task event1 \u003d new Event(\"dinner\", format.parse(\"23/04/2008 1023\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            final Task event2 \u003d new Event(\"dinner\", format.parse(\"23/04/2008 1023\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            event2.markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskToFileParser.parse(todo1), \"todo,false,null,eat food,null\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskToFileParser.parse(todo2), \"todo,true,null,eat food,null\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskToFileParser.parse(deadline1), \"deadline,false,null,meeting,10/10/2003 1100\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskToFileParser.parse(deadline2), \"deadline,true,null,meeting,10/10/2003 1100\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskToFileParser.parse(event2), \"event,true,null,dinner,23/04/2008 1023\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskToFileParser.parse(event1), \"event,false,null,dinner,23/04/2008 1023\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 43
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "1. Create a folder `[project root]\\text-commandLineUserInterface-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 73
    }
  }
]
