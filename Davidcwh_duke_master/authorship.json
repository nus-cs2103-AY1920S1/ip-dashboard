[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 26,
      "-": 15
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "T|1|nothinf"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|0|test event|1/1/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "D|0|return book|1/1/2019 1200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|0|boo k bookk|12/12/2012 1900"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 5
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of adding a Task object into a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the adding of the Task object into a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The add task message is displayed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        tasks.addTask(this.task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui.showAddTaskMessage(this.task, tasks.taskListSize());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return AddCommand is not the ExitCommand so it returns false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 39
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Abstract class to represent a command to be executed when an input is entered into a Duke object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 10
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a deadline, which is a type of task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * An deadline has a description and is due by a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Date byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String minute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a deadline object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the String argument for the deadline date/time into a date object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the deadline date/time argument is not in the required format, an exception is thrown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the deadline created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param by The String of the deadline time/date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException if \"by\" contains invalid information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Deadline(String description, String by) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] dateTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.day \u003d date[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.month \u003d date[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.year \u003d date[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.hour \u003d dateTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.minute \u003d dateTime[1].substring(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.byDate \u003d format.parse(day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minute);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidTaskArgumentDukeException(\"☹ OOPS!!! The format of deadline timing is invalid.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the deadline\u0027s date object into the required format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The String of the deadline\u0027s date/time in the required format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String dateToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (this.day.equals(\"1\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027st of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"2\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027nd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"3\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027rd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027th of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return format.format(this.byDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Date getByDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return byDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setByDate(Date byDate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setDay(String day) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getMonth() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setMonth(String month) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getYear() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setYear(String year) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getHour() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return hour;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setHour(String hour) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getMinute() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return minute;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setMinute(String minute) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setBy(String by) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateToString() + \")\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 130
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of deleting a Task object from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of the Task object to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the deletion of the Task object from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given index of task to be deleted is first checked to be valid or not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * After deletion, the delete task message is displayed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object that contains task to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display delete task message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when an invalid task number index is given so no Task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     object can be retrieved from the TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task removedTask \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            ui.showDeleteTaskMessage(removedTask, tasks.taskListSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"☹ OOF!!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return DeleteCommand is not the ExitCommand so it returns false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 48
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of marking a Task object as done from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of the Task object to be marked as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the marking of the Task object from a Duke object\u0027s TaskList object as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given index of task to be marked as done is first checked to be valid or not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * After being marked, the marked task as done message is displayed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object that contains task to be marked as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display task marked as done  message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when an invalid task number index is given so no Task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     object can be retrieved from the TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            ui.showMarkTaskAsDoneMessage(tasks.getTask(taskNumber));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"☹ OOF!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return DoneCommand is not the ExitCommand so it returns false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 47
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * A program that manages and keeps track of a list of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Features include adding and deleting tasks, as well as displaying list of current tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Tasks can be marked as done once the user has completed it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a Duke Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param filePath The filepath of the file the Duke object reads and writes its task list to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            storage.getTasksFromFile(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            ui.showExceptionError(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Starts the Duke program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public  void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                ui.showExceptionError(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Main Method of Duke object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param args argument of main method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        (new Duke(\"data/tasks.txt\")).run();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 51,
      "-": 10
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when any error occurs while a Duke object is running."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an event, which is a type of task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * An event has a description and starts at a specific date/time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Date atDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String minute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an event object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the String argument for the event date/time into a date object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the event date/time argument is not in the required format, an exception is thrown."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the event created."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param at The String of the event time/date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException if \"at\" contains invalid information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Event(String description, String at) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.day \u003d date[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.month \u003d date[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.year \u003d date[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.hour \u003d dateTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.minute \u003d dateTime[1].substring(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.atDate \u003d format.parse(day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minute);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidTaskArgumentDukeException(\"☹ OOPS!!! The format of event timing is invalid.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the event\u0027s date object into the required format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The String of the event\u0027s date/time in the required format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String dateToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (this.day.equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027st of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"2\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027nd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"3\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027rd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027th of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return format.format(this.atDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Date getAtDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return atDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setAtDate(Date atDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setDay(String day) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getMonth() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setMonth(String month) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getYear() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setYear(String year) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getHour() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return hour;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setHour(String hour) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getMinute() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return minute;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setMinute(String minute) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setAt(String at) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateToString() + \")\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 128
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of exiting a Duke object run."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Contains the method calls to execute this command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the exit from a Duke object\u0027s run process."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Task objects are saved into the Duke object\u0027s filepath and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * the exit message is displayed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object of the Duke object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        storage.loadTasksToFile(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui.showByeMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return To stop the Duke object from running, returns true."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 32
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of finding tasks with a specified keyword in a Duke object\u0027s tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String keyWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param keyWord Keyword to search for in the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the search and retrieval of all the Task objects in a Duke object\u0027s TaskList object that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * contains the keyword. The tasks as retrieved as a new TaskList object which is then listed to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to search in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display any results from the search."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui.showFindTasksMessage(tasks.findTasks(this.keyWord));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return FindCommand is not the ExitCommand so it returns false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 38
    }
  },
  {
    "path": "src/main/java/InvalidCommandDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when an invalid command is entered"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * into a Duke object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidCommandDukeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidCommandDukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 9
    }
  },
  {
    "path": "src/main/java/InvalidTaskArgumentDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when a task object is created with invalid arguments."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidTaskArgumentDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidTaskArgumentDukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8
    }
  },
  {
    "path": "src/main/java/InvalidTaskDescriptionDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when a task object is created with an invalid description argument."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidTaskDescriptionDukeException extends InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidTaskDescriptionDukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 9
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of listing all Task objects from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the displaying of all Task objects from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display the tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui.showListMessage(tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return DoneCommand is not the ExitCommand so it returns false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 27
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Makes sense of user input into a Duke Object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the input command and then returns the corresponding command object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the input is invalid, a Duke exception is thrown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param fullCommand String input into a Duke object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Command object based on the input parsed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws DukeException thrown when input entered is invalid and does not correspond to any command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (fullCommand.length() \u003e\u003d 6 \u0026\u0026 fullCommand.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"☹ OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (fullCommand.length() \u003e\u003d 8 \u0026\u0026 fullCommand.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"☹ OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (fullCommand.length() \u003e\u003d 6 \u0026\u0026 fullCommand.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String keyWord \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (keyWord.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"☹ OOF!!! Please enter a keyword!!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new FindCommand(keyWord);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (fullCommand.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"☹ OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] splitCommand \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task currentTask \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                description \u003d fullCommand.substring(5).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (!description.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    currentTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    return new AddCommand(currentTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidTaskDescriptionDukeException(\"☹ OOF!!! \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            + \"The description of a todo cannot be empty!!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else if (splitCommand[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String by \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                boolean descriptionRecorded \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                for (int i \u003d 1; i \u003c splitCommand.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    if (!splitCommand[i].equals(\"/by\") \u0026\u0026 !descriptionRecorded) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        description +\u003d splitCommand[i];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        if (i + 1 \u003c splitCommand.length \u0026\u0026 !splitCommand[i + 1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            description +\u003d \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    } else if (splitCommand[i].equals(\"/by\") \u0026\u0026 !descriptionRecorded) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        descriptionRecorded \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    } else if (!splitCommand[i].equals(\"/by\") \u0026\u0026 descriptionRecorded) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        by +\u003d splitCommand[i];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        if (i !\u003d splitCommand.length - 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            by +\u003d \" \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (!description.trim().equals(\"\") \u0026\u0026 !by.equals(\"\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    currentTask \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    return new AddCommand(currentTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidTaskDescriptionDukeException(\"☹ OOF!!! \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            + \"The description/timing of a deadline cannot be empty!!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else if (splitCommand[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String at \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                boolean descriptionRecorded \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                for (int i \u003d 1; i \u003c splitCommand.length; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    if (!splitCommand[i].equals(\"/at\") \u0026\u0026 !descriptionRecorded) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        description +\u003d splitCommand[i];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        if (i + 1 \u003c splitCommand.length \u0026\u0026 !splitCommand[i + 1].equals(\"/at\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            description +\u003d \" \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    } else if (splitCommand[i].equals(\"/at\") \u0026\u0026 !descriptionRecorded) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        descriptionRecorded \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    } else if (!splitCommand[i].equals(\"/at\") \u0026\u0026 descriptionRecorded) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        at +\u003d splitCommand[i];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        if (i !\u003d splitCommand.length - 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            at +\u003d \" \";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (!description.trim().equals(\"\") \u0026\u0026 !at.equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    currentTask \u003d new Event(description, at);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    return new AddCommand(currentTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidTaskDescriptionDukeException(\"☹ OOF!!! \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                            + \"The description/timing of an event cannot be empty!!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"☹ OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 124
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Deals with loading/saving tasks from/to a file in the hard drive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a Storage object with the file\u0027s file path as the argument."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param filePath String of file\u0027s filepath."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setFilePath(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Accesses the file and extracts tasks from it, saving the tasks into a TaskList object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskList Tasks extracted from file will be added to this TaskList object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws FileNotFoundException Thrown when the file specified by the filepath does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException Thrown when the file contains invalid information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     to create task objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getTasksFromFile(TaskList taskList) throws FileNotFoundException, InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        File taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Scanner scanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String textLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            taskList.addTask(stringToTask(textLine));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Saves the tasks in the TaskList object into the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskList TaskList object with tasks to be saved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws IOException thrown if an error occurs when writing into the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void loadTasksToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.taskListSize(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                fileWriter.write(taskToString(taskList.getTask(i)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i !\u003d taskList.taskListSize() - 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts a String in the valid format into a task object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used in getTasksFromFile method to extract task objects from a file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param text String input in required format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Task object created from processing the input text."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException Thrown when the String text is in an invalid format so"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     the argument entered when creating a task object is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task stringToTask(String text) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] textSplit \u003d text.split(\"\\\\|\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Task resultTask;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (textSplit[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new ToDo(textSplit[2]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (textSplit[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new Deadline(textSplit[2], textSplit[3]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new Event(textSplit[2], textSplit[3]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (textSplit[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask.markAsDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return resultTask;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts a task object into its String representation to be saved into a file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used in loadTasksToFile method to save tasks objects into a file as Strings."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be represented as a String."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String representation of the argument Task object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String taskToString(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String taskType \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String isDone \u003d \"0\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            isDone \u003d \"1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return taskType + \"|\" + isDone + \"|\" + description;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else { // event or deadline"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskType \u003d \"E\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                time \u003d ((Event) task).getAt();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskType \u003d \"D\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                time \u003d ((Deadline) task).getBy();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return taskType + \"|\" + isDone + \"|\" + description + \"|\" + time;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 135
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a task in a Duke object\u0027s task list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Each task has a description and marker to indicate if it is completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Each task is set as not done by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the task created."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the String unicode of the tick symbol if the task is marked done,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns the String unicode of the cross symbol if otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the String unicode of either the tick or cross symbol."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Sets the task as completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the String format of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The String format of a task consists a tick or cross symbol to indicate if it is done"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and its description."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String format of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 64
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the list of Tasks in a Duke object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a TaskList object that stores the list of tasks of a Duke object in an ArrayList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task getTask(int taskNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.tasks.get(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Marks the task at the given index in the ArrayList as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber index of the task in the ArrayList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public int taskListSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Given a String keyword, searches all tasks which has a description containing the keyword."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Tasks that contains the keyword are added to a newly created TaskList object and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * this TaskList object is returned."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param keyWord keyword to search for in list of tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return TaskList object containing all tasks that contain the keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskList findTasks(String keyWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList tasksWithKeyWord \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] descriptionSplit \u003d currentTask.getDescription().split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            List\u003cString\u003e descriptionWords \u003d Arrays.asList(descriptionSplit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (descriptionWords.contains(keyWord)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                tasksWithKeyWord.addTask(currentTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return tasksWithKeyWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 74
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Represents a to-do, which is a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the to-do created."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Takes in the user input into a Duke object and displays output to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String welcomeMessage \u003d \"     Hello! I\u0027m Duke\\n     What can I do for you?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String byeMessage \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an Ui object to take input user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Reads the next input from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the String command input by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays the welcome message when a Duke object is started."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(this.welcomeMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays the list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed to the user in a list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showListMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            System.out.println(\"     \" + (i + 1) + \".\" + tasks.getTask(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays te exception message of the argument exception to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param e Exception whose message needs to be displayed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showExceptionError(Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     \" + e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays message when a task is added to the TaskList object arugment."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be added to TaskList object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskListSize Number of Task objects in TaskList object after the Task object is added."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showAddTaskMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"       \" + task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Now you have \" + taskListSize"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + (taskListSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays message when a Task object is marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object that is marked as done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showMarkTaskAsDoneMessage(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"       \" + task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays message when a Task object is deleted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskListSize Number of Task objects in TaskList object after the Task object is deleted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showDeleteTaskMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"       \" + task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Now you have \" + taskListSize"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + (taskListSize \u003e 1 ? \" tasks in the list.\" : \" task in the list.\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Dsiplays exit message when a Duke object stops running."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showByeMessage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(this.byeMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Displays the list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The tasks in the TaskList object argument contains the keyword entered by the user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed to the user in a list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void showFindTasksMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(\"     Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            System.out.println(\"     \" + (i + 1) + \".\" + tasks.getTask(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setLine(String line) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return welcomeMessage;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setWelcomeMessage(String welcomeMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.welcomeMessage \u003d welcomeMessage;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getByeMessage() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setByeMessage(String byeMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.byeMessage \u003d byeMessage;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 150
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[D][\\u2718] test deadline (by: 1st of January 2019, 06:00PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (new Deadline(\"test deadline\",\"1/1/2019 1800\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_validDates_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"1st of January 2019, 06:00PM\", (new Deadline(\"test event 1\",\"1/1/2019 1800\")).dateToString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"13th of February 2019, 09:00AM\", (new Deadline(\"test event 2\",\"13/2/2019 0900\")).dateToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"3rd of August 2019, 05:30PM\", (new Deadline(\"test event 3\",\"3/8/2019 1730\")).dateToString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_inValidDates_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(0, (new Deadline(\"test event 4\",\"monday\")).dateToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The format of deadline timing is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 29
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[E][\\u2718] test event (at: 1st of January 2019, 06:00PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (new Event(\"test event\",\"1/1/2019 1800\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_validDates_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"1st of January 2019, 06:00PM\", (new Event(\"test event 1\",\"1/1/2019 1800\")).dateToString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"13th of February 2019, 09:00AM\", (new Event(\"test event 2\",\"13/2/2019 0900\")).dateToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"3rd of August 2019, 05:30PM\", (new Event(\"test event 3\",\"3/8/2019 1730\")).dateToString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_inValidDates_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(0, (new Event(\"test event 4\",\"monday\")).dateToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The format of event timing is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 30
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test todo\", (new ToDo(\"test todo\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14
    }
  }
]
