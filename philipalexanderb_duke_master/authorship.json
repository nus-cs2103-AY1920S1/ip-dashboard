[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 46
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 1
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents the main class of the programme."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Duke() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a duke object that takes in filePath which is the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * path from which the file is to be loaded."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param filePath The path of the file from which the file is loaded."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            storage.setList(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Duke duke \u003d new Duke(\"tasks.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Runs the Duke programme."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Parser parser \u003d new Parser(this.taskList, this.ui, this.storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ui.run(parser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String userText \u003d new Label(userInput.getText()).toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String dukeText \u003d new Label(getResponse(userInput.getText())).toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                DialogBox.getUserDialog(userText, new Image(String.valueOf(user))),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new Image(String.valueOf(duke)))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        );"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 194,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 9
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 56
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents a Command manager that adds new Task to TaskList, deletes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * tasks and printing the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Contains the fields TaskList that contains the list of Task,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Ui that prints the message for each commands and Storage that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * updates the files when the list of Task is modified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs parser object that takes in TaskList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Ui and Storage as parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param taskList  list of tasks contained in TaskList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param ui User Interface object responsible for printing messages."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param storage Storage that loads and updates files when tasks are"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *                deleted or added to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Parser(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parse a one line input into a Task or Command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Print message is produced every time an input is passed in."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param input  Command to be executed or Task to be created."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws DukeException  if Task has incomplete description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void parseLineInput(String input) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String firstWord \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //ArrayList\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (firstWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ui.printByeMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ui.printList(taskList.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Integer taskNum \u003d Integer.valueOf(input.substring(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Task currTask \u003d taskList.getTask(taskNum - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            currTask.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ui.printTaskDone(currTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            storage.updateFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (input.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                Task toDoTask \u003d new Todo(input.substring(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ui.printToDoTask(toDoTask, taskList.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                taskList.addTask(toDoTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                storage.appendToFile(toDoTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (input.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String time \u003d input.split(\"/by\", 2)[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String description \u003d input.split(\" /by\", 2)[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                Task deadlineTask \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                taskList.addTask(deadlineTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ui.printDeadlineTask(deadlineTask, taskList.getList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                storage.appendToFile(deadlineTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (input.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String time \u003d input.split(\"/at\", 2)[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String description \u003d input.split(\" /at\", 2)[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                Task eventTask \u003d new Event(description, time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                taskList.addTask(eventTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ui.printEvenTask(eventTask, taskList.getList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                storage.appendToFile(eventTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Integer index \u003d Integer.valueOf(input.substring(7));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ui.printDeleteTask(taskList.getTask(index - 1), taskList.getList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            taskList.deleteTask((int) index - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            storage.updateFile();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ui.printByeMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (firstWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String item \u003d \"(.*)\" + input.split(\" \", 2)[1] + \"(.*)\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String description \u003d list.get(i).getDescription();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                boolean isPresent \u003d description.matches(item);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                //System.out.println(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                //System.out.println(item);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                //System.out.println(isPresent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                if (isPresent) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    System.out.println(list.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but i don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 118
    }
  },
  {
    "path": "src/main/java/duke/command/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a storage object that takes in the file path as parameter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param filePath The path at which the file is stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Loads the content in the file into the ArrayList of Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return The ArrayList of type Task which has been filled with the tasks from"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *     the content of the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws DukeException if file does not exist in the fiven file path."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws FileNotFoundException if no file can be found in the given file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if format of the file does not fit the expected format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws IOException if file path cannot be found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException, FileNotFoundException, ParseException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (this.file.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Scanner scannerTask \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            while (scannerTask.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String taskText \u003d scannerTask.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                parseTextToTask(taskText, this.list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.list;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw (new DukeException(\"File not found\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Set the field of the ArrayList of task to the list of task from TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param taskList The TaskList from which the ArrayList of task is to be assigned"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *                 to the class\u0027s ArrayList field."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void setList(TaskList taskList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.list \u003d taskList.getList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parse the Text from the File to the corresponding Task objects."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param taskText the Line from the text to be parsed into Task object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list The list to which the resulting parsed text wish to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if format of the text does not fit the expected format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void parseTextToTask(String taskText, ArrayList\u003cTask\u003e list) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (taskText.substring(0, 1).equals(\"T\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Task task \u003d new Todo(taskText.substring(8));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (taskText.substring(3,4).equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.list.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (taskText.substring(0, 1).equals(\"D\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String descriptionAndTime \u003d taskText.substring(8);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            int index \u003d descriptionAndTime.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String description \u003d descriptionAndTime.substring(0, index - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String time \u003d descriptionAndTime.substring(index + 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Task task \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (taskText.substring(4,5).equals(\"1\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.list.add(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (taskText.substring(0, 1).equals(\"E\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String descriptionAndTime \u003d taskText.substring(8);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            int index \u003d descriptionAndTime.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String description \u003d descriptionAndTime.substring(0, index - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String time \u003d descriptionAndTime.substring(index + 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Task task \u003d new Event(description, time);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (taskText.substring(4,5).equals(\"1\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.list.add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Appending newly added task into the existing file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task The task that wish to be added ot the file for update."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws IOException if file cannot be found when passed as an argument in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *     the FileWriter constructor."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void appendToFile(Task task) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.file, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String isDone \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String text \u003d task.getTypeOfTask() + \" | \" + isDone + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (task.getTypeOfTask().equals(\"D\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            text \u003d text + \" | \" + ((Deadline)task).getTime() + System.lineSeparator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (task.getTypeOfTask().equals(\"E\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            text \u003d text + \" | \" + ((Event)task).getTime() + System.lineSeparator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            text \u003d text + System.lineSeparator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Update the file when the is changes to the contents of the file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws IOException if file cannot be found when passed as an argument in"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *     the FileWriter constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void updateFile() throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        FileWriter writer \u003d new FileWriter(this.file, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Task task: this.list) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String isDone \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            text \u003d text + task.getTypeOfTask() + \" | \" + isDone + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (task.getTypeOfTask().equals(\"D\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                text \u003d text + \" | \" + ((Deadline)task).getTime() + System.lineSeparator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } else if (task.getTypeOfTask().equals(\"E\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                text \u003d text + \" | \" + ((Event)task).getTime() + System.lineSeparator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                text \u003d text + System.lineSeparator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        writer.write(text);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 143
    }
  },
  {
    "path": "src/main/java/duke/command/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents the list of task that has and has not been done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a TaskList object that takes in an ArrayList of Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list List of tasks that has been done and to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws FileNotFoundException if file from which the list of task is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *     loaded cannot be found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Adds a task into the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task Task that is to be added to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param index the index at which the task is located in the ArrayList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return The task that has been removed from the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Gets the ArrayList of Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return the ArrayList of type Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Gets the task at the specified index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param index The index of the task in the ArrayList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return the Task that is retrieved from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 63
    }
  },
  {
    "path": "src/main/java/duke/command/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents the User-Interface that prints the messages from various"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * inputs from the User."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Prints message that shows that the file cannot be loaded."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Error: File not found. Empty File has been created.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Takes input from the user line by line and process the input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * using the Parser object given in the parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param parser Parser object that is responsible for executing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *               the user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void run(Parser parser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                parser.parseLineInput(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        printByeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints the message when a task is done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task task that has just been marked as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printTaskDone(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"[\" + \"\\u2713\" + \"] \" + task.getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints the message when a task is deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task The task that is removed from the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list The list of Task where the task was from."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printDeleteTask(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints the message when a todo task is added to the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task Todo task that is added to the list of Task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list The list of task to which the todo task is added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printToDoTask(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\" \" + task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints the message when an event task is added to the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task Event task that is added to the list of Task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list The list of task to which the event task is added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printEvenTask(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\" \" + task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints the message when a deadline task is added to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param task Deadline task that is added to the list of Task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list The list of task to which the deadline task is added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printDeadlineTask(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\" \" + task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints all the task that is in the list of Task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param list The list of task in which all the tasks are to be printed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            System.out.println(\"Nothing added yet\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                System.out.println(\"\" + i + \".\" + list.get(i - 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints a \"bye\" message when the programme terminates."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * prints a \"welcome\" message when the programme starts."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 135
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * A child class of Task class that represents a deadline Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * which has a description and time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a Deadline task object with specified desciption and time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param description Description that describes the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param time Time by which the task needs to be done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if time format does not follow the format required for parsing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     the time when passed in the parse method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Deadline(String description, String time) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super.typeOfTask \u003d \"D\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.date \u003d formatter.parse(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Gets the time by which the task has to be done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return The time by which the task has to be done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Gets the description of the deadline task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return \"[\" + this.typeOfTask + \"]\" + \"[\" + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                + this.description + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * A child class of Task class that represents an event Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * which has description and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs an Event object with the specified description and time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param description Description that describe the event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param time The time at which the task is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if time does not follow the date and time format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Event(String description, String time) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super.typeOfTask \u003d \"E\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.date \u003d formatter.parse(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Gets the time at which the event task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return the time at which the task is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return \"[\" + this.typeOfTask + \"]\" + \"[\" + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                + this.description + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents a Task that contains the fields description that describes the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * task, isDone that indicates if a task has been done and typeOfTask that"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * differentiates the type of task which can be an Event task, Todo task, or"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    protected String typeOfTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *  Constructs a Task object with specified description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param description Description that describes the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Get status icon. If a task is done, returns check mark,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * otherwise, cross mark."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return string of a check or cross mark."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Change the field isDone to be true."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Check whether is task is done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return the boolean value isDone."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Get the description of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Get the type of the Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @return the type of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getTypeOfTask() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.typeOfTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 63
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Child class of a Task class that respresents a Task of type todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * that only has a desciption."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a Todo object with specified desciption."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @param description Description of the todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        super.typeOfTask \u003d \"T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return \"[\" + this.typeOfTask + \"]\" + \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    String time \u003d \"19/09/2019 2359\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    Deadline deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public DeadlineTest() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        deadline \u003d new Deadline (\"Submit Assignment\", time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(\"[D]\" + \"[\" + \"\\u2718\" + \"] \" + deadline.getDescription() + \" (by: \" + deadline.getTime() + \")\", deadline.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testGetTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(time, deadline.getTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 27
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 10
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    Task task \u003d new Task(\"Test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    boolean add \u003d this.list.add(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    boolean add2 \u003d this.list.add(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testGetList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(this.list, new TaskList(this.list).getList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testGetTask() throws FileNotFoundException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(this.list.get(0), new TaskList(list).getTask(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testDeleteTask() throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(this.list.remove(0), new TaskList(this.list).deleteTask(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 30
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    Task todo \u003d new Todo (\"Return book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testGetTypeOfTask() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(\"T\", this.todo.getTypeOfTask());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testIsDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(false, this.todo.isDone());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertEquals(\"\\u2718\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 27
    }
  },
  {
    "path": "task.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "D | 0 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "E | 0 | project meeting | 6/02/2019 1600"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 3
    }
  },
  {
    "path": "tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "D | 1 | deadline return book | 4/10/2019 1900"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "E | 1 | event project meeting | 5/12/2019 2359"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 2
    }
  }
]
