[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "run {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 33,
      "-": 14
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "T | 1 | shawn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "E | 0 | seminar | 10th of June 2019, 6:00pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "D | 0 | test | 20th of September 2019, 12:00pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "D | 0 | shawn | 9th of June 1997, 6:00am"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dialog.setMinSize(Label.USE_COMPUTED_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 60
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Launches the application via the Main class and calls the start method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 15
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * This is the main class of the Trackr application. The Trackr application is an interface of a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * to-do list that helps users manage a variety of tasks. This class creates the GUI for Trackr using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * @author Shawn Lee"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * @since 2019-08-20"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Trackr trackr \u003d new Trackr();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setTrackr(trackr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            stage.setTitle(\"Ask Spongebob!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().showWelcome();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 34
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Trackr trackr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image userImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/patrick.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Image dukeImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/spongebob.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setTrackr(Trackr t) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        trackr \u003d t;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String response \u003d trackr.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                DialogBox.getUserDialog(input, userImg),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImg)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private void exitProgram() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Timer tm \u003d new Timer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tm.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }, 2000);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String welcomeMsg \u003d trackr.ui.welcomeMsg();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                DialogBox.getDukeDialog(welcomeMsg, dukeImg)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 70
    }
  },
  {
    "path": "src/main/java/Trackr.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.exception.TrackrException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Trackr {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Contains the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Deals with interactions with the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This is the class constructor assigning a filepath to the Duke object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Trackr() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        storage \u003d new Storage(\"C:/Users/Shawn Lee/Desktop/UNI FILES/Y2S1/CS2103T/duke/data/duke.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (TrackrException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 47,
      "-": 2
    }
  },
  {
    "path": "src/main/java/trackr/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The Command class is an abstract class for all valid commands. All valid commands inherits from this class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This is an abstract method that executes the correct actions based on the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 20
    }
  },
  {
    "path": "src/main/java/trackr/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.date.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a Deadline command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public DeadlineCommand(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds a Deadline task to the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String[] separateTaskDate \u003d userInput.split(\"/\", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String taskName \u003d ((separateTaskDate[0].split(\" \", 2))[1]).strip();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String date \u003d ((separateTaskDate[1].split(\" \", 2))[1]).strip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            DateTime dt \u003d new DateTime(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            Deadline d \u003d new Deadline(taskName, dt.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            assert d !\u003d null : \"d should not be null\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            tasks.add(d);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"Got it. I\u0027ve added this task:\\n\" + \"       [D][ ] \" + d + \" (by: \" + dt + \")\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            storage.appendToFile(\"D | 0 | \" + taskName + \" | \" + dt.toString() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return \":( OOPS!!! Date provided is not in the correct format. Please provide date in this \" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"format: dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 55
    }
  },
  {
    "path": "src/main/java/trackr/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a Delete command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Deletes task from list based in index provided by user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws NumberFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] inputStringArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int taskNum \u003d Integer.parseInt(inputStringArr[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Task t \u003d tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        result +\u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (t.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"       \" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \" + t +\u0027\\n\u0027;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else if (t.getType().equals(\"event\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"       \" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \" + t + \" (at: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + t.getDate() + \")\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"       \" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \" + t + \" (by: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + t.getDate() + \")\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        result +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        storage.rewriteFile(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 53
    }
  },
  {
    "path": "src/main/java/trackr/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.exception.TrackrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a Done command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Prints message that a task has been marked as completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws TrackrException When task has already been marked done or number provided not in range"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws NumberFormatException When the regex specified following the \u0027done\u0027 command is not an integer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TrackrException, NumberFormatException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] inputStringArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (inputStringArr.length \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            int taskNum;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                taskNum \u003d Integer.parseInt(inputStringArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                return \":( OOPS!!! The \u0027done\u0027 command requires you to input a number\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            int totalTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (taskNum \u003c 1 || taskNum \u003e totalTasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                throw new TrackrException(\":( OOPS!!! The number provided is not within the range of the \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        + \"list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Task t \u003d tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                boolean isDone \u003d t.getStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    throw new TrackrException(\":( OOPS!!! The task has already been marked as completed.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    t.setDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    result +\u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"       [\" + \u0027+\u0027 + \"] \" + t;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    storage.rewriteFile(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new TrackrException(\":( OOPS!!! Please specify the completed task\u0027s number.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 66
    }
  },
  {
    "path": "src/main/java/trackr/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.date.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a Deadline command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public EventCommand(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds an Event task to the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String[] separateTaskDate \u003d userInput.split(\"/\", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String taskName \u003d ((separateTaskDate[0].split(\" \", 2))[1]).strip();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String date \u003d ((separateTaskDate[1].split(\" \", 2))[1]).strip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            DateTime dt \u003d new DateTime(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            Event e \u003d new Event(taskName, dt.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            assert e !\u003d null : \"e should not be null\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            tasks.add(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"Got it. I\u0027ve added this task: \\n\" + \"       [E][ ] \" + e + \" (at: \" + dt + \")\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \"     Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            storage.appendToFile(\"E | 0 | \" + taskName + \" | \" + date + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return \":( OOPS!!! Date provided is not in the correct format. Please provide date in this \" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    \"format: dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 55
    }
  },
  {
    "path": "src/main/java/trackr/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues an Exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Calls the ui to execute actions for an exit command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 22
    }
  },
  {
    "path": "src/main/java/trackr/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.exception.TrackrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a Find command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Retrieves tasks matching the term provided by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TrackrException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] inputStringArr \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (inputStringArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new TrackrException(\":( OOPS!!! Please enter your search term.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String searchTerm \u003d inputStringArr[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            int listNum \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            boolean isTaskFound \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                String taskName \u003d t.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (taskName.contains(searchTerm)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    isTaskFound \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    if (t.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        result +\u003d \"     \" + listNum + \".\" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \" + t + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    } else if (t.getType().equals(\"event\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        result +\u003d \"     \" + listNum + \".\" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                                + t + \" \" + \"(at: \" + t.getDate() + \")\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        result +\u003d \"     \" + listNum + \".\" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                                + t + \" (by: \" + t.getDate() + \")\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    listNum++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (isTaskFound) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                return \"Sorry. There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 68
    }
  },
  {
    "path": "src/main/java/trackr/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.exception.TrackrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a List command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ListCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Prints out current lists of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws TrackrException When list command is not input correctly"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TrackrException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] inputStringArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (inputStringArr.length \u003e 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new TrackrException(\":( OOPS!!! The list command should not be followed by other \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \"text!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                int listNum \u003d i + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                result +\u003d \"       \" + listNum + \".\" + t.getTypeIcon() + \u0027[\u0027 + t.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        + t.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (t.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    result +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else if (t.getType().equals(\"event\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    result +\u003d \" (at: \" + t.getDate() + \")\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    result +\u003d \" (by: \" + t.getDate() + \")\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 59
    }
  },
  {
    "path": "src/main/java/trackr/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.exception.TrackrException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Class when user issues a Todo command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Input from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns instance with user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param userInput Input from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public TodoCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds a Todo task to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param ui Deals with interactions with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws TrackrException When task description given by user is empty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TrackrException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] inputStringArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (inputStringArr.length \u003e 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String taskName \u003d ((userInput.split(\" \", 2))[1]).strip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            Todo t \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            assert t !\u003d null : \"t should not be null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            result +\u003d \"Got it. I\u0027ve added this task:\\n\" + \"       [T]\" + \"[ ]\" + \u0027 \u0027 + t + \u0027\\n\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    + \"     Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            storage.appendToFile(\"T | 0 | \" + taskName + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new TrackrException(\":( OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 51
    }
  },
  {
    "path": "src/main/java/trackr/date/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * This class processes date input from the user. For example, if the command is deadline return book /by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * 2/12/2019 1800, Duke understands 2/12/2019 1800 as 2nd of December 2019, 6pm, instead of storing it simply"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * as a String."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Processed day from user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Processed month from user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Processed year from user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Processed time from user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns user input date and time to the instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param dateTime Date and time input form user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public DateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        processDate(dateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method processes the user\u0027s date and time input into the desired format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param dateTime Date and time input by user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws ParseException When date is not in specified format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void processDate(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Date date \u003d simpleDateFormat.parse(dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        day \u003d new SimpleDateFormat(\"d\").format(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        month \u003d new SimpleDateFormat(\"MMMM\").format(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        year \u003d new SimpleDateFormat(\"yyyy\").format(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        time \u003d new SimpleDateFormat(\"h:mma\").format(date).toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        processDay(day); // adds st, nd, rd, th suffix to day"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Adds suffix to day."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param d Day string without suffix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void processDay(String d) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        int dayNum \u003d Integer.parseInt(d);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        if (dayNum \u003e\u003d 11 \u0026\u0026 dayNum \u003c\u003d 13) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            day \u003d d + \"th\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else if (dayNum % 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            day \u003d d + \"st\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else if (dayNum % 10 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            day \u003d d + \"nd\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else if (dayNum % 10 \u003d\u003d 3) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            day \u003d d + \"rd\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            day \u003d d + \"th\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Getter to retrieve the time."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String Time in desired format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns date and time in desired format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String Formatted date and time"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d day + \" of \" + month + \" \" + year + \", \" + time;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 94
    }
  },
  {
    "path": "src/main/java/trackr/exception/TrackrException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The TrackrException class is used to encompass all errors regarding user input in the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class TrackrException extends InputMismatchException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns an error message to the object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param message Error message to be displayed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public TrackrException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 17
    }
  },
  {
    "path": "src/main/java/trackr/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.command.TodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.exception.TrackrException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * The Parser class is used to decode user input. The parser class then retrieves the appropriate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to retrieve the command from the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Command Command object after processing user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String[] inputStringArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String command \u003d inputStringArr[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new TodoCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new DeadlineCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new EventCommand(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            throw new TrackrException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 48
    }
  },
  {
    "path": "src/main/java/trackr/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Path of .txt file where tasks are stored persistently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that assigns filepath to the object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param filePath Path of .txt file where tasks are stored persistently"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method loads the stored task list from a previous session."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return ArrayList List of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @throws FileNotFoundException On wrong filepath used"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String[] data \u003d s.split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String command \u003d data[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            if (command.equals(\"T\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Todo t \u003d new Todo(data[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (Integer.parseInt(data[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    t.setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } else if (command.equals(\"D\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Deadline d \u003d new Deadline(data[2], data[3]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (Integer.parseInt(data[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    d.setDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                tasks.add(d);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Event e \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (Integer.parseInt(data[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    e.setDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                tasks.add(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method appends new tasks to the end of the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param textToAppend New task to be added to end of the file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void appendToFile(String textToAppend) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fw.write(textToAppend);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            System.out.println(\"Something went wrong: \" + ex.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method rewrites all data in the file. This is used when we have to edit existing data"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * in the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void rewriteFile(TaskList tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            String textToWrite \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                String type \u003d t.getType();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String s \u003d \"T | \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        s +\u003d \"1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        s +\u003d \"0\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    s +\u003d \" | \" + t + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    textToWrite +\u003d s;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String s \u003d \"E | \";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        s +\u003d \"1\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        s +\u003d \"0\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    s +\u003d \" | \" + t + \" | \" + t.getDate() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    textToWrite +\u003d s;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    String s \u003d \"D | \";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        s +\u003d \"1\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                        s +\u003d \"0\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    s +\u003d \" | \" + t + \" | \" + t.getDate() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                    textToWrite +\u003d s;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fw.write(textToWrite);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            System.out.println(\"Something went wrong: \" + ex.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 130
    }
  },
  {
    "path": "src/main/java/trackr/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a task to be completed by a certain date. A \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * corresponds to a task represented by a name, type and date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Type of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Date of deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor assigning name, type and date to the object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param taskName The name of the deadline task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date The date the task is due"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Deadline(String taskName, String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        type \u003d \"deadline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the type of the deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the type of the deadline task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the string representing the deadline task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the deadline task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the date of the deadline task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the date of the deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 56
    }
  },
  {
    "path": "src/main/java/trackr/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a task to be attended on a certain date. An \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * corresponds to a task represented by a name, type and date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Type of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Date of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor assigning name, type and date to the object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param taskName The name of the event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param date The date of the event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Event(String taskName, String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        type \u003d \"event\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the type of the event task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the type of the event task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the string representing the event task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the event task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the date of the event task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the date of the event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 56
    }
  },
  {
    "path": "src/main/java/trackr/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a task input by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Name of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Boolean indicating whether task has been completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor assigning name and isDone attribute to the object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param taskName The name of the deadline task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to set the task as completed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the status of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return boolean This indicates whether the task has been completed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the string representing the status of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This represents whether the task has been completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return (isDone ? \"+\" : \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the type of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the type of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the string representing the task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"[]\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the date of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the date of the task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the name of the task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the name of the task in the form of a string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 83
    }
  },
  {
    "path": "src/main/java/trackr/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents a task to be completed. A \u003ccode\u003eTodo\u003c/code\u003e object corresponds to a task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * represented by a name, type and date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Type of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor assigning name and type to the object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param taskName Name of todo task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        type \u003d \"todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the type of the todo task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the type of the todo task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method is used to get the string representing the todo task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return String This returns the string representing the todo task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 40
    }
  },
  {
    "path": "src/main/java/trackr/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import trackr.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Represents the list of tasks to be completed. A \u003ccode\u003eTaskList\u003c/code\u003e contains an arraylist of"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * tasks and supports retrieval, addition and deletion operations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Contains all tasks to be completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Default constructor when user has no tasks stored from previous session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Class constructor that is called when user has tasks stored from previous session."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param storage Arraylist of tasks retrieved from storage on hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        this.tasks \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Returns the number of tasks on the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return int This returns the number of tasks on the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method retrieves a task using index of the task in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param i Index of task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @return Task This returns the task corresponding to index provided"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return tasks.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method adds a task to the bottom of the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param t Task to be added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * This method removes a task in the list according to the index provided."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * @param i Index of task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        tasks.remove(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 64
    }
  },
  {
    "path": "src/main/java/trackr/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "package trackr.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     * Prints greeting message to user on application launch."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public String welcomeMsg() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String line \u003d \"___________________________________________________\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        String greetMsg \u003d \"Hello! I\u0027m Spongebob\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        result \u003d line + greetMsg + line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 18
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 19
    }
  },
  {
    "path": "src/test/java/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import duke.date.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void testGetTime() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        DateTime dt \u003d new DateTime(\"12/12/2019 1800\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"6:00pm\", dt.getTime());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 13
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void testGetType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"todo\", new Todo(\"name\").getType());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    public void testGetTypeIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        assertEquals(\"[T]\", new Todo(\"name\").getTypeIcon());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 16
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       [T][ ] borrow book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       [D][ ] return book (by: 2nd of December 2019, 6pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       [E][ ] project meeting (at: 6th of June 2019, 12am)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       [+] borrow book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       [+] return book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    1.[T][+] borrow book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    2.[D][+] return book (by: 2nd of December 2019, 6pm)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    3.[E][ ] project meeting (at: 6th of June 2019, 12am)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "deadline return book /by 2/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "event project meeting /at 6/6/2019 0000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "  @ECHO OFF"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   )"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 22
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        helloWorld.setFont(new Font(\"Arial\", 50));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        Stage secondaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        secondaryStage.setScene(scene);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        secondaryStage.show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 4,
      "-": 110
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        in handleUserInput():"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnlsj97"
        },
        "content": "        dialogContainer.setSpacing(10);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "shawnlsj97": 2,
      "-": 243
    }
  }
]
