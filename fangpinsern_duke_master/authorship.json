[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 19,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.utils.AException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Main driver class for Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Duke extends Application{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a Duke object that takes in a filepath to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * the file where the list of previous tasks is stored."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param filePath path to where the last saved task list is stored"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        tasks \u003d new TaskList(new LinkedList\u003cTask\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            tasks \u003d new TaskList(storage.printFileContents());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            assert tasks!\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //write to file when there is a change in state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Runs the logic for Duke."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        tasks \u003d new TaskList(new LinkedList\u003cTask\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            tasks \u003d new TaskList(storage.printFileContents());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        ui.showWelcome();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //LinkedList used to store all the String given by the user;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // LinkedList\u003cTask\u003e li \u003d new LinkedList\u003cTask\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //read the existing task from the file and create the Duke.tasks to put"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //into the list. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // try{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     storage.printFileContents(li);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // } catch(FileNotFoundException e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     //System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        while (true) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//            ui.printnewline();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//            String echo \u003d scan.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String echo \u003d input;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Parser split \u003d new Parser(echo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String error \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String firstWord \u003d split.getType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (firstWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                // if bye, then end the program"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                ui.printline();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return \"\\tBye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                ui.printline();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else if (firstWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                //if list, print the list of Duke.tasks"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return tasks.printList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else if (firstWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                //if done, change the task status and tell them what they have completed"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int taskNum \u003d Integer.parseInt(split.getDesc().get(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                //scan.nextLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                //System.out.println(taskNum);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int taskNumb \u003d taskNum - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (taskNumb \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    error \u003d \"taskDoNotExist\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else if (tasks.getTask(taskNumb).getIsDone()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    //System.out.println(\"im here\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    error \u003d \"taskAlreadyCompleted\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Task change \u003d tasks.getTask(taskNumb);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    change.completed();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    saving((tasks.getList()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return ui.printDone(change);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else if (firstWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int taskNum \u003d Integer.parseInt(split.getDesc().get(0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int taskNumb \u003d taskNum - 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (taskNumb \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    error \u003d \"taskDoNotExist\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    tasks.remove(taskNumb);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    saving((tasks.getList()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return ui.printDelete(tasks.getTask(taskNumb), tasks.size() - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else if (firstWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                String searchWord \u003d split.getDesc().get(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                LinkedList\u003cTask\u003e listWord \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                TaskList containsWord \u003d new TaskList(listWord);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Task taskInList \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    if (taskInList.getDescription().contains(searchWord)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        containsWord.add(taskInList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return containsWord.printList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                String actual \u003d  \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                Task newTask \u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                LinkedList\u003cString\u003e copy \u003d split.getDesc();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (firstWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    actual \u003d  String.join(\" \", copy);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    if (actual.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        error \u003d \"emptyToDo\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    newTask \u003d  new ToDo(actual);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else if (firstWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String help \u003d String.join(\" \", copy);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String task \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String time \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    if (help.isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        error \u003d \"emptyDeadline\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        int slashInt \u003d help.indexOf(\"/by\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        //System.out.println(slashInt);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        //time \u003d help.substring();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        if (slashInt \u003d\u003d -1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            error \u003d \"emptyBy\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            time \u003d help.substring(slashInt + 4);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            task \u003d help.substring(0, slashInt - 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            if (task.equals(\" \")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                error \u003d \"emptyDeadline\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                //System.out.println(task);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                newTask \u003d new Deadline(task, storage.dateTimeConversion(time));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                System.out.println(time);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else if (firstWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String help \u003d String.join(\" \", copy);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String task \u003d \"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String time \u003d \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    if (help.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        error \u003d \"emptyEvent\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        int slashInt \u003d help.indexOf(\"/at\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        //System.out.println(slashInt);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        //time \u003d help.substring();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        if (slashInt \u003d\u003d -1) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            error \u003d \"emptyAt\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            time \u003d help.substring(slashInt + 4);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            task \u003d help.substring(0, slashInt - 1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            if (task.equals(\" \")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                error \u003d \"emptyEvent\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                //System.out.println(task);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                                newTask \u003d new Event(task, storage.dateTimeConversion(time));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                //handle all errors"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (!error.isEmpty() || newTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    AException ee \u003d  new AException();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                    ui.printline();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    String emsg \u003d \"\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    if (error.equals(\"emptyToDo\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        emsg \u003d  ee.emptyToDoException();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else if (error.equals(\"emptyDeadline\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        emsg \u003d  ee.emptyDeadlineException();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else if (error.equals(\"emptyBy\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        emsg \u003d ee.emptyByException();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else if (error.equals(\"emptyEvent\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        emsg \u003d ee.emptyEventException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else if (error.equals(\"emptyAt\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        emsg \u003d ee.emptyAtException();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        emsg \u003d ee.dontUnderstand();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                    ui.printline();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    error \u003d \"\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return emsg;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                    return \"here\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    tasks.add(newTask);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    saving((tasks.getList()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return ui.takeInput(newTask, tasks.size());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (!error.isEmpty()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                AException ee2 \u003d  new AException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                ui.printline();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (error.equals(\"taskDoNotExist\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return ee2.exceedListSize();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else if (error.equals(\"taskAlreadyCompleted\")) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return ee2.taskAlreadyCompleted();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                ui.printline();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                storage.writeFile(tasks.getList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//                e.printStackTrace();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void saving(LinkedList\u003cTask\u003e li){"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            storage.writeFile(li);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//    public static void main(String[] args) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        new Duke(\"duke.txt\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"images/DaUser.png\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"images/DaDuke.png\"));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Label dukeText \u003d new Label(run(userInput.getText()));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                DialogBox.getUserDialog(userText.getText(), user),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                DialogBox.getDukeDialog(dukeText.getText(), duke)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String userWord \u003d userInput.getText();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (!userWord.isEmpty()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        });"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String userWord \u003d userInput.getText();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if(!userWord.isEmpty()) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        });"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 360,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//    private Duke duke;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//    public Main(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Duke duke \u003d new Duke(\"/Users/colourincrayons/Desktop/Uni Notes/Y2S1/CS2103T/duke/src/main/resources/data/duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String response \u003d duke.run(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 53
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the task with deadline specifications."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Create an initial deadline task that initializes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * to incomplete by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param by the actual deadline for the deadline task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a deadline task mainly for storage purposes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * This constructor keeps the state of the task whether"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * is it done or incomplete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param by the date and time which the task needs to be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *           completed by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param doner the completion status of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *              (Completed is 1, incomplete is 2)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Deadline(String description, Date by, int doner) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (doner \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            super.completed();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns a string that represents the deadline that will be stored in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * the format got storage and retrieval in a .txt file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return the string of the task that will be saved in the .txt file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        int a \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            a \u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"D|\" + a + \"|\" + super.description + \"|\" + formatter.format(by);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + formatter.format(by) + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 64
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the task with event specifications."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates an initial event task that initializes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * to incomplete by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param at the actual deadline for the deadline task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a event task mainly for storage purposes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * This constructor keeps the state of the task whether"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * is it complete or incomplete."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param at the date and time which the task needs to be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *           completed by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param doner the completion status of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *              (Completed is 1, incomplete is 2)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Event(String description, Date at, int doner) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (doner \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            super.completed();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns a string that represents the event that will be stored in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * the format got storage and retrieval in a .txt file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return the string of the task that will be saved in the .txt file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        int a \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            a \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"E|\" + a + \"|\" +  super.description + \"|\" + formatter.format(at);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + formatter.format(at) + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the tasks which has a description and the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * completion status of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Create a task object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Extended by Event, Deadline and ToDo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gets the status of the task. Whether is it completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * or incomplete."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return a string that shows the status icon of tick"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *     or cross where tick is completed and cross is incomplete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String taskCompletion() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String status \u003d getStatusIcon();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return (\"[\" + status + \"] \" + description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Change the status of a task from incomplete to completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //Change task to completed;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void completed() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Check if the task is completed or not."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return the completion status of the task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gives either a tick or cross icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return a tick of cross icon"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //get the tick or cross"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //save to file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"Saving\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Converts a string to a date object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param dateTime the date and time that needs to be converted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *                 to a date object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return a date object from the string given"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static Date dateTimeConversion(String dateTime) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String dateInString \u003d dateTime;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Date date \u003d formatter.parse(dateInString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            System.out.println(\"Not valid date and time\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Date date \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String status \u003d getStatusIcon();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return (\"[\" + status + \"] \" + description);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 100
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the task with to do specifications."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Create an initial To Do task that initializes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * to incomplete by default."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a To Do task mainly for storage purposes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * This constructor keeps the state of the task whether"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * is it done or incomplete."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param description a description given for the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param doner the completion status of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *              (Completed is 1, incomplete is 2)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public ToDo(String description, int doner) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (doner \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            super.completed();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns a string that represents the To Do that will be stored in"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * the format got storage and retrieval in a .txt file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return the string of the task that will be saved in the .txt file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        int a \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            a \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"T|\" + a + \"|\" + super.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 52
    }
  },
  {
    "path": "src/main/java/duke/utils/AException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents every exception that Duke may encounter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * when the user uses Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class AException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the description of ToDo is empty."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String emptyToDoException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the description of Deadline is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String emptyDeadlineException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the /by is not filled for Deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String emptyByException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! The date and time of deadline not specified.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the description of Event is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String emptyEventException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return\"\\tOOPS!!! The description of a event cannot be empty.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the /at is not filled for Event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String emptyAtException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! The date and time of event not specified.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the command is not understood."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String dontUnderstand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the user of Duke wants to access (delete/done)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * a task that is not in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String exceedListSize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! Task do not exist in list\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out message when the task has already been completed but the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * user still issues the done command for that task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String taskAlreadyCompleted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return \"\\tOOPS!!! Task has already been completed!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 66
    }
  },
  {
    "path": "src/main/java/duke/utils/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the parser that will take a string"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * input and make sense of what command the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * is using."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private String[] split;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a parser object that parses the string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * and get what type of command the user is issuing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param s the string input by the user of Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Parser(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.split \u003d s.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.type \u003d split[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gets the type of command the user has input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return string that says what type of command the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *     user is issuing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gets the description for Tasks related commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return LinkedList of that are in the command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public LinkedList\u003cString\u003e getDesc() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //String actual \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        LinkedList\u003cString\u003e copy \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        for (int i \u003d 1; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            copy.add(split[i]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // if (type.equals(\"delete\") || type.equals(\"list\") || type.equals(\"bye\") || type.equals(\"done\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     return split[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // } else if (type.equals(\"todo\")){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     actual \u003d  String.join(\" \", copy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // } else if(type.equals(\"deadline\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     String help \u003d String.join(\" \", copy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     String task \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //     String time \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 63
    }
  },
  {
    "path": "src/main/java/duke/utils/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.nio.Buffer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the text file we are storing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * the data in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates a Storage object that stores all the data of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * task list when Duke is stopped."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param filePath is the file path to the file you want to save to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Writes the tasks in the TaskList to a certain file path"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * for later retrieval when Duke restarts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param li list that is written to the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @throws FileNotFoundException File is not found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void writeFile(LinkedList\u003cTask\u003e li) throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        PrintWriter outputStream \u003d new PrintWriter(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        for (int i \u003d 0; i \u003c li.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            outputStream.println(li.get(i).save());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //System.out.println(\"File saved\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Reads the file that contains the list of task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * and uploads it into the TaskList in Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return returns a list of all the tasks in the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @throws FileNotFoundException File is not found"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public LinkedList\u003cTask\u003e printFileContents() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        LinkedList\u003cTask\u003e li \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        FileReader f \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        BufferedReader bf \u003d new BufferedReader(f);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        while ((line \u003d bf.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String[] what \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // 0 is the task type"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // 1 is the done level"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // 2 is the description"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // 3 is the deadline if it has"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // for(int i \u003d 0; i \u003c what.length; i++){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //     System.out.println(what[i]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String taskType \u003d what[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            int doner \u003d Integer.parseInt(what[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Task newTask \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                newTask \u003d  new ToDo(what[2], doner);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                newTask \u003d new Deadline(what[2], dateTimeConversion(what[3]), doner);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                newTask \u003d new Event(what[2], dateTimeConversion(what[3]), doner);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            li.add(newTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return li;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Converts a string to a date object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param dateTime the date and time that needs to be converted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *                 to a date object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return a date object from the string given"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //print the line for fromatting"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Date dateTimeConversion(String dateTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String dateInString \u003d dateTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Date date \u003d formatter.parse(dateInString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            System.out.println(\"Not valid date and time\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Date date \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 109
    }
  },
  {
    "path": "src/main/java/duke/utils/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the list that contains every task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private LinkedList\u003cTask\u003e li;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Creates an object that stores all the tasks information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param li list of that tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public TaskList(LinkedList\u003cTask\u003e li) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.li \u003d li;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints the tasks that are in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        String line \u003d  \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        System.out.println(line);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (!li.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String msg \u003d \"\\tHere are the Duke.tasks in your list:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            for (int i \u003d 0; i \u003c li.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int j \u003d i + 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                msg \u003d msg + \"\\t\" + j + \" \" + li.get(i).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return msg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return \"\\tThe task list is empty\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        System.out.println(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gives the size of the TaskList which in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * this case is the number of tasks in the TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return size of the TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return li.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Get a certain task in the TaskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param i the task number in the TaskList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return Task that is at index i"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return li.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Removes the task from the TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param i index which user wants to remove"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        li.remove(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Adds tasks to the TaskList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param t Task that is added to the TaskList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        li.add(t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gets the list in TaskList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return the list of all task that are in the TaskList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public LinkedList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return li;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 88
    }
  },
  {
    "path": "src/main/java/duke/utils/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * Represents the things that the user sees"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " * on Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out the line for formatting purposes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void printline() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String line \u003d  \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints a new line character."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //print new line for formatting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void printnewline() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Shows the welcome message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String name \u003d \"duke\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        System.out.println(\"\\tHello, I\u0027m \" + name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        System.out.println(\"\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Confirmation message when the task is being added into the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param t task that is being added into the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param i number of task that are in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String takeInput(Task t, int i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String msg \u003d \"\\tGot it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        msg \u003d msg + \"\\t\\t\" + t + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        msg \u003d msg + \"\\tNow you have \" + i + \" tasks in the list\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        printline();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints out the current list of tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param li List containing all the tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void printList(LinkedList\u003cTask\u003e li) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        System.out.println(\"\\tHere are the Duke.tasks in your list:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        for (int i \u003d 0; i \u003c li.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            int j \u003d i + 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            System.out.println(\"\\t\" + j + \" \" + li.get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints the done message to show that the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * has been completed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param task the task that has been completed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //completion of task confirmation"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String printDone(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String msg \u003d \"\\tNice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        msg \u003d msg + \"\\t\\t\" + task;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        printline();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Prints the message to confirm that a task has"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * been deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param task the task that is deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param i the number of tasks left in the list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //completion of removal of task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String printDelete(Task task, int i) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        printline();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String msg \u003d \"\\tNoted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        msg \u003d msg + \"\\t\\t\" + task + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        msg \u003d msg + \"\\tNow you have \" + i + \" Duke.tasks in the list\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//        printline();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 109
    }
  },
  {
    "path": "src/main/resources/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "T|1|123"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 1
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 19
    }
  },
  {
    "path": "src/test/java/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    DeadlineTest(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.deadline \u003d new Deadline(\"return book\", Task.dateTimeConversion(\"2/12/2019 1800\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void save_taskObject_formattedTaskString(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(\"D|0|return book|02/12/2019 1800\", deadline.save());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void toString_taskObject_formattedTaskString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(\"[D][✘] return book(by: 02 Dec 2019 06:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 24
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    Event event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    EventTest(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.event \u003d new Event(\"description\", Task.dateTimeConversion(\"2/12/2019 1800\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void save_taskObject_formattedTaskString(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(\"E|0|description|02/12/2019 1800\", event.save());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void toString_taskObject_formattedTaskString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(\"[E][✘] description(at: 02 Dec 2019 06:00 PM)\", event.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 25
    }
  },
  {
    "path": "src/test/java/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    ToDo todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    ToDoTest(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.todo \u003d new ToDo(\"description\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void save_taskObject_formattedTaskString(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(\"T|0|description\", todo.save());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void toString_taskObject_formattedTaskString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(\"[T][✘] description\", todo.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 24
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "![DaDuke](../src/main/java/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "![DaUser](../src/main/java/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 2,
      "-": 241
    }
  }
]
