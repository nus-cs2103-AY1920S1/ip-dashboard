[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "test {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "run {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 51,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "# WoofPlanner"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "WoofPlanner is a desktop application that helps you to manage your tasks. It is optimized for users who "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "are more comfortable with the Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "## 1. Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "1. Ensure you have Java `11` or above installed in your computer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "2. Download the latest `planner.jar` [here](https://github.com/junhuplim/duke/releases/tag/A-Release)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "4. Double click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  ![WoofPlanner](startup.png)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "## 2. Features"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Words in `UPPER_CASE` are the task names to be filled in by the user. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.1 `todo`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Adds a task to be done to the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `todo TASK_NAME`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `todo work`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `todo project`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.2 `deadline`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Adds a deadline to be done to the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `deadline TASK_NAME /by DD/MM/YYYY HH:MM`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `deadline CS2103 homework /by 20/09/2019 10:00`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `deadline project slides /by 12/10/2019 20:30`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  ![Deadline](deadline.png)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.3 `event`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Adds an event to be done to the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `event TASK_NAME /at DD/MM/YYYY HH:MM`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `event project meeting /at 22/09/2019 13:00`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `event family dinner /at 23/09/2019 20:00`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  ![Event](event.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.4 `list`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Lists out all the tasks in the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  * ![List](list.png)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.5 `delete`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Deletes a task with the index from the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `delete 2` deletes the second task from the task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  ![Delete](delete.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.6 `done`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Completes a task with the index from the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `done 3` completes the third task from the task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  ![Done](done.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.7 `find`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Find a task whose name contains the input keyword from the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* `find dinner` finds tasks with the word `dinner` from the task lists."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  ![Find](find.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "#### 2.8 `bye`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Exits the program after a short delay."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "## 3. FAQ"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "Q: Where will my task list with all the tasks be saved? "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "A: The task list will be automatically saved to the same directory as the .jar file "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "each time you exit the program."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "## 4. Bug Reports"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* If you have bugs to report, please post in my github [issue tracker](https://github.com/junhuplim/duke/issues)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "## 5. License"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Add"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  * Todo: `todo TASK_NAME`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  * Deadline: `deadline TASK_NAME /by DD/MM/YYYY HH:MM`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "  * Event: `event TASK_NAME /at DD/MM/YYYY HH:MM`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* List: `list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Delete: `delete INDEX`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Done: `done INDEX`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Find: `find KEYWORD`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "* Exit: `bye`"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 101,
      "-": 9
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "D | 1 |  CS2103 homework  |  20/09/2019 10:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "E | 0 |  family dinner  |  23/09/2019 20:00"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 2
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 100
    }
  },
  {
    "path": "src/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 1 |  read"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 0 |  work"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 0 |  project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 0 |  read"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 4
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            assert (MainWindow.class.getResource(\"/view/DialogBox.fxml\") !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Gets the dialogbox for duke."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param text text in which Duke is supposed to response"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param img  display picture of Duke"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return db"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 69
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class is the main class of the program. It helps users to help track their Duke.tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * by creating a task list for them when users key in the respective input. The task list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * is then automatically saved into a txt file which allows the users to view and keep track."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Main application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            storage \u003d new Storage(\"duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return c.execute(tasks, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 49
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            assert (Main.class.getResource(\"/view/MainWindow.fxml\") !\u003d null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            stage.setTitle(\"WoofPlanner - Ask bear to keep you on track!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().showWelcome();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 35
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/icon2.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/icon1.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author {Parcly-Taxel}-reused"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        //{Exits the program after a set timing of input command \u0027bye\u0027}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Timer tm \u003d new Timer();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            tm.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }, 2000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Shows welcome message when user starts the application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String welcomeMsg \u003d Ui.welcome();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            DialogBox.getDukeDialog(welcomeMsg, dukeImage)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 76,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.Parser class deals with making sense of the user Duke.command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * A static method that parse the input Duke.command given by the user and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * deals with the Duke.command respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param fullCommand makes sense of the input given by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return a Command which will then be executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (fullCommand.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (fullCommand.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (fullCommand.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new ByeCommand(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return new AddCommand(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 38
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.Storage class deals with loading Duke.tasks from the file and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * saving Duke.tasks into the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param filePath the path of the file that is used to load and save the task into."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws IOException if the required filePath cannot be found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method loads the saved Duke.tasks list from the saved file into the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return the array list of Duke.tasks that keep tracks of the Duke.tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.readStored();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method stores the to do task keyed in by the user into the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input the description of the to do task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws EmptyDescriptionException if the description is empty for the to do task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void storeTodo(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath, true));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (!input.substring(4).isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(\"T | 0 | \" + description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method stores the deadline task keyed in by the user into the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input the description of the deadline task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws EmptyDescriptionException   if the description is empty for the deadline task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws InvalidDescriptionException if the format of the deadline keyed in by the user is wrong."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException              if the date format for the deadline keyed in by the user is wrong."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void storeDeadline(String input) throws EmptyDescriptionException, InvalidDescriptionException,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                int index \u003d input.lastIndexOf(\"/by\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(8, index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String by \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Date byDeadline \u003d convertStringToDate(by);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (description.isBlank()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (by.isBlank()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, byDeadline);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(\"D | 0 | \" + description + \" | \" + by);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method stores the event task keyed in by the user into the file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input the description of the event task"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws EmptyDescriptionException   if the description is empty for the event task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws InvalidDescriptionException if the format of the event keyed in by the user is wrong."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException              if the date format for the event keyed in by the user is wrong."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void storeEvent(String input) throws EmptyDescriptionException, InvalidDescriptionException,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath, true));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                int index \u003d input.lastIndexOf(\"/at\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(5, index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String at \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Date atEvent \u003d convertStringToDate(at);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (description.isBlank()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (at.isBlank()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Event event \u003d new Event(description, atEvent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(\"E | 0 | \" + description + \" | \" + at);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method deletes the task as requested by the user input in the file. It rewrites"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * everything from the saved file and writes from the updated task list in the program."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input the Duke.command given by the user input which includes the index of the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *              array list that user wants to delete."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void updateDelete(String input) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            ArrayList\u003cString\u003e stored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (count \u003d\u003d index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    stored.add(line);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            for (String s : stored) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(s);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            bw.flush();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method completes the task as requested by the user input in the file. It rewrites"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * everything from the saved file and writes from the updated task list in the program."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input the Duke.command given by the user input which includes the index of the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *              array list that user wants to complete."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void updateComplete(String input) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            ArrayList\u003cString\u003e stored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (count \u003d\u003d index) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    line \u003d line.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    stored.add(line);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    stored.add(line);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            for (String s : stored) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(s);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            bw.flush();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method reads the Duke.tasks that has been saved in the file and load the Duke.tasks into the program."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return a array list of Duke.tasks."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ArrayList\u003cTask\u003e readStored() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            this.readData(tasks);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm, example: \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \"02/08/2019 14:30\\n\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method works together with readStored() method and makes sense of the data stored in the saved file"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * and load the Duke.tasks into the program."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasksList the task list to store the Duke.tasks from the saved file."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException if the data from the saved file does not follow a certain format."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void readData(ArrayList\u003cTask\u003e tasksList) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String inputLine \u003d null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            while ((inputLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                System.out.println(inputLine);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String[] input \u003d inputLine.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String typeOfTasks \u003d input[0];"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (typeOfTasks.equals(\"T\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addStoredTodo(input, tasksList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else if (typeOfTasks.equals(\"D\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addStoredDeadline(input, tasksList);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addStoredEvent(input, tasksList);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method adds the saved to do task from the file into the program task list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input     description of the to do task."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasksList task list in which the to do task will be added into."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void addStoredTodo(String[] input, ArrayList\u003cTask\u003e tasksList) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Todo todo \u003d new Todo(input[2]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            todo.complete();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasksList.add(todo);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method adds the saved deadline task from the file into the program task list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input     description and deadline date of the deadline task."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasksList task list in which the deadline task will be added into."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException if saved data does not follow the required format."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void addStoredDeadline(String[] input, ArrayList\u003cTask\u003e tasksList) throws ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Deadline deadline \u003d new Deadline(input[2], convertStringToDate(input[3]));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            deadline.complete();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasksList.add(deadline);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method adds the saved event task from the file into the program task list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input     description and event date of the event task."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasksList task list in which the event task will be added into."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException if saved data does not follow the required format."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void addStoredEvent(String[] input, ArrayList\u003cTask\u003e tasksList) throws ParseException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Event event \u003d new Event(input[2], convertStringToDate(input[3]));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            event.complete();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasksList.add(event);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method which converts the user input date into a Date instead of a String value."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input a string input to be converted into the date following a fixed format."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return Date value which has been converted from a string."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException if user did not key in the date as the requested format."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Date convertStringToDate(String input) throws ParseException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 318
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.DoAfter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.TaskList class contains the task list, and has operations to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * add/delete the Duke.tasks in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks an array list of Duke.tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws DukeException which includes any exceptions when operating on the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method retrieves the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return the array list of Duke.tasks that keep tracks of the Duke.tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Add the to do task into the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input description of the to do task to be added into the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String addTodo(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (!input.substring(4).isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String result \u003d responseOut(todo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Add the deadline task into the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input description of the deadline task together with the deadline date to be added into the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String addDeadline(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                int index \u003d input.lastIndexOf(\"/by\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(8, index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String by \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Date byDeadline \u003d convertStringToDate(by);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (description.isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (by.isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, byDeadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String result \u003d responseOut(deadline);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Add the event task into the task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input description of the event task together with the event date to be added into the task list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String addEvent(String input) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                int index \u003d input.lastIndexOf(\"/at\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(5, index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String at \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Date atEvent \u003d convertStringToDate(at);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (description.isBlank()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (at.isBlank()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Event event \u003d new Event(description, atEvent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String result \u003d responseOut(event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String addDoAfter(String input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int index \u003d input.indexOf(\"doAfter\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if ((input.substring(0, index).isEmpty()) || (input.substring(index + 7).isBlank())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"addAfter\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String doAfterTask \u003d input.substring(index + 8);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String before \u003d input.substring(0, index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                DoAfter doAfter \u003d new DoAfter(before, doAfterTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(doAfter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String result \u003d responseOut(doAfter);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Deletes the task as requested by the user input and removes this task from the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * task list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input Duke.command of the user input which includes the index of the task that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *              user wants to delete."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String deleteTask(String input) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        result \u003d \"Noted. I\u0027ve removed this task:\\n\" + removedTask.toString() + \"\\nNow you have \" + tasks.size() + \" \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + \"tasks in the list.\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Completes the task as requested by the user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input Duke.command of the user input which includes the index of the task that"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *              user wants to complete"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String completeTask(String input) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasks.get(index).complete();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        result \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(index);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Find the task according to the keyword given by the user input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input Duke.command of the user input which includes the keyword that the user wants to find."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String findTask(String input) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String keyword \u003d input.substring(5);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ArrayList\u003cTask\u003e filtered \u003d copy(this.tasks);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        result +\u003d \"Here are the matching tasks in your list.\\n\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (tasks.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                result +\u003d tasks.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method copies the content of an array list to another independent array list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks the source of content in which will be copied to the other array list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return an array list which has the copied content."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ArrayList\u003cTask\u003e copy(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ArrayList\u003cTask\u003e duplicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            duplicate.add(tasks.get(i));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return duplicate;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Static method which prints out the addition of task message each time"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * a task is successfully added into the task list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param task that has been successfully added into the task list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static String responseOut(Task task) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n\" + task.toString() + \"\\nNow you have \" + tasks.size() + \" \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            + \"tasks in the list.\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Static method which converts the user input date into a Date instead of a String value."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param input a string input to be converted into the date following a fixed format."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return Date value which has been converted from a string."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws ParseException if user did not key in the date as the requested format."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static Date convertStringToDate(String input) throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 230
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.Ui class deals with the interactions with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method prints the welcome message for the user when they first"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * enter the program. It is always shown to signal the start of the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static String welcome() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"Hello! I\u0027m Bear. \\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method reads the input by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return string input as keyed in by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * This method prints the error message accordingly to the different exceptions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param e and handles the exceptions accordingly."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (e instanceof InvalidInputException) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof EmptyDescriptionException) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(String.format(\"OOPS!!! The description of a %s cannot be empty.\", e.getMessage()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof InvalidDescriptionException) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(String.format(\"OOPS!!! Invalid input! Make sure your %s has a description and \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \"required\" + \" data after /at for Event, /by for Deadline or data before and after \u0027doafter\u0027\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                e.getMessage()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(String.format(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm,\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \" example: 02/08/2019 14:30\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 62
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * AddCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles any addition of Duke.tasks into the Duke.TaskList class and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * subsequently updating the txt file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param command Duke.command to add task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public AddCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Adds the Duke.tasks requested by the user into Duke.TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Update the txt file by adding the respective task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                storage.storeTodo(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return tasks.addTodo(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                storage.storeDeadline(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return tasks.addDeadline(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                storage.storeEvent(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return tasks.addEvent(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else if (command.contains(\"doAfter\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                storage.storeEvent(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                return tasks.addDoAfter(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidInputException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return handleException(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * AddCommand does not exit program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 63
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * ByeCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the exit of the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param command Duke.command to exit the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ByeCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the goodbye message to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return (\"BYE! See you again next time!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * ByeCommand exits the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return True as this Duke.command end the program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 42
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * An abstract Command class with abstract method execute and isExit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This Command class handles the Duke.command given by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Abstract method that is the main function of the Command class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Respective subclass of Command (classes which inherits from Command) will have this execute"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * function based on their Duke.command, and carry out the respective task as per the Duke.command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws EmptyDescriptionException   if input does not contain description for the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws InvalidInputException       if input does not qualify for any of the functions in the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws InvalidDescriptionException if input does not follow the required format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @throws IOException                 if storage file for tracking the Duke.TaskList is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public abstract String execute(TaskList tasks, Storage storage) throws EmptyDescriptionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        InvalidInputException, InvalidDescriptionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Abstract method that is most applicable to specifically the ByeCommand Class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return boolean value which decides whether the app will be exiting."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Handles the Duke.exception thrown by respective Command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Takes care of InvalidInputException, EmptyDescriptionException, InvalidDescriptionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Parse Exception and other unhandled Exceptions."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param e Exception thrown when user input is wrong."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static String handleException(Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (e instanceof InvalidInputException) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return (\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof EmptyDescriptionException) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return (String.format(\"OOPS!!! The description of a %s cannot be empty.\", e.getMessage()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof InvalidDescriptionException) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return (String.format(\"OOPS!!! Invalid input! Make sure your %s has a description and required\" + \" data \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \"after /at for Event or /by for Deadline.\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return (String.format(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm,\" + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                + \"example: 02/08/2019 14:30\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return (e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 62
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DeleteCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the deletion of tasks, and subsequent updating"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * the txt file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param command Duke.command to delete task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Deletes the task requested by the user from the Duke.TaskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Update the txt file by removing the respective task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        storage.updateDelete(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return tasks.deleteTask(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * AddCommand does not exit program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DoneCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the completion of tasks, and subsequent updating"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * the txt file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param command Duke.command to complete task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Completes the task requested by the user from the Duke.TaskList by marking them as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Update the txt file by marking the respective task as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        storage.updateComplete(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return tasks.completeTask(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * DoneCommand does not exit program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 45
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * FindCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the finding of tasks, and subsequent updating"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * the txt file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param command Duke.command to complete task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Completes the task requested by the user from the Duke.TaskList by marking them as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Update the txt file by marking the respective task as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws EmptyDescriptionException, InvalidInputException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        InvalidDescriptionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return tasks.findTask(this.command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * DoneCommand does not exit program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * ListCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the printing of all Duke.tasks in the Duke.TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param command Duke.command to show all the Duke.tasks in Duke.TaskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints all the task from the Duke.TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        ArrayList\u003cTask\u003e tasksList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String result \u003d \"Here are your tasks:\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksList.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int j \u003d i + 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            result +\u003d j + \": \" + tasksList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (tasksList.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            result \u003d \"You have no tasks right now!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * ListCommand does not exit program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 56
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DukeException class handles all the Duke.exception that can be thrown by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import main.java.Duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * EmptyDescriptionException class extends DukeException and deals with"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.tasks without any description given by the input in the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import duke.Duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * InvalidDescriptionException class extends DukeException and deals with"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.tasks with the wrong description given by the input in the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class InvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidDescriptionException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import duke.Duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * InvalidInputException class extends DukeException and deals with"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * any random inputs that is not within the function of the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 22
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Deadline class that can be created by the user. Handles all Duke.tasks with deadlines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected SimpleDateFormat format \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param by          deadline date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the deadline with the status, the description and the deadline date together."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        format \u003d new SimpleDateFormat(\"EEEE, MMM d, HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + format.format(by) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 33
    }
  },
  {
    "path": "src/main/java/duke/tasks/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DoAfter class that can be created by the user. Handles all Duke.tasks with doafter tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String after;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param after          deadline date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DoAfter(String description, String after) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the deadline with the status, the description and the deadline date together."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[A]\" + super.toString() + \" after \" + this.after;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 28
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Event class that can be created by the user. Handles all Duke.tasks with events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected SimpleDateFormat format \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param at          event date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the event with the status, the description and the event date together."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        format \u003d new SimpleDateFormat(\"EEEE, MMM d, HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + format.format(at) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 34
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Task class includes Todo, Deadline and Event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * It is the task that is tracked by the Duke.TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns the status of the task - 1 for completed and 0 for not completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return the status of the task - whether it is completed or not."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return (isDone ? \"[1]\" : \"[0]\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that completes the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the task with the status and the description together."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 47
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * To do class that can be created by the user. Handles all Duke.tasks with To do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the to do task with the status and the description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 24
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "               maxWidth\u003d\"1.7976931348623157E308\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            \u003cFont name\u003d\"Apple Symbols\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                      style\u003d\"-fx-background-color: #FFF5EE;\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 26
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import main.java.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void toStringTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tTask task \u003d new Task(\"homework\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttask.complete();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tassertEquals(task.toString(), \"[1]homework\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 12
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import main.java.tasks.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void toStringTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tTodo todo \u003d new Todo(\"work\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tassertEquals(todo.toString(), \"[T][0]work\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 12
    }
  }
]
