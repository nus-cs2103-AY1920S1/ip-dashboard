[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 22,
      "-": 15
    }
  },
  {
    "path": "src/main/java/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A Command to add a task to the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "        newTask \u003d task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns a boolean value signalling whether the program should exit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A boolean value indicating whether the program should exit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Executes the command to add a task to the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param ui The ui that handles user output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param storage The storage that handles saving and loading the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IOException If the I/O operation fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(newTask.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 39
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A command made from user input, that will determine the action to be taken on the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 11
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents the deadline task given by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Deadline(String s, String by) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.by \u003d LocalDateTime.parse(by, dateTimeFormatter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new InvalidTimeException(\"You formatted your time incorrectly! \" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \"Please format it this way: dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Formats the task such that it can be outputted in a readable form for the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String mark \u003d (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", mark, taskDescription, by.format(dateTimeFormatter).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 32
    }
  },
  {
    "path": "src/main/java/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A Command to delete a task from the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private int targetIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public DeleteTaskCommand(int index) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns a boolean value signalling whether the program should exit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A boolean value indicating whether the program should exit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Executes the command to delete a task from the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param ui The ui that handles user output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param storage The storage that handles saving and loading the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IOException If the I/O operation fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws DukeException If the user input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Task deletedTask \u003d tasks.deleteTask(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(deletedTask.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 40
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Driver class for the Duke iP."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Duke manages a task list that allows users to add, track and delete various types of tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The method loops until the user inputs \u0027bye\u0027, which then closes the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The main method of the driver class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        new Duke(\"data/tasks.tmp\").run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 45,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * An Exception specific to the Duke program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 8
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A DukeException for when the user inputs an empty task description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EmptyDescriptionException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents the event task given by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Event(String s, String at) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.at \u003d LocalDateTime.parse(at, dateTimeFormatter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new InvalidTimeException(\"You formatted your time incorrectly! \" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \"Please format it this way: dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Formats the task such that it can be outputted in a readable form for the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String mark \u003d (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", mark, taskDescription, at.format(dateTimeFormatter).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 32
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A Command to exit the Duke program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Executes the command to exit the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param ui The ui that handles user output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param storage The storage that handles saving and loading the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.showExitMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns a boolean value signalling whether the program should exit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A boolean value indicating whether the program should exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 27
    }
  },
  {
    "path": "src/main/java/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A Command to find tasks from the task list based on a keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public FindTaskCommand(String keyword) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Executes the command to find tasks from the task list based on a keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param ui The ui that handles user output."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param storage The storage that handles saving and loading the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cTask\u003e matchedTasks \u003d tasks.getMatchedTasks(keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (matchedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "            ui.print(\"There are no tasks in your list matching your keyword!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "            ui.print(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d matchedTasks.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "                ui.print(String.format(\"%d. %s\", i, matchedTasks.get(i - 1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns a boolean value signalling whether the program should exit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A boolean value indicating whether the program should exit."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 42
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A DukeException for when the user inputs an invalid command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public InvalidInputException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 9
    }
  },
  {
    "path": "src/main/java/InvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A DukeException for when the user inputs the time of a Deadline or Event task in an improper format."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class InvalidTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public InvalidTimeException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 9
    }
  },
  {
    "path": "src/main/java/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A Command to mark as complete a task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class MarkAsDoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private int targetIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public MarkAsDoneCommand(int index) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Executes the command to mark as complete a task on the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param ui The ui that handles user output."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param storage The storage that handles saving and loading the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IOException If the I/O operation fails."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "        tasks.markTaskAsDone(targetIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(tasks.get(targetIndex).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns a boolean value signalling whether the program should exit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A boolean value indicating whether the program should exit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 38
    }
  },
  {
    "path": "src/main/java/OutOfBoundsDeletionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A DukeException for when the user attempts to delete from an index in the task list that does not exist."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class OutOfBoundsDeletionException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public OutOfBoundsDeletionException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 9
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Attempts to find within the user input, a Command that takes in one parameter."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param action The action keyword from the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return An Optional Command that contains a Command if a command was found; otherwise it is empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws DukeException If the action keyword is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Optional\u003cCommand\u003e findOneParameterCommand(String action) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cString\u003e validActions \u003d Arrays.asList("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "                new String[]{\"bye\", \"list\", \"done\", \"delete\", \"find\", \"todo\", \"deadline\", \"event\"});"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!validActions.contains(action)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new InvalidInputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.of(new ExitCommand());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.of(new PrintListCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Attempts to find within the user input, a Command that takes in two parameters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param parameters The description of the action from the user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return An Optional Command that contains a Command if a command was found; otherwise it is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws DukeException If the parameters are invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Optional\u003cCommand\u003e findTwoParameterCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String action \u003d parameters[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (parameters.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new EmptyDescriptionException(\"☹ OOPS!!! The description of a \" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    action + \" command cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.of(new MarkAsDoneCommand(Integer.parseInt(parameters[1]) - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.of(new DeleteTaskCommand(Integer.parseInt(parameters[1]) - 1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.of(new FindTaskCommand(parameters[1]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.of(new AddTaskCommand(new Todo(parameters[1])));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Attempts to find within the user input, a Command that takes in three parameters."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param parameters The description of the action from the user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A Command that takes in three parameters."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws DukeException If the parameters are invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Command findThreeParameterCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String action \u003d parameters[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "            String[] description;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "            description \u003d parameters[1].split(\" /by \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (description.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "                throw new EmptyDescriptionException(\"☹ OOPS!!! You missed out the time of the deadline task.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d new AddTaskCommand(new Deadline(description[0], description[1]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "            description \u003d parameters[1].split(\" /at \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (description.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "                throw new EmptyDescriptionException(\"☹ OOPS!!! You missed out the time of the event task.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d new AddTaskCommand(new Event(description[0], description[1]));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new InvalidInputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses the user command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param fullCommand The raw input given by the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A Command that varies based on the user input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws DukeException If the user input is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String[] parameters \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cCommand\u003e command \u003d Parser.findOneParameterCommand(parameters[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (command.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "            command \u003d Parser.findTwoParameterCommand(parameters);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (command.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "                return Parser.findThreeParameterCommand(parameters);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "                return command.get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return command.get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 128
    }
  },
  {
    "path": "src/main/java/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A Command to print the task list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class PrintListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Executes the command to print the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param ui The ui that handles user output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param storage The storage that handles saving and loading the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui.print(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "            ui.print(String.format(\"%d. %s\", i, tasks.get(i - 1)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns a boolean value signalling whether the program should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A boolean value indicating whether the program should exit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 30
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Manages the writing and reading of the task list to and from the hard drive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Reads the task list from the hard drive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The task list read from the hard drive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IOException If the I/O operation fails."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws ClassNotFoundException If the class is not found during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public TaskList load() throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "        TaskList tasks \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ois.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Writes the task list to the hard drive."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param tasks The task list to be written to the hard drive."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IOException If the I/O operation fails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void update(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        oos.writeObject(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 44
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents the task given by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Task(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "        taskDescription \u003d s;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Marks this task as complete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Formats the task such that it can be outputted in a readable form for the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 29
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Stores the tasks of the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns the number of tasks present in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The number of tasks present in the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns the task present in the specific index of the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param index The target index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The task present in the specific index of the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Marks as complete the task present in the specific index of the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param index The target index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        taskList.get(index).markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Deletes the task present in the specific index of the task list and returns it."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param index The target index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The deleted task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws OutOfBoundsDeletionException If the target index is not present in the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Task deleteTask(int index) throws OutOfBoundsDeletionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return taskList.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new OutOfBoundsDeletionException(\"No task with index number \" + (index + 1) + \" on your tasklist!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param newTask The new task to be added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public List\u003cTask\u003e getMatchedTasks(String keyword) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 76
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Todo(String s) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Formats the task such that it can be outputted in a readable form for the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String mark \u003d (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return String.format(\"[T][%s] %s\", mark, taskDescription);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Shows the welcome message for when Duke is run."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Reads the next input given by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The line of user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Shows the error message of an exception."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param msg The exception\u0027s error message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void showError(String msg) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Shows the error message for situations where there is no existing task list present in the hard drive."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        System.out.println(\"Unable to access existing tasklist; initialising new tasklist instead\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Prints messages directed at the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param msg The message to be outputted to the console."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void print(String msg) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Shows the exit message for when the user quits the program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void showExitMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 56
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertEquals(\"[D][✗] return book (by: 02/02/2020 12:30)\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "                (new Deadline(\"return book\", \"02/02/2020 12:30\")).toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 11
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Parser.parse(\"blah\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 16
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void deleteTask_wrongIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "            new TaskList().deleteTask(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "            assertEquals(\"No task with index number 2 on your tasklist!\", e.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 16
    }
  }
]
