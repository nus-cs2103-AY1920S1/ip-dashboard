[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    testCompile \"org.junit.jupiter:junit-jupiter-params:5.5.1\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "aidilfbk": 30
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class AddCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected final String command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected final Task task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public AddCommand(String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        task \u003d instantiateTask();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected abstract Task instantiateTask();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.displaySuccessfullyAddedTask(\"Got it. I\u0027ve added this task: \", task, tasks.size());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 23
    }
  },
  {
    "path": "src/main/java/AddDeadlineTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class AddDeadlineTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public AddDeadlineTaskCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected Task instantiateTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String[] deadlineArgs \u003d command.split(\"(?:\\\\A| )/by\\\\b ?\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String deadlineDescription \u003d deadlineArgs[0].stripTrailing();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (deadlineDescription.isEmpty()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new EmptyTaskDescriptionException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String deadlineDueText \u003d deadlineArgs[1].stripLeading();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final LocalDateTime deadlineDue \u003d LocalDateTime.parse(deadlineDueText, dateTimeFormatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new Deadline(deadlineDescription, deadlineDue);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 20
    }
  },
  {
    "path": "src/main/java/AddEventTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class AddEventTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public AddEventTaskCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected Task instantiateTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String[] eventArgs \u003d command.split(\"(?:\\\\A| )/at\\\\b ?\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String eventDescription \u003d eventArgs[0].stripTrailing();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (eventDescription.isEmpty()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new EmptyTaskDescriptionException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String eventDateTimeText \u003d eventArgs[1].stripLeading();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final LocalDateTime eventDateTime \u003d LocalDateTime.parse(eventDateTimeText, dateTimeFormatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new Event(eventDescription, eventDateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 20
    }
  },
  {
    "path": "src/main/java/AddTodoTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class AddTodoTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public AddTodoTaskCommand(String command) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected Task instantiateTask() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String todoDescription \u003d command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (todoDescription.isEmpty()) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new EmptyTaskDescriptionException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new Todo(todoDescription);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 13
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    default boolean isExit() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 10
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(description, deadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for this Task\u0027s deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Deadline for this task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!super.equals(o)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Deadline deadline1 \u003d (Deadline) o;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return deadline.equals(deadline1.deadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Objects.hash(super.hashCode(), deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 46
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        taskIndex \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Task t \u003d tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        tasks.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.displaySuccessfullyRemovedTask(\"Noted. I\u0027ve removed this task:\", t, tasks.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 18
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final Circle displayPictureClip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        displayPicture.setClip(displayPictureClip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        db.setStyle(\"-fx-background-color: #fff\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        db.setStyle(\"-fx-background-color: #f1f1f1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 65
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class DoneCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        taskIndex \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Task t \u003d tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.displaySuccessfullyDoneTask(\"Nice! I\u0027ve marked this task as done:\", t);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 17
    }
  },
  {
    "path": "src/main/java/DoneTokenParseError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class DoneTokenParseError extends TokenParseError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DoneTokenParseError(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a new Duke instance, operating with a CLI which will load and save Tasks to the provided filePath."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Immediately tries to load the tasks from a filePath on instantiation."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A loading error will appear if Duke fails to load the tasks located at the filePath."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param filePath A Path instance for where Tasks should be loaded from and saved to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(new UiCli(), filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates a new Duke instance with a custom Ui implementation, and will load \u0026 save Tasks to the provided filePath."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Immediately tries to load the tasks from a filePath on instantiation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A loading error will appear if Duke fails to load the tasks located at the filePath."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param ui A swappable Ui implementation, could be CLI, curses TUI, JavaFX GUI, Swing GUI, AWT GUI etc."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param filePath A Path instance for where Tasks should be loaded from and saved to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Duke(Ui ui, String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        loadStoreFromFile(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.displayWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Begins the interactive loop of asking user for commands,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * executing those commands, and displaying errors if necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (storage \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new IllegalStateException(\"loadStoreFromFile() needs to be called first\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!(ui instanceof UiCli)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new IllegalStateException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \"ui must be a UiCli instance as the run() function is intended for cli usage\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        while (!isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String input \u003d ((UiCli) ui).nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            isDone \u003d consumeUserInput(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Executes a user command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param userInput A string representing the user command to execute."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Whether Duke should exit."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean consumeUserInput(String userInput) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Command c \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return c.isExit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (DukeException exc) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            ui.displayError(exc);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected void loadStoreFromFile(String filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (ui \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new IllegalStateException(\"ui must be assigned to display loading errors if needed\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        storage \u003d new Storage(Path.of(filePath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (FileIoException | TokenParseError exc) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (!(exc.getCause() instanceof NoSuchFileException)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ui.displayLoadingError(exc);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "aidilfbk": 88
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 10
    }
  },
  {
    "path": "src/main/java/EmptyTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class EmptyTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public EmptyTaskDescriptionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected LocalDateTime eventDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Event(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.eventDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(description, dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for when this Event occurs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Date and time of this Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public LocalDateTime getEventDateTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return eventDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (!super.equals(o)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Event event \u003d (Event) o;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return eventDateTime.equals(event.eventDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Objects.hash(super.hashCode(), eventDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 45
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class ExitCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.printBlock(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 11
    }
  },
  {
    "path": "src/main/java/FileIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class FileIoException extends SerializerException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public FileIoException(String message, IOException exc) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, exc);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 7
    }
  },
  {
    "path": "src/main/java/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class FindTaskCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final String searchTerm;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public FindTaskCommand(String searchTerm) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.searchTerm \u003d searchTerm.toLowerCase();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e taskResults \u003d tasks.stream().filter(task -\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return task.getDescription().toLowerCase().contains(searchTerm);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }).collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.displayTasks(\"Here are the matching tasks in your list:\", taskResults);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 19
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class ListCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void execute(List\u003cTask\u003e tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.displayTasks(\"Here are the tasks in your list:\", tasks);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            VBox ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            MainWindow mainWindowController \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            duke \u003d new Duke(new UiJavaFx(mainWindowController), \"./data/duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            mainWindowController.setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 33
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class MainWindow extends VBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        boolean shouldExit \u003d duke.consumeUserInput(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (shouldExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void addDukeMessage(String dukeOutput) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(dukeOutput, dukeImage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 54
    }
  },
  {
    "path": "src/main/java/MissingTokenParseError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class MissingTokenParseError extends TokenParseError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public MissingTokenParseError(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Map\u003cString, Class\u003c? extends Command\u003e\u003e TOKEN_TO_COMMAND \u003d Map.of("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"done\", DoneCommand.class,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"delete\", DeleteCommand.class,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"todo\", AddTodoTaskCommand.class,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"deadline\", AddDeadlineTaskCommand.class,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"event\", AddEventTaskCommand.class,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"find\", FindTaskCommand.class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Pattern COMMAND_PARSER \u003d Pattern.compile(\"\\\\A(?\u003ccommand\u003e\\\\S+)(?: (?\u003cargs\u003e.+))?\\\\z\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses the given command input to extract the intended command and the arguments for that command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param command The string representing a desired command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A Command-implementing object that can be later executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static Command parse(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Matcher m \u003d COMMAND_PARSER.matcher(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (m.find()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String commandWord \u003d m.group(\"command\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Class\u003c? extends Command\u003e commandClass \u003d TOKEN_TO_COMMAND.get(commandWord);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (commandClass !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    return commandClass.getConstructor(String.class).newInstance(m.group(\"args\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                } catch (InvocationTargetException exc) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    if (exc.getCause() instanceof DukeException) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        throw (DukeException) exc.getCause();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", exc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                } catch (ReflectiveOperationException exc) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", exc);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 51
    }
  },
  {
    "path": "src/main/java/SerializationError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class SerializationError extends SerializerException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SerializationError(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/java/SerializerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class SerializerException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SerializerException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SerializerException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 9
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final String FIELD_DELIMITER \u003d \"\\u001F\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Map\u003cString, Class\u003c? extends Task\u003e\u003e EVENT_TOKEN_TO_TYPE \u003d Map.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"T\", Todo.class,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"D\", Deadline.class,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"E\", Event.class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Map\u003cClass\u003c? extends Task\u003e, String\u003e EVENT_TYPE_TO_TOKEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // creates an immutable reverse mapping of EVENT_TOKEN_TO_TYPE and stores it as EVENT_TYPE_TO_TOKEN"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Map\u003cClass\u003c? extends Task\u003e, String\u003e builderMap \u003d new HashMap\u003c\u003e(EVENT_TOKEN_TO_TYPE.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c? extends Task\u003e\u003e kvp : EVENT_TOKEN_TO_TYPE.entrySet()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            builderMap.put(kvp.getValue(), kvp.getKey());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        EVENT_TYPE_TO_TOKEN \u003d Collections.unmodifiableMap(builderMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Storage(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience function that loads the given file path and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * parses the Tasks within, returning a new List of the Tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param file File path that contains the Tasks to load."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new List of the Tasks represented by the given file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parseFromFile(Path file) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return parseFromFile(file, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Loads the given file path and parses the Tasks within, adding to the provided List of the Tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param file  File path that contains the Tasks to load."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks Pre-existing List of Tasks to be append to."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The List of Tasks appended with the new Tasks represented by the given file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parseFromFile(Path file, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try (final Reader reader \u003d Files.newBufferedReader(file)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return parse(reader, tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException exc) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new FileIoException(String.format(\"Unable to read tasks from file: %s\", file.toString()), exc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience function that parses the Tasks from the input, returning a new List of the Tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param input Stream of characters to parse Tasks from."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new List of the Tasks represented by the given input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parse(Reader input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return parse(input, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parse the Tasks from the input, adding to the provided List of the Tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param input Stream of characters to parse Tasks from."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks Pre-existing List of Tasks to be append to."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The List of Tasks appended with the new Tasks represented by the given input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parse(Reader input, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try (final Scanner sc \u003d new Scanner(input)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Task task \u003d parseLine(sc.nextLine());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                assert task !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses a single line of text to instantiate a Task subclass instance."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param line Textual representation of a Task instance."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Task subclass instance (either Todo, Deadline or Event)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static Task parseLine(String line) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String[] tokens \u003d line.split(FIELD_DELIMITER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Class\u003c? extends Task\u003e taskType \u003d parseTypeToken(tokens[0]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final boolean isTaskDone \u003d parseDoneToken(tokens[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String taskDescription \u003d tokens[2];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (taskType \u003d\u003d Todo.class) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            task \u003d new Todo(taskDescription, isTaskDone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (taskType \u003d\u003d Deadline.class) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw new MissingTokenParseError(String.format("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"Deadline task expected 4 values, received %d instead.\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        tokens.length"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final LocalDateTime deadline \u003d parseDateTime(tokens[3]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            task \u003d new Deadline(taskDescription, isTaskDone, deadline);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (taskType \u003d\u003d Event.class) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw new MissingTokenParseError(String.format("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"Event task expected 4 values, received %d instead.\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        tokens.length"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final LocalDateTime dateTime \u003d parseDateTime(tokens[3]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            task \u003d new Event(taskDescription, isTaskDone, dateTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses the textual representation of a Task subtype (e.g. \"T\" returns Todo.class)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param typeToken The textual representation of a subtype extending from Task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The subtype extending from Task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static Class\u003c? extends Task\u003e parseTypeToken(String typeToken) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class\u003c? extends Task\u003e taskType \u003d EVENT_TOKEN_TO_TYPE.get(typeToken);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (taskType \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new TypeTokenParseError(String.format(\"\\\"%s\\\" is not a valid task type value.\", typeToken));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return taskType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses the textual representation whether a Task is marked as done."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param doneToken Expected either \"0\" for not done or \"1\" for done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Boolean for whether a Task is marked as done."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static boolean parseDoneToken(String doneToken) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        switch (doneToken) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // no need for break here, return implicitly does the same"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // no need for break here, return implicitly does the same"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new DoneTokenParseError(String.format(\"\\\"%s\\\" is not a valid done value.\", doneToken));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static LocalDateTime parseDateTime(String dateTimeToken) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return LocalDateTime.parse(dateTimeToken, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes a list of Task instances to a textual representation and writes it to the provided file path."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param file  File path to write the Tasks to."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks List of Tasks to store in the file."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void serializeToFile(Path file, Iterable\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try (final Writer output \u003d Files.newBufferedWriter(file)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.write(serialize(tasks));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException exc) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new FileIoException(String.format(\"Unable to save tasks to file: %s\", file.toString()), exc);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes a list of Task instances to a textual representation."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks List of Tasks to convert to a textual representation."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation for the given list of Tasks."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static String serialize(Iterable\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final StringJoiner output \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.add(serializeTask(t));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes a Task instance to its textual representation."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task to serialize to text."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation for the given Task."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeTask(Task t) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final StringJoiner output \u003d new StringJoiner(FIELD_DELIMITER);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String taskType \u003d serializeTypeToToken(t);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String isTaskDone \u003d serializeDoneToToken(t);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String taskDescription \u003d t.getDescription();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.add(taskType).add(isTaskDone).add(taskDescription);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Deadline d \u003d (Deadline) t;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.add(serializeDateTimeToToken(d.getDeadline()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Event e \u003d (Event) t;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.add(serializeDateTimeToToken(e.getEventDateTime()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes the subtype of a Task instance to its textual representation (e.g. an Event instance returns \"E\")."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task to serialize its subtype."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation of a Task\u0027s subtype."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeTypeToToken(Task t) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String taskType \u003d EVENT_TYPE_TO_TOKEN.get(t.getClass());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (taskType \u003d\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new UnserializableType(String.format("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \"\\\"%s\\\" is not a serializable task type.\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    t.getClass().getName()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return taskType;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes whether a Task instance is marked as done (i.e. done returns \"1\", not done returns \"0\")."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task to serialize its done state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation of the Task\u0027s done state."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeDoneToToken(Task t) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return t.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeDateTimeToToken(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return dateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return parseFromFile(filePath);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        serializeToFile(filePath, tasks);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 271
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets a user-friendly icon for whether the task is done or not done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A tick symbol when this task is done or a X symbol when this task is not done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for this task\u0027s description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The description of this task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for whether this task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Whether this task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                \u0026\u0026 description.equals(task.description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return Objects.hash(description, isDone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 63
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(tasks);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 12
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 10
    }
  },
  {
    "path": "src/main/java/TokenParseError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class TokenParseError extends SerializerException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public TokenParseError(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/java/TypeTokenParseError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class TypeTokenParseError extends TokenParseError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public TypeTokenParseError(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public abstract class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A convenience method to create a {@code StringJoiner} using the system\u0027s newline separator."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new instance of {@code StringJoiner}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static StringJoiner createStringJoiner() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A convenience method to create a {@code StringJoiner} using the system\u0027s"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * newline separator initialized with the contents of the specified string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new instance of {@code StringJoiner} with the contents of the specified string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static StringJoiner createStringJoiner(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner instance \u003d createStringJoiner();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (str !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            instance.add(str);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience function to format a Task differently based on its subtype (i.e. Todo/Deadline/Event)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task instance to represent as a string, can be Todo, Deadline or Event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A textual representation of the given Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static String formatTask(Task t) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String taskType \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (t instanceof Todo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            description \u003d t.getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Deadline d \u003d (Deadline) t;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskType \u003d \"D\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            description \u003d String.format(\"%s (by: %s)\", d.getDescription(), d.getDeadline().format(dateTimeFormatter));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Event e \u003d (Event) t;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskType \u003d \"E\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            description \u003d String.format("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    \"%s (at: %s)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    e.getDescription(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    e.getEventDateTime().format(dateTimeFormatter)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return String.format(\"[%s][%s] %s\", taskType, t.getStatusIcon(), description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints an empty line to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public abstract void println();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints the content argument with indentation."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param content Text to display to the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public abstract void println(String content);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints a horizontal line, the argument and another horizontal line"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * while taking care of indentation to create a block user interface element."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param content Text to display to the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public abstract void printBlock(String content);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience method to display the welcome message to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayWelcome() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printBlock(\"Hello! I\u0027m Duke\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        println();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Display an error when Duke is unable to read the Tasks stored in a file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param exc The reason for the failed read/parse operation."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayLoadingError(Throwable exc) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner errorMessage \u003d createStringJoiner(\"Couldn\u0027t load previously saved Tasks.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        errorMessage.add(\"Duke will start with an empty Task list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        errorMessage.add(\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        errorMessage.add(\"More details: \" + exc.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (exc.getCause() !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            errorMessage.add(exc.getCause().getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        displayError(errorMessage.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience method of displaying a DukeException."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param exc The DukeException that will be shown to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayError(DukeException exc) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        displayError(exc.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Display the error message to the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param message The error message that will be shown to the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayError(String message) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printBlock(\" ☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        println();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience method of displaying a list of tasks to the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks Tasks to be displayed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        displayTasks(null, tasks);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Display a list of tasks to the user with a title."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param title The title that is shown before the tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks Tasks to be displayed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayTasks(String title, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner taskListDisplay \u003d createStringJoiner(title);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        int listIdx \u003d 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String formattedTask \u003d String.format(\"%d.%s\", listIdx, formatTask(task));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskListDisplay.add(formattedTask);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            listIdx++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printBlock(taskListDisplay.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience method to inform the user that the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * task they had previously selected has been marked done."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param title A friendly \"marked as done\" style message to show to the user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param task  The task that was marked as done."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displaySuccessfullyDoneTask(String title, Task task) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner successMessage \u003d Ui.createStringJoiner(title);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        successMessage.add(\"  \" + formatTask(task));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printBlock(successMessage.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience method to inform the user that"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * the task they had previously selected has been removed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param title     A friendly \"removal successful\" style message to show to the user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param task      The task that has been removed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasksLeft The number of tasks the user still has left."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displaySuccessfullyRemovedTask(String title, Task task, int tasksLeft) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner successMessage \u003d Ui.createStringJoiner(title);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        successMessage.add(\"  \" + formatTask(task));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        successMessage.add(String.format(\"Now you have %d tasks in the list.\", tasksLeft));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printBlock(successMessage.toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience method to inform the user"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * that they have added a new task to their list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param title     A friendly \"task added\" style message to show to the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param task      The task that had just been added."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasksLeft The number of tasks the user still has left."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displaySuccessfullyAddedTask(String title, Task task, int tasksLeft) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner successMessage \u003d Ui.createStringJoiner(title);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        successMessage.add(\"  \" + formatTask(task));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        successMessage.add(String.format(\"Now you have %d tasks in the list.\", tasksLeft));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printBlock(successMessage.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        println();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 194
    }
  },
  {
    "path": "src/main/java/UiCli.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class UiCli extends Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final String LINE_INDENT \u003d \"\\t\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d LINE_INDENT + \"_\".repeat(60);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Pattern LINE_START_PATTERN \u003d Pattern.compile(\"^\", Pattern.MULTILINE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected PrintStream output \u003d System.out;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UiCli() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets a line of input from the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A line of input from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints a horizontal line to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints an empty line to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void println() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.println();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints the content argument with indentation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param content Text to display to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void println(String content) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        content \u003d LINE_START_PATTERN.matcher(content).replaceAll(LINE_INDENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.println(content);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints a horizontal line, the argument and another horizontal line"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * while taking care of indentation to create a block user interface element."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param content Text to display to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void printBlock(String content) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        println(content);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 65
    }
  },
  {
    "path": "src/main/java/UiJavaFx.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class UiJavaFx extends Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final MainWindow mainWindowController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private StringJoiner output \u003d createStringJoiner();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UiJavaFx(MainWindow mainWindowController) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.mainWindowController \u003d mainWindowController;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private void showMessageToUser() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String dukeOutput \u003d output.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output \u003d createStringJoiner();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.mainWindowController.addDukeMessage(dukeOutput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void println() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.add(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void println(String content) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.add(content);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void printBlock(String content) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        println(content);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayWelcome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.displayWelcome();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        showMessageToUser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayError(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.displayError(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        showMessageToUser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displayTasks(String title, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.displayTasks(title, tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        showMessageToUser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displaySuccessfullyDoneTask(String title, Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.displaySuccessfullyDoneTask(title, task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        showMessageToUser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displaySuccessfullyRemovedTask(String title, Task task, int tasksLeft) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.displaySuccessfullyRemovedTask(title, task, tasksLeft);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        showMessageToUser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void displaySuccessfullyAddedTask(String title, Task task, int tasksLeft) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super.displaySuccessfullyAddedTask(title, task, tasksLeft);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        showMessageToUser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 69
    }
  },
  {
    "path": "src/main/java/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UnknownCommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 9
    }
  },
  {
    "path": "src/main/java/UnserializableType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class UnserializableType extends SerializationError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UnserializableType(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 5
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" focusTraversable\u003d\"false\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" focusTraversable\u003d\"false\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" style\u003d\"-fx-focus-color: transparent;\" vvalue\u003d\"1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" spacing\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003cHBox prefHeight\u003d\"41.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" onAction\u003d\"#handleUserInput\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" defaultButton\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 24
    }
  },
  {
    "path": "src/test/java/AddDeadlineTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class AddDeadlineTaskCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_validParams_newDeadlineAdded() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d List.of("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"a deadline to meet\", false, LocalDateTime.of(2019, 6, 6, 0, 0))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d mutableTaskListOf();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedFileContents \u003d \"D\\u001F0\\u001Fa deadline to meet\\u001F6/6/2019 0000\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSysOut \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tGot it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  [D][✘] a deadline to meet (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNow you have 1 tasks in the list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new AddDeadlineTaskCommand(\"a deadline to meet /by 6/6/2019 0000\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expectedTasks, actualTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(expectedFileContents);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedSysOut);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingParams_exceptionThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddDeadlineTaskCommand(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddDeadlineTaskCommand(\"/by 6/6/2019 0000\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(Throwable.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddDeadlineTaskCommand(\"a deadline to meet\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_blankDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(Throwable.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddDeadlineTaskCommand(\"a deadline to meet /by\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_incorrectDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddDeadlineTaskCommand(\"a deadline to meet /by 12/31/2019 0000\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 68
    }
  },
  {
    "path": "src/test/java/AddEventTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class AddEventTaskCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_validParams_newEventAdded() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d List.of("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"an event to attend\", false, LocalDateTime.of(2019, 8, 6, 14, 0))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d mutableTaskListOf();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedFileContents \u003d \"E\\u001F0\\u001Fan event to attend\\u001F6/8/2019 1400\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSysOut \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tGot it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  [E][✘] an event to attend (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNow you have 1 tasks in the list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new AddEventTaskCommand(\"an event to attend /at 6/8/2019 1400\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expectedTasks, actualTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(expectedFileContents);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedSysOut);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingParams_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddEventTaskCommand(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddEventTaskCommand(\"/at 6/8/2019 1400\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(Throwable.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddEventTaskCommand(\"an event to attend\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_blankDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(Throwable.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddEventTaskCommand(\"an event to attend /at\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_incorrectDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddEventTaskCommand(\"an event to attend /at 12/31/2019 1400\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 68
    }
  },
  {
    "path": "src/test/java/AddTodoTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class AddTodoTaskCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_validParams_newTodoAdded() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d List.of("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"a thing that needs to be done\", false)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d mutableTaskListOf();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedFileContents \u003d \"T\\u001F0\\u001Fa thing that needs to be done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSysOut \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tGot it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  [T][✘] a thing that needs to be done\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNow you have 1 tasks in the list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new AddTodoTaskCommand(\"a thing that needs to be done\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expectedTasks, actualTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(expectedFileContents);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedSysOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingParams_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new AddTodoTaskCommand(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 39
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class CommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final OutputStream mockedSysOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final OutputStream realSysOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected Storage store;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected UiCli ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected Command command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private Path storeOutputPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void setUp(@TempDir Path tempDir) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        storeOutputPath \u003d tempDir.resolve(\"output.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        store \u003d new Storage(storeOutputPath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        System.setOut(new PrintStream(mockedSysOut));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui \u003d new UiCli();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void tearDown() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Files.deleteIfExists(storeOutputPath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        System.setOut(new PrintStream(realSysOut));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected String getSysOutContents() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return mockedSysOut.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected String getStoreFileContents() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return Files.readString(storeOutputPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected void assertFileContents(String expected) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, getStoreFileContents());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected void assertStdOutContents(String expected) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, getSysOutContents());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected void assertExit(boolean expected) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, command.isExit());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected List\u003cTask\u003e mutableTaskListOf(Task... tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 66
    }
  },
  {
    "path": "src/test/java/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class DeleteCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_validParams_taskDeleted() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d List.of(new Todo(\"a thing that needs to be done\", false));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d mutableTaskListOf("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"a todo to be deleted\", false),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"a thing that needs to be done\", false)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedFileContents \u003d \"T\\u001F0\\u001Fa thing that needs to be done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedSysOut \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNoted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  [T][✘] a todo to be deleted\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNow you have 1 tasks in the list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DeleteCommand(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expectedTasks, actualTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(expectedFileContents);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedSysOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new DeleteCommand(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_nonNumericTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new DeleteCommand(\"garbage input\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_noTaskForGivenTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DeleteCommand(\"1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            command.execute(mutableTaskListOf(), ui, store);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_outOfRangeTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DeleteCommand(\"0\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            command.execute(mutableTaskListOf(), ui, store);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_negativeTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DeleteCommand(\"-1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            command.execute(mutableTaskListOf(), ui, store);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 69
    }
  },
  {
    "path": "src/test/java/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class DoneCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_validParams_taskMarkedAsDone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d mutableTaskListOf("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"initially not done todo\", false)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d List.of("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"initially not done todo\", true)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expectedTasks, actualTasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(\"T\\u001F1\\u001Finitially not done todo\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(\"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  [T][✓] initially not done todo\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_missingTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new DoneCommand(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_nonNumericTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            new DoneCommand(\"garbage input\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_noTaskForGivenTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            command.execute(mutableTaskListOf(), ui, store);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_outOfRangeTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DoneCommand(\"0\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            command.execute(mutableTaskListOf(), ui, store);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_negativeTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new DoneCommand(\"-1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            command.execute(mutableTaskListOf(), ui, store);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 66
    }
  },
  {
    "path": "src/test/java/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class ExitCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(new ArrayList\u003c\u003e(), ui, store);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(\"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tBye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 17
    }
  },
  {
    "path": "src/test/java/FindTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class FindTaskCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_matchingKeyword_matchingTasksDisplayed() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d List.of("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"not done todo\", false),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"done todo\", true),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"short date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"long date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"short date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"long date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedDisplay \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t1.[D][✘] short date format deadline (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t2.[D][✘] long date format deadline (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t3.[E][✘] short date format event (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t4.[E][✘] long date format event (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new FindTaskCommand(\"date\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedDisplay);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_nonMatchingKeyword_noTasksDisplayed() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d List.of("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"not done todo\", false),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"done todo\", true),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"short date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"long date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"short date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"long date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedDisplay \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new FindTaskCommand(\"x\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedDisplay);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_emptyTaskList_noTasksDisplayed() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d List.of();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedDisplay \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new FindTaskCommand(\"date\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedDisplay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_blankKeyword_allTasksDisplayed() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d List.of("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"not done todo\", false),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"done todo\", true),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"short date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"long date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"short date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"long date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String expectedDisplay \u003d \"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t1.[T][✘] not done todo\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t2.[T][✓] done todo\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t3.[D][✘] not done deadline (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t4.[D][✓] done deadline (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t5.[D][✘] short date format deadline (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t6.[D][✘] long date format deadline (by: 6/6/2019 0000)\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t7.[E][✘] not done event (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t8.[E][✓] done event (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t9.[E][✘] short date format event (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t10.[E][✘] long date format event (at: 6/8/2019 1400)\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new FindTaskCommand(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(actualTasks, ui, store);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(expectedDisplay);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 114
    }
  },
  {
    "path": "src/test/java/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class ListCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_nonEmptyTaskList_tasksDisplayed() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e tasks \u003d List.of(new Todo(\"a thing that really needs to be done\", false));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new ListCommand();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(tasks, ui, store);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(\"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t1.[T][✘] a thing that really needs to be done\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_emptyTaskList_noTasksDisplayed() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e emptyTaskList \u003d List.of();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command \u003d new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        command.execute(emptyTaskList, ui, store);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertFileContents(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertStdOutContents(\"\\t____________________________________________________________\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        assertExit(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 33
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_invalidCommandText_exceptionThrown() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(\"not a valid command\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_byeCommandText_byeCommandInstance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d ExitCommand.class;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_listCommandText_listCommandInstance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d ListCommand.class;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_doneCommandTextNumericTaskNumber_doneCommandInstance() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"done 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d DoneCommand.class;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_doneCommandTextNumericNonTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"done clearlyNotANumber\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_doneCommandTextMissingTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"done\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deleteCommandTextNumericTaskNumber_deleteCommandInstance() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"delete 1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d DeleteCommand.class;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deleteCommandTextNonNumericTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"delete clearlyNotANumber\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deleteCommandTextMissingTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"delete\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_todoCommandTextValidDescription_addTodoCommandInstance() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"todo a task that needs doing\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d AddTodoTaskCommand.class;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_todoCommandTextMissingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"todo\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deadlineCommandTextValid_addDeadlineTaskInstance() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"deadline return book /by 2/12/2019 1800\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d AddDeadlineTaskCommand.class;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deadlineCommandTextMissingEverything_exceptionThrown() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"deadline\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deadlineCommandTextMissingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"deadline /by 2/12/2019 1800\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deadlineCommandTextMissingDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"deadline return book\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deadlineCommandTextNonDateDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"deadline return book /by not a date\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_deadlineCommandTextIncorrectDateTimeFormatDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"deadline return book /by 12/31/2019 0000\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_eventCommandTextValid_addEventCommandInstance() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"event return book /at 6/8/2019 1400\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class expected \u003d AddEventTaskCommand.class;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Command actual \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertSame(actual.getClass(), expected);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_eventCommandTextMissingEverything_exceptionThrown() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"event\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_eventCommandTextMissingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"event /at 6/8/2019 1400\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(EmptyTaskDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_eventCommandTextMissingDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"event project meeting\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_eventCommandTextNonDateDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"event project meeting /at not a date\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void execute_eventCommandTextIncorrectDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String input \u003d \"event project meeting /at 12/31/2019 1400\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertThrows(UnknownCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Parser.parse(input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 210
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static StringReader toStringReader(String s) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new StringReader(s);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_notDoneTodoString_newTodoInstanceMarkedAsNotDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Todo(\"not done todo\", false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"T\\u001F0\\u001Fnot done todo\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_doneTodoString_newTodoInstanceMarkedAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Todo(\"done todo\", true));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"T\\u001F1\\u001Fdone todo\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_notDoneDeadlineString_newDeadlineInstanceMarkedAsNotDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"D\\u001F0\\u001Fnot done deadline\\u001F6/6/2019 0000\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_doneDeadlineString_newDeadlineInstanceMarkedAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"D\\u001F1\\u001Fdone deadline\\u001F6/6/2019 0000\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_shortDateFormatDeadlineString_newDeadlineInstance() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Deadline(\"short date format\", false, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"D\\u001F0\\u001Fshort date format\\u001F6/6/2019 0000\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_longDateFormatDeadlineString_newDeadlineInstance() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Deadline(\"long date format\", false, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"D\\u001F0\\u001Flong date format\\u001F06/06/2019 0000\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_notDoneEventString_newEventInstanceMarkedAsNotDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"E\\u001F0\\u001Fnot done event\\u001F6/8/2019 1400\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_doneEventString_newEventInstanceMarkedAsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"E\\u001F1\\u001Fdone event\\u001F6/8/2019 1400\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_shortDateFormatEventString_newEventInstance() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Event(\"short date format\", false, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"E\\u001F0\\u001Fshort date format\\u001F6/8/2019 1400\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parse_longDateFormatEventString_newEventInstance() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of(new Event(\"long date format\", false, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parse(toStringReader(\"E\\u001F0\\u001Flong date format\\u001F06/08/2019 1400\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void parseFromFile_multilineMixedTypedTasksFile_listOfMixedTypeTasks(@TempDir Path tempDir) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Path path \u003d tempDir.resolve(\"input.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String fileContents \u003d \"T\\u001F0\\u001Fnot done todo\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nT\\u001F1\\u001Fdone todo\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F0\\u001Fnot done deadline\\u001F6/6/2019 0000\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F1\\u001Fdone deadline\\u001F6/6/2019 0000\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F0\\u001Fshort date format deadline\\u001F6/6/2019 0000\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F0\\u001Flong date format deadline\\u001F06/06/2019 0000\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F0\\u001Fnot done event\\u001F6/8/2019 1400\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F1\\u001Fdone event\\u001F6/8/2019 1400\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F0\\u001Fshort date format event\\u001F6/8/2019 1400\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F0\\u001Flong date format event\\u001F06/08/2019 1400\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e expected \u003d List.of("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"not done todo\", false),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"done todo\", true),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"short date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"long date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"short date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"long date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Files.writeString(path, fileContents);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e actual \u003d Storage.parseFromFile(path);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_todoInstanceMarkedAsNotDone_notDoneTodoString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Todo(\"not done todo\", false));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"T\\u001F0\\u001Fnot done todo\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_todoInstanceMarkedAsDone_doneTodoString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Todo(\"done todo\", true));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"T\\u001F1\\u001Fdone todo\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_deadlineInstanceMarkedAsNotDone_notDoneDeadlineString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"D\\u001F0\\u001Fnot done deadline\\u001F6/6/2019 0000\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_deadlineInstanceMarkedAsDone_doneDeadlineString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"D\\u001F1\\u001Fdone deadline\\u001F6/6/2019 0000\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_dateOfDeadlineInstance_deadlineExpectedDateFormatString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Deadline(\"date format\", false, LocalDateTime.of(2019, 6, 6, 0, 0)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"D\\u001F0\\u001Fdate format\\u001F6/6/2019 0000\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_eventInstanceMarkedAsNotDone_notDoneEventString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"E\\u001F0\\u001Fnot done event\\u001F6/8/2019 1400\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_eventInstanceMarkedAsDone_doneEventString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"E\\u001F1\\u001Fdone event\\u001F6/8/2019 1400\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serialize_dateOfEventInstance_eventExpectedDateFormatString() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e task \u003d List.of(new Event(\"date format\", false, LocalDateTime.of(2019, 8, 6, 14, 0)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"E\\u001F0\\u001Fdate format\\u001F6/8/2019 1400\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Storage.serialize(task);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void serializeToFile_listOfMixedTypeTasks_multilineMixedTypedTasksFile(@TempDir Path tempDir) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Path path \u003d tempDir.resolve(\"output.txt\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e tasks \u003d List.of("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"not done todo\", false),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Todo(\"done todo\", true),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Deadline(\"date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                new Event(\"date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0))"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"T\\u001F0\\u001Fnot done todo\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nT\\u001F1\\u001Fdone todo\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F0\\u001Fnot done deadline\\u001F6/6/2019 0000\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F1\\u001Fdone deadline\\u001F6/6/2019 0000\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nD\\u001F0\\u001Fdate format deadline\\u001F6/6/2019 0000\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F0\\u001Fnot done event\\u001F6/8/2019 1400\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F1\\u001Fdone event\\u001F6/8/2019 1400\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\nE\\u001F0\\u001Fdate format event\\u001F6/8/2019 1400\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Storage.serializeToFile(path, tasks);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d Files.readString(path);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 212
    }
  },
  {
    "path": "src/test/java/UiCliTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class UiCliTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"\\t\" + \"_\".repeat(60) + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final OutputStream mockedSysOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final OutputStream realSysOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private UiCli uiCli;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static List\u003cArguments\u003e getTasksWithExpectedStringDisplays() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return List.of("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Todo(\"not done todo\", false),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[T][✘] not done todo\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Todo(\"done todo\", true),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[T][✓] done todo\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Deadline(\"not done deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[D][✘] not done deadline (by: 6/6/2019 0000)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Deadline(\"done deadline\", true, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[D][✓] done deadline (by: 6/6/2019 0000)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Deadline(\"date format deadline\", false, LocalDateTime.of(2019, 6, 6, 0, 0)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[D][✘] date format deadline (by: 6/6/2019 0000)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Event(\"not done event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[E][✘] not done event (at: 6/8/2019 1400)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Event(\"done event\", true, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[E][✓] done event (at: 6/8/2019 1400)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Arguments.of("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        new Event(\"date format event\", false, LocalDateTime.of(2019, 8, 6, 14, 0)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        \"[E][✘] date format event (at: 6/8/2019 1400)\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                )"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        System.setOut(new PrintStream(mockedSysOut));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli \u003d new UiCli();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        System.setOut(new PrintStream(realSysOut));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void nextLine() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void printHorizontalLine_horizontalLineDisplayed() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.printHorizontalLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(HORIZONTAL_LINE, mockedSysOut.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void println_newLineDisplayed() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.println();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(\"\\n\", mockedSysOut.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void printlnContent_contentDisplayed() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.println(\"Here\u0027s some text\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(\"\\tHere\u0027s some text\\n\", mockedSysOut.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void printBlock_blockOfContentDisplayed() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere\u0027s some text\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.printBlock(\"Here\u0027s some text\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createStringJoiner_singleLineOfContent_oneContentLineDisplayed() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"Here\u0027s some text\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d UiCli.createStringJoiner(\"Here\u0027s some text\").toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void createStringJoiner_multilineContent_multipleContentLinesDisplayed() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d \"Here\u0027s some text\\nHere\u0027s more text\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String actual \u003d UiCli.createStringJoiner(\"Here\u0027s some text\").add(\"Here\u0027s more text\").toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, actual);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @MethodSource(\"getTasksWithExpectedStringDisplays\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void formatTask_taskImplementingInstance_userFriendlyTaskString(Task t, String expectedTaskString) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expectedTaskString, UiCli.formatTask(t));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayWelcome() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHello! I\u0027m Duke\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\tWhat can I do for you?\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + HORIZONTAL_LINE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayWelcome();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayLoadingError_simpleException_userFriendlyLoadingErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t ☹ OOPS!!! Couldn\u0027t load previously saved Tasks.\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\tDuke will start with an empty Task list.\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\t\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\tMore details: how many layers of abstraction are you on?\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\" + HORIZONTAL_LINE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Throwable exc \u003d new OutOfMemoryError(\"how many layers of abstraction are you on?\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayLoadingError(exc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayLoadingError_nestedException_userFriendlyLoadingErrorMessageWithInnerCauseDisplayed() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t ☹ OOPS!!! Couldn\u0027t load previously saved Tasks.\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\tDuke will start with an empty Task list.\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\t\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\tMore details: watch this\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\\thow many layers of abstraction are you on?\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\" + HORIZONTAL_LINE"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Throwable cause \u003d new OutOfMemoryError(\"how many layers of abstraction are you on?\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Throwable exc \u003d new RuntimeException(\"watch this\", cause);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayLoadingError(exc);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayError_simpleDukeException_userFriendlyErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t ☹ OOPS!!! egads!\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\" + HORIZONTAL_LINE"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        DukeException exc \u003d new UnknownCommandException(\"egads!\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayError(exc);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayError_errorMessageString_userFriendlyErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t ☹ OOPS!!! egads!\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\" + HORIZONTAL_LINE"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayError(\"egads!\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayTasks_mixedTaskTypeListWithoutTitle_userFriendlyListOfTasksDisplayed() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        int idx \u003d 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Arguments argObj : getTasksWithExpectedStringDisplays()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Object[] args \u003d argObj.get();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Task t \u003d (Task) args[0];"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            String expectedTaskString \u003d (String) args[1];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            expected +\u003d String.format(\"\\t%d.%s\\n\", idx, expectedTaskString);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            idx++;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        expected +\u003d HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayTasks(tasks);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displayTasks_mixedTaskTypeListWithTitle_titleThenUserFriendlyListOfTasksDisplayed() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere\u0027s a title!\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        int idx \u003d 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Arguments argObj : getTasksWithExpectedStringDisplays()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Object[] args \u003d argObj.get();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Task t \u003d (Task) args[0];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            String expectedTaskString \u003d (String) args[1];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            expected +\u003d String.format(\"\\t%d.%s\\n\", idx, expectedTaskString);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            idx++;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        expected +\u003d HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displayTasks(\"Here\u0027s a title!\", tasks);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @MethodSource(\"getTasksWithExpectedStringDisplays\")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displaySuccessfullyDoneTask_taskImplementingInstance_userFriendlyTaskStringDisplayed("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Task t, String expectedTaskString) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere\u0027s a title!\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  \" + expectedTaskString + \"\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displaySuccessfullyDoneTask(\"Here\u0027s a title!\", t);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @MethodSource(\"getTasksWithExpectedStringDisplays\")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displaySuccessfullyRemovedTask_taskImplementingInstance_userFriendlyTaskStringDisplayed("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Task t, String expectedTaskString) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere\u0027s a title!\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  \" + expectedTaskString + \"\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNow you have 100 tasks in the list.\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displaySuccessfullyRemovedTask(\"Here\u0027s a title!\", t, 100);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    @MethodSource(\"getTasksWithExpectedStringDisplays\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    void displaySuccessfullyAddedTask_taskImplementingInstance_userFriendlyTaskStringDisplayed("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Task t, String expectedTaskString) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String expected \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tHere\u0027s a title!\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\t  \" + expectedTaskString + \"\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + \"\\tNow you have 100 tasks in the list.\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                + HORIZONTAL_LINE + \"\\n\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        uiCli.displaySuccessfullyAddedTask(\"Here\u0027s a title!\", t, 100);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Assertions.assertEquals(expected, mockedSysOut.toString());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 265
    }
  }
]
