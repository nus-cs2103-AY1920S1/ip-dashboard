[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    options.encoding \u003d \"UTF-8\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 31,
      "-": 14
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "T|0|ca"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": "T|0|make bed again"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "D|0|make bed |Sat, 11 Dec 1999, 04:00 PM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "E|0|gala dinner |Sat, 11 Dec 1999, 06:00 PM|Mon, 20 Dec 1999, 08:00 PM"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "D|0|make bread |Thu, 11 Dec 2008, 09:00 PM"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "D|0|csamkxs |Thu, 11 Jan 1000, 08:00 PM"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "T|1|make my bed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "D|0|csakms |Mon, 11 Feb 2019, 03:00 PM"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "T|0|best"
      }
    ],
    "authorContributionMap": {
      "febee99": 9
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 45));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets User Dialogue."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param text The text to pass in."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param img  The image of User."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The User Dialog Box."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets Duke Dialogue."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param text The text to pass in."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param img The image of Duke."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The User Dialog Box."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 76
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises new duke.Duke session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Starts up the chat-box application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param stage The stage to set the scene on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses the user input and returns a response string by Duke."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param input The user input keyed in."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string generated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return c.execute(tasks, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 56,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 10
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 32
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 53
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String start;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises an AddCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param type        The type of AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param description The description of the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws DukeException In the event of empty descriptions/invalid commands/ invalid command formats."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public AddCommand(String type, String[] description) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String[] details;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.description \u003d description[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "                task \u003d new ToDo(parseDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "                task \u003d new Deadline(parseDescription(\"/by\"), parseDate(start));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "                task \u003d new Event(parseDescription(\"/at\"), parseDate(start), parseDate(end));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"The description of a \" + type + \" cannot be empty\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the AddCommand, adds the task to the LinkedList and saves it to the file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "        storage.appendTaskToFile(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\\n\" + task + tasks.getStatus());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses a string and reformats it as a date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string representation of the new date object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Date parseDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "            SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\", java.util.Locale.ENGLISH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Date myDate \u003d sdf.parse(date.replaceAll(\"-\", \"/\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "            sdf.applyPattern(\"EEE, d MMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String dateString \u003d sdf.format(myDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return sdf.parse(dateString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"Invalid date format supported. \\nPlease try again with the format below: \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    + \"11/12/1999 1600\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses the command description for to-dos and checks if it is empty/null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The parsed description only if it is not empty/null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String parseDescription() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (description.length() \u003c 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses the command description with delimiters for events and deadlines and checks if it is in"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * the correct format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param delimiter The delimiter that splits the description."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The parsed description."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws DukeException In the event that the command is in the wrong format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String parseDescription(String delimiter) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String[] details \u003d description.split(delimiter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String exceptionMessage \u003d \"\\nPlease try again with the format below: \\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + type + \" ($task_name) \" + delimiter + \" ($date/day)\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (details.length \u003c\u003d 1 \u0026\u0026 details[0].length() !\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"Incorrect format. \" + exceptionMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else if (details[0].isBlank()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"No $task_name specified. \" + exceptionMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (details[1].contains(\"to\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String[] dates \u003d details[1].split(\"to\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.start \u003d dates[0];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.end \u003d dates[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "            System.out.println(end);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "            this.start \u003d details[1];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return details[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 135
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public abstract String execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a DeleteCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the Delete Command and removes the task from the Linked List and file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Task t \u003d tasks.getList().get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "            storage.deleteTaskFromFile(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "            tasks.deleteTask(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return (\"Noted. I\u0027ve removed this task:\\n\" + t + tasks.getStatus());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"Invalid task number. Not within range\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a DoneCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the Done Command and marks the task as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "            Task t \u003d tasks.getList().get(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            // Delete from file, mark as done, reinsert into file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "            storage.deleteTaskFromFile(t);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "            storage.appendTaskToFile(t);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assert (t.getStatus()) : \"Not marked as done\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "            return (\"Nice! I\u0027ve marked this task as done:\\n\" + t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"Invalid task number. Not within range\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises an ExitCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the Exit Command and kills the duke session."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return (\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 34
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a FindCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param keyword The keyword to find in tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the Find Command and lists all existing tasks in the TaskList that contains the keyword."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Print all existing items in the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        for (Task x : tasks.getList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            if (x.toString().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "                sb.append(tasks.getList().indexOf(x) + 1).append(\". \").append(x).append(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a ListCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the List Command and lists all existing tasks in the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "        // Print all existing items in the list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        tasks.getList().forEach(x -\u003e sb.append(tasks.getList().indexOf(x) + 1).append(\". \").append(x).append(\"\\n\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 37
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String way;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a FindCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param way The way to sort the list by."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public SortCommand(String way) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.way \u003d way;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Executes the Sort Command and sorts the list by the way specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param tasks   The TaskList containing all existing tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param storage The Storage for saving tasks to file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Sorted list by \" + way + \":\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        switch (way) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case (\"name\"):"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "            tasks.sortByName().forEach(x -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    sb.append(tasks.getList().indexOf(x) + 1).append(\". \").append(x).append(\"\\n\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case (\"date\"):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            tasks.sortByDate().forEach(x -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    sb.append(tasks.getList().indexOf(x) + 1).append(\". \").append(x).append(\"\\n\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Checks if it is a bye command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return A boolean: true if it is a bye command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 51
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a DukeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 14
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.command.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Parses any user inputs and determines the type of command that was entered."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param fullCommand The command input by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The type of command entered"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws DukeException In the event that a command has an incorrect format/ empty description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "        //Parse the string to check which command it is referring to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String[] details \u003d fullCommand.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "            switch (details[0]) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new FindCommand(details[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new DoneCommand(Integer.parseInt(details[1]) - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(details[1]) - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new AddCommand(details[0], fullCommand.split(details[0]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"sort\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "                return new SortCommand(details[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-( \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "            // If the command misses a description entirely"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "            switch (details[0]) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "                throw new DukeException(\"Incorrect format. Missing a task index. \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "                        + \"Please try again with the following format: \" + details[0] + \" 3\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "                throw new DukeException(\"Incorrect format. Missing a keyword to find. \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "                        + \"Please try again with the following format: \" + details[0] + \" book\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "                throw new DukeException(\"Incorrect format. Please try again.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "            // If the delete/done commands are followed by strings instead of a number index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"Incorrect format. \\n\" + details[0]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    + \" should be followed by a number index not a string. \\ne.g. \" + details[0] + \" 3\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 66
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a Storage session."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param filepath The file to store tasks to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Reads the input file line by line to add tasks into the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The LinkedList containing all loaded tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @throws DukeException In the event that the file cannot be read properly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public LinkedList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        LinkedList\u003cTask\u003e allTasks \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "            File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String currLine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "            while ((currLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "                assert (currLine.contains(\"|\")) : \"No | detected in line\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "                allTasks.add(convertLineToTask(currLine));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "            throw new DukeException(\"Cannot parse items...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Converts a line from file to a Task object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param currLine The current line to be converted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The Task object generated from the line."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private Task convertLineToTask(String currLine) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String[] formattedText \u003d currLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        switch (formattedText[0]) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "            t \u003d new ToDo(formattedText[2]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "            t \u003d new Deadline(formattedText[2],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").parse(formattedText[3]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "            t \u003d new Event(formattedText[2],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").parse(formattedText[3]),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").parse(formattedText[4]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "            t \u003d new Task(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        if (formattedText[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Append a new task to the end of the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param t The task to be added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void appendTaskToFile(Task t) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": "            BufferedWriter output \u003d new BufferedWriter(new FileWriter(filepath, true));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "            output.append(t.toStore()).append(\"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "            output.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Deletes a task from the file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param t The task to be deleted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The deletion status boolean."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean deleteTaskFromFile(Task t) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "febee99"
        },
        "content": "        File inputFile \u003d new File(filepath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "febee99"
        },
        "content": "        File tempFile \u003d new File(\"data/temp.txt\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "febee99"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(inputFile));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "febee99"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(tempFile));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String lineToRemove \u003d t.toStore();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "febee99"
        },
        "content": "            while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "febee99"
        },
        "content": "                // trim newline when comparing with lineToRemove"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "febee99"
        },
        "content": "                String trimmedLine \u003d currentLine.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "febee99"
        },
        "content": "                if (trimmedLine.equals(lineToRemove)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "febee99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "febee99"
        },
        "content": "                writer.write(currentLine + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "febee99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "febee99"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "febee99"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "febee99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return tempFile.renameTo(inputFile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 138
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a Deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param description The deadline description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param date          The time at which the deadline is up."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Deadline(String description, Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.date \u003d (Date) date.clone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the date of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The date of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return (Date) date.clone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The string representation of a deadline for printing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The deadline string for printing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"[D]\" + super.toString() + \"\\n(by: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").format(date) + \")\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The string representation of a deadline for saving to file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The deadline string for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"D\" + super.toStore() + \"|\" + new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").format(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 51
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Date start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final Date end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises an event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param description The event description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param start       The time period during which the event occurs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Event(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.start \u003d (Date) start.clone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.end \u003d (Date) end.clone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the date of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The date of the deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return (Date) start.clone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns out the string representation of an event for printing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The event string for printing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"[E]\" + super.toString() + \" \\n(from: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").format(start) + \" \\n to:  \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").format(end) + \")\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Returns the string representation of an event for saving to file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The event string for storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"E\" + super.toStore() + \"|\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").format(start) + \"|\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + new SimpleDateFormat(\"EEE, d MMM yyyy, hh:mm a\").format(end);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 56
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param description The task description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the status icon of a task by checking if it is done or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string representation of the icon."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the status of a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The boolean status of a task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the description of a task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The description of a task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return description.trim().toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the date of a task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The date of a task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The string representation of a task for printing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The task string for printing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The string representation of a task for saving to file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The task string for storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return isDone ? \"|1|\" + this.description : \"|0|\" + this.description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 82
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    private static LinkedList\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a TaskList with allTasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param allTasks The LinkedList containing all existing tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public TaskList(LinkedList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        TaskList.allTasks \u003d allTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises an empty TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        allTasks \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the LinkedList from TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The LinkedList containing all existing tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return Collections.unmodifiableList(allTasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Adds the task to the LinkedList containing all existing tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param t The task to be newly added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        allTasks.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Deletes the task from the LinkedList containing all existing tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param t The task to be deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void deleteTask(Task t) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        allTasks.remove(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Gets the current status of task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The string representation of its status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"\\nNow you have \" + allTasks.size()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + (allTasks.size() \u003d\u003d 1 ? \" task in the list.\" : \" tasks in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Sorts the LinkedList containing all existing tasks by name."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The sorted LinkedList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public LinkedList\u003cTask\u003e sortByName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        LinkedList\u003cTask\u003e copy \u003d new LinkedList\u003c\u003e(allTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Comparator\u003cTask\u003e nameSorter \u003d Comparator.comparing(Task::getDescription);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "        copy.sort(nameSorter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Sorts the LinkedList containing all existing tasks by date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The sorted LinkedList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public LinkedList\u003cTask\u003e sortByDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "        LinkedList\u003cTask\u003e copy \u003d new LinkedList\u003c\u003e(allTasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Comparator\u003cTask\u003e nameSorter \u003d Comparator.comparing(Task::getDate,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "                Comparator.nullsFirst(Comparator.naturalOrder()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        copy.sort(nameSorter);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 88
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a to-do task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param description The description of the to-do task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The string representation of a to-do for printing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The to-do string for printing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"[T]\" + super.toString() + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * The string representation of a to-do for saving to file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The to-do string for storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return \"T\" + super.toStore();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 33
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Initialises a Ui."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Prints out the logo and welcome message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Prints out a horizontal line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": "        String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Prints out a loading error message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "        System.err.println(\"Loading error...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Prints out the given error message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param message The passed input message"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "        System.err.println(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Reads the command input by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @return The command input by the user for parsing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * Prints out the given message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "     * @param msg The passed output message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 71
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" minHeight\u003d\"-Infinity\" text\u003d\"Label\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "           textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "            \u003cFont name\u003d\"Chalkboard\" size\u003d\"13.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "            \u003cInsets/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "            \u003cInsets bottom\u003d\"2.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"2.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "febee99": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "            fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "febee99": 24
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // Test to-do Formats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_normalToDo_parsedCorrectly() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(\"Make the bed\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    ((AddCommand) Parser.parse(\"todo Make the bed\")).parseDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_emptyToDo_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ((AddCommand) Parser.parse(\"todo\")).parseDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String expected \u003d \"☹ OOPS!!! The description of a todo cannot be empty\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // Test Deadline Formats"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_emptyDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ((AddCommand) Parser.parse(\"deadline\")).parseDescription(\"/by\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String expected \u003d \"☹ OOPS!!! The description of a deadline cannot be empty\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // Test Event Formats"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_normalEvent_parsedCorrectly() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(\"Make the bed \","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    ((AddCommand) Parser.parse(\"event Make the bed /at 2/2/2019\")).parseDescription(\"/at\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "febee99"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_emptyEvent_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ((AddCommand) Parser.parse(\"event\")).parseDescription(\"/at\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String expected \u003d \"☹ OOPS!!! The description of a event cannot be empty\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_incorrectEvent_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ((AddCommand) Parser.parse(\"event Make the bed\")).parseDescription(\"/at\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String expected \u003d \"☹ OOPS!!! Incorrect format. \\nPlease try again with the format below: \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    + \"event ($task_name) /at ($date/day)\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDescription_incompleteEvent_exceptionThrown() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "febee99"
        },
        "content": "            ((AddCommand) Parser.parse(\"event Make the bed /at\")).parseDescription(\"/at\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "febee99"
        },
        "content": "            String expected \u003d \"☹ OOPS!!! Incorrect format. \\nPlease try again with the format below: \\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    + \"event ($task_name) /at ($date/day)\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "febee99"
        },
        "content": "    // Test Parsing of Dates for Deadlines and Events"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDate_AcceptedDateFormat_parsedCorrectly() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(\"Sat, 2 Feb 2019, 08:00 PM\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    ((AddCommand) Parser.parse(\"deadline Make the bed /by 2/2/2019 2000\")).parseDate());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "febee99"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void parseDate_StringDateFormat_parsedCorrectly() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "febee99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "febee99"
        },
        "content": "            assertEquals(\"2/2/2019 8pm\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "febee99"
        },
        "content": "                    ((AddCommand) Parser.parse(\"deadline Make the bed /by 2/2/2019 8pm\")).parseDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "febee99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "febee99"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "febee99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 108
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toString_normalDeadline_convertedCorrectly() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(\"[D][✘] Quiz 1 (by: tomorrow)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "                new Deadline(\"Quiz 1\", \"tomorrow\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toStore_normalDeadline_convertedCorrectly() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(\"D|0|Quiz 1|tomorrow\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": "                new Deadline(\"Quiz 1\", \"tomorrow\").toStore());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 22
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "febee99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "febee99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "febee99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "febee99"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toString_normalDeadline_convertedCorrectly() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(\"[T][✘] Quiz 1\", new ToDo(\"Quiz 1\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "febee99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "febee99"
        },
        "content": "    public void toStore_normalDeadline_convertedCorrectly() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "febee99"
        },
        "content": "        assertEquals(\"T|0|Quiz 1\", new ToDo(\"Quiz 1\").toStore());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "febee99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "febee99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "febee99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "febee99": 20
    }
  }
]
