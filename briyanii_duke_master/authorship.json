[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    archiveVersion \u003d \"0.2.1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027duke.gui.DukeLauncher\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "version \u00270.2.1\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    mainClassName \u003d \u0027duke.gui.DukeLauncher\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": " }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    compile \"org.openjfx:javafx-graphics:11:win\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    compile \"org.openjfx:javafx-graphics:11:linux\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    compile \"org.openjfx:javafx-graphics:11:mac\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    useJUnitPlatform();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 41,
      "-": 13
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "## Quick Glimpse"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![Ui.png](Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 1. Adding a Task to the Current Task List."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The following Features will allow you to add Tasks to the current Task List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![AddTask](readmeAssets/AddTask.png)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 1.1 Adding a ToDo Task to the Current Task List -- `todo` "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Adds basic ToDo Task which only contains a `description` and a `completion status` to the current Task List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`todo` `DESCRIPTION`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`todo walk the dog`\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "An `incomplete` ToDo Task with the `DESCRIPTION` `walk the dog` is added to the current TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 1.2 Adding a Deadline Task to the Current Task List -- `deadline`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Adds a Deadline Task which contains a `description` and a `date-time to complete by` to the current Task List."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`deadline` `DESCRIPTION` `/by` `DATETIME_TO_COMPLETE`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`deadline Walk the dog /by 3pm`\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "An `incomplete` Deadline Task with the `DESCRIPTION` `Walk the dog`, and `DATETIME_TO_COMEPLETE` of `3pm` is added to the current Task List`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e #### **Formatted date and time**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e If `DATETIME_TO_COMPLETE` is entered in the `dd/MM/yyyy hhmm` format, it will automatically be converted to a more readable format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e`deadline Walk the dog /by 11/11/1111 1111`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eAn `incomplete` Deadline Task with the `DESCRIPTION` `Walk the dog` and `DATETIME_TO_COMEPLETE` of `11th of NOVEMBER 2019, 11.11am` is added to the current Task List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 1.3 Adding an Event Task to the Current Task List -- `event`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Adds an Event Task which contains a `description` and a `date-time of event` to the current Task List."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`event` `DESCRIPTION` `/by` `DATETIME_OF_EVENT`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`deadline Walk the dog /at 3pm`\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "An `incomplete` Deadline Task with the `DESCRIPTION` `Walk the dog` and `DATETIME_OF_EVENT` of `3pm` is added to the current Task List."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e### **Formatted date and time**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e If `DATETIME_TO_COMPLETE` is entered in the `dd/MM/yyyy hhmm` format, it will automatically be converted to a more readable format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`event Walk the dog /at 11/11/1111 1111`\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "An `incomplete` Event Task with the `DESCRIPTION` `Walk the dog` and `DATETIME_OF_EVENT` of `11th of NOVEMBER 2019, 11.11am` is added to the current Task List."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 2. Listing the Tasks in the current Task List -- `list`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Displays all the current tasks in your current Task List. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Command**:\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "All the tasks in the current Task List will be displayed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![List](readmeAssets/List.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 3. Completing a Task in the Current Task List -- `done`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Marks a Task in the current Task List which corresponds to the given `INDEX`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`done` `INDEX`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`done` `4`\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The `4th` task in the current Task List will have it\u0027s `completion status` to set `complete`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![done](readmeAssets/Done.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 4. Removing a Task from the Current Task List -- `delete`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Removes a Task in the current Task List which corresponds to the given `INDEX`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`delete` `INDEX`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`delete` `4`\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The `4th` task in the current Task List will be removed from it."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 5. Searching for Tasks in the Current Task List."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "If you want to search for a task in the Current Task List there are two option. The first `find` is more strict, while the second `relaxfind` is less strict."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 5.1 Searching for a Task in the Current Task List with Keyword -- `find`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Lists all tasks in the current Task List which contain the given `KEYWORD` in their `descriptions`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![find](readmeAssets/find.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`find` `KEYWORD`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`find` `dog`\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "All tasks in the current Task List which contain the word `dog` in their `descriptions`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Not case sensitive**:\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e Tasks with `dog` and `DOG` in their description will both be included in the result list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 5.2 Searching for a Task in the Current Task List with Similar Keyword -- `relaxfind`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Lists all tasks in the current Task List whose `description` contains a word whose Levenshtein distance from the `KEYWORD` is less than or equal to `3`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![relaxfind](readmeAssets/relaxfind.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**:\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`relaxfind` `KEYWORD`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**:\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`relaxfind` `dog`\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**:\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "All tasks in the current Task List which contain contain a word whose Levenshtein distance from `dog` is less than or equal to `3`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e#### **Levenshtein distance**:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eIn information theory, linguistics and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e **[- Wikipedia](https://en.wikipedia.org/wiki/Levenshtein_distance)**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 6. Saving and Loading a Task List from a File. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Changes to your current Task List are automatically saved to the current Task List save file. Whenever you start Duke, the Task List will be loaded from the `DukeSave01.txt` file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 6.1 Loading a Task List from another Save File -- `load`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Sets the current Task List to the Task List loaded from a Save File with the specified `FILE_NAME` in the `DukeSaveFiles` directory. \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e![currentFilePicture](readmeAssets/CurrentFile.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eThe save file which the current task list will save to it is shown in the top left of the window."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**: \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`load` `FILE_NAME`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**: \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`load DukeSave01` "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**: \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The current Task List will be set to the Task List as saved in the `DukeSave01.txt` file under the `DukeSaveFiles` directory."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Warning**: \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eThe file must be properly formatted for the Task List to be loaded."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Valid naming format**:\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eFile names can only contain alphanumeric characters. e.g. `SavEfIle01` is valid but ``$@\\/f|le01`` is not."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Loading is optional**: \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e Duke will load the default TaskList saved at `DukeSave01.txt`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e![DefaultLoadFile](readmeAssets/Hi.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Note**: \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eIf the file does not already exist in the directory, it will be created for you."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 6.2 Saving the Current Task List to a specified File -- `save`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Saves the current TaskList to a Save File with the specified `FILE_NAME` in the `DukeSaveFiles` directory."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Syntax**: \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`save` `FILE_NAME`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**: \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`save` `MySaveFile01` \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**: \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The tasks in the current Task List will be saved to the `MySaveFile01.txt` in the `DukeSaveFiles` directory."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Warning**: \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eThis will overwrite whatever data is in the existing file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e**Note**:\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003eIf the file does not already exist in the directory, it will be created for you."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 6.3. Where is the DukeSaveFiles Directory Located?"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "If you are running from Duke from the `.jar`, the `DukeSaveFiles` directory will be created within the same directory where your `duke-x.x.x.jar` file is located, if it does not already exist."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": "downloads"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "L duke-0.1.1.jar \u003c------- .jar file"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "L DukeSaveFiles    \u003c----- DukeSaveFiles directory"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": "   L SaveFile02.txt   \u003c-- save file"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "If you are running Duke directly from the `duke.gui.DukeLauncher` `.class` file, the `DukeSaveFiles` directory will be created within the same directory as the `main` file. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": " downloads"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": " L duke"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "   L build"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     L classes"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "       L java"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         L DukeSaveFiles  \u003c ------------- DukeSaveFiles directory"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "           L SaveFile02.txt    \u003c--------- save file"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         L main     \u003c-------------------- main file"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            L duke"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "             L gui"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "               L DukeLauncher.class   \u003c-- .class file"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#### 6.4 How are the Save Files Formatted?"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "If you want to edit the save files directly ensure they are formatted in the following way:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. The first line of the file should contain the number of tasks that are in the task list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2. The subsequent lines will contain the data to create each task to populate the Task List. Tasks which require a date/time in the 4th line, otherwise only 3 lines are used. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": " number of tasks"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": " type of task               T \u003d ToDo, D \u003d Dealine, E \u003d Event"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": " completion status of task  0 \u003d incomplete, 1 \u003d complete"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": " description of task       "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": " date/time of the task"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": " ..."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": " ..."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": " ..."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Example**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``` "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "briyanii"
        },
        "content": " 2"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "briyanii"
        },
        "content": " T"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": " 0"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": " Walk the Dog "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": " D"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": " 1 "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "briyanii"
        },
        "content": " Walk the Cat "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "briyanii"
        },
        "content": " Yesterday "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "briyanii"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": "This creates a Task List with 2 Tasks:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. an `incomplete` `ToDo` task with the description `Walk the Dog`. "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2. a `complete` `Deadline` Task with the description `Walk the Cat` and a time of `Yesterday`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "briyanii"
        },
        "content": "### 7. Closing Duke -- `bye`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Closing Duke."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Command**: \u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "briyanii"
        },
        "content": "**Outcome**: \u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Duke will show a goodbye popup which you can click, or press `Enter` to close Duke."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "briyanii"
        },
        "content": "![popup](readmeAssets/popup.png)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e **Alternatively**\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003e You may simply press the close button for the window."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 249,
      "-": 11
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "briyanii": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to add a Task to the TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a Command to instruct Duke to add a Task to the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param type The Type of Command to add a Task (begins with prefix COMMAND_ADD_)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param arguments Description of the task, and Time of the task (if applicable)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AddTaskCommand(Type type, String... arguments) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(type, arguments);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * An abstract class representing an instruction for Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * \u003cp\u003eA Command is a data structure that wraps a valid instruction type for Duke, and the arguments"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * that should be used when executing an instruction of that type.\u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // the type of instruction to be executed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // the arguments to be used when executing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String[] arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param type The enumerated Type of Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param arguments The arguments for the Command, if any"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Command(Type type, String... arguments) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert type !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the arguments provided along with the Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The arguments provided along with the Command, in a String[]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String[] getArgumentsUsed() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the enumerated Type of the Command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The enumerated Type of the command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 50
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to mark a Task in the TaskList as completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a Command to instruct Duke to mark a Task in the TaskList as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param taskNumber The number corresponding to the Task in the TaskList to be marked as completed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    CompleteTaskCommand(String taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_COMPLETE_TASK, taskNumber);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert taskNumber !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to remove a Task from the TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command to instruct Duke to remove a task from the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param taskNumber The number corresponding to the Task in the TaskList to be removed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DeleteTaskCommand(String taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_DELETE_TASK, taskNumber);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert taskNumber !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeIncorrectParameterTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A DukeException to be thrown when the argument(s) provided cannot be parsed as the type required"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * when executing the command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeIncorrectParameterTypeException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the DukeException to be thrown when the argument(s) given cannot be parsed as the type required."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param typeExpected The expected type of the argument"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param argument The argument which cannot be properly parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DukeIncorrectParameterTypeException(String typeExpected, String argument) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"The following cannot be converted to \", typeExpected, \":\\n\", argument);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert typeExpected !\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert (typeExpected.length() \u003e 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert argument !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DukeMissingArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A DukeException to be thrown when the parameters required for the Command are not provided."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeMissingArgumentException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructor for the DukeException to be thrown when needed parameters for a Command are not provided."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param type The type of the Command which parameters were not all provided arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param arguments The arguments provided along with the Command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeMissingArgumentException(Type type, String[] arguments) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(missingArguments(type, arguments));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // helper method to get the parameters which are missing arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static String missingArguments(Type type, String[] argumentsProvided) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert type !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert argumentsProvided !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder message \u003d new StringBuilder(\"The following field(s) cannot be empty:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cString\u003e parameters \u003d type.getParameters();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (int argumentIndex \u003d 0; argumentIndex \u003c type.getNumberOfArgumentsExpected(); argumentIndex++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (argumentsProvided[argumentIndex] \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                message.append(\"\\n\u003e\u003e\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                message.append(parameters.get(argumentIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 37
    }
  },
  {
    "path": "src/main/java/duke/command/DukeMissingCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A DukeException to be thrown when no command is given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class DukeMissingCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the DukeException to be thrown when no command is given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeMissingCommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"No command?! I didn\u0027t w-want to do anything anyway!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 16
    }
  },
  {
    "path": "src/main/java/duke/command/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A DukeException to be thrown when the user\u0027s input cannot be parsed as a valid Command for Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the DukeException to be thrown when the user\u0027s input cannot be parsed as a valid Command for Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DukeUnknownCommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"I\u0027m sorry. I don\u0027t know what that means :c\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 16
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The Command which is used to instruct Duke to stop accepting input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command which is used to instruct Duke to stop accepting input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_EXIT);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 14
    }
  },
  {
    "path": "src/main/java/duke/command/LoadCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to load a TaskList from a specified file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command which is used to instruct Duke to load a TaskList the TaskList save file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * with the specified name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param fileName The file name of the TaskList save file to load a TaskList from."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    LoadCommand(String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_LOAD_FILE, fileName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert fileName !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Static methods for parsing user input into usable information by Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the argument provided by the user for the Date/Time parameter of the Deadline and Event Tasks, if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * possible."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cp\u003eIf the argument provided by the user is in dd/MM/yyyy HHmm format, it will be formatted into a more explicit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * format. For example, \"12/12/1212 1212\" will be formatted to \"12th of DECEMBER 1212, 12:12pm\".\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param dateTimeString The input string to be parsed, and formatted, if possible"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The formatted date and time, if the input is valid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when the input cannot be formatted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String parseDateTime(String dateTimeString) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert dateTimeString !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            LocalDateTime dateAndTime \u003d LocalDateTime.parse(dateTimeString, formatter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            StringBuilder dateTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(getIntegerOrdinal(dateAndTime.getDayOfMonth()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(\" of \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(dateAndTime.getMonth().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(dateAndTime.getYear());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(\", \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int hour \u003d dateAndTime.getHour();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int minute \u003d dateAndTime.getMinute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append((hour \u003e 12 ? hour - 12 : hour \u003d\u003d 0 ? 12 : hour));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (minute !\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                dateTime.append(\":\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                dateTime.append(minute);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dateTime.append(hour \u003c 12 ? \"am\" : \"pm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return dateTime.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeException(dateTimeString + \" is not in dd/MM/yyyy HHmm format.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Helper method to format a positive integer into it\u0027s ordinal form."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static String getIntegerOrdinal(int integer) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert (integer \u003c\u003d 31 \u0026\u0026 integer \u003e 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int remainderHundred \u003d integer % 100;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (remainderHundred \u003e 9 \u0026\u0026 remainderHundred \u003c 21) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return integer + \"th\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int remainderTen \u003d integer % 10;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            switch (remainderTen) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return integer + \"st\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return integer + \"nd\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return integer + \"rd\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return integer + \"th\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Tries to parse user input as a Command, with arguments, if any."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param input The input string to be parsed as a Command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return A Command, wrapping the user\u0027s instructions to Duke, which can instruct Duke to do some action"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when an error occurs attempting to parse the input as a valid Command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Command parseAsCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] split \u003d input.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (split[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeMissingCommandException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Type commandType \u003d extractCommandType(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (commandType \u003d\u003d Type.COMMAND_EXIT) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (commandType \u003d\u003d Type.COMMAND_SHOW_LIST) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ShowListCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] arguments \u003d extractArguments(input, commandType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_DELETE_TASK:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new DeleteTaskCommand(arguments[0]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_COMPLETE_TASK:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new CompleteTaskCommand(arguments[0]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_SEARCH:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new SearchCommand(arguments[0]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_RELAX_SEARCH:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new RelaxedSearchCommand(arguments[0]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_LOAD_FILE:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new LoadCommand(arguments[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_SAVE_FILE:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new SaveCommand(arguments[0]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AddTaskCommand(commandType, arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return null; //unreachable"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static String[] extractArguments(String input, Type commandType) throws DukeMissingArgumentException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] split \u003d input.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] argumentsProvided \u003d new String[commandType.getNumberOfArgumentsExpected()];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Iterator\u003cString\u003e delimiterIterator \u003d commandType.getDelimiters().iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int parameterCount \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String nextDelimiter \u003d (delimiterIterator.hasNext()) ? delimiterIterator.next() : \" \";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder currentParameter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (int wordIndex \u003d 1; wordIndex \u003c\u003d split.length; wordIndex++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (wordIndex \u003d\u003d split.length || split[wordIndex].equals(nextDelimiter)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String parameter \u003d currentParameter.toString().trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                argumentsProvided[parameterCount] \u003d (parameter.length() \u003e 0) ? parameter : null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (wordIndex \u003c split.length \u0026\u0026 split[wordIndex].equals(nextDelimiter)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    nextDelimiter \u003d (delimiterIterator.hasNext()) ? delimiterIterator.next() : \" \";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                currentParameter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parameterCount++;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                currentParameter.append(split[wordIndex]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                currentParameter.append(\" \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (String parameter : argumentsProvided) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (parameter \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new DukeMissingArgumentException(commandType, argumentsProvided);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return argumentsProvided;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static Type extractCommandType(String input) throws DukeUnknownCommandException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        switch (input.trim().split(\"\\\\s+\")[0]) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_SHOW_LIST;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_EXIT;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_ADD_TODO;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_ADD_EVENT;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_ADD_DEADLINE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_DELETE_TASK;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_COMPLETE_TASK;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_SEARCH;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"relaxfind\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_RELAX_SEARCH;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"load\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_LOAD_FILE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case \"save\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Type.COMMAND_SAVE_FILE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 195
    }
  },
  {
    "path": "src/main/java/duke/command/RelaxedSearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to search for a Task which contains a non case-sensitive"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * fuzzy-match to the given keyword in the TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class RelaxedSearchCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command which is used to instruct Duke to relaxed search for a Task which"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * contains a given keyword in the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param keyword The keyword the user wants to find a matching Task for in the TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    RelaxedSearchCommand(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(duke.command.Type.COMMAND_RELAX_SEARCH, keyword);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 19
    }
  },
  {
    "path": "src/main/java/duke/command/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to save a TaskList to a specified file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command which is used to instruct Duke to save the TaskList to the TaskList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * save file with the specified name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param fileName The file name of the TaskList save file to save the TaskList to."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    SaveCommand(String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_SAVE_FILE, fileName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert fileName !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 18
    }
  },
  {
    "path": "src/main/java/duke/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke to search for a Task which contains a given keyword in the TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command which is used to instruct Duke to search for a Task which"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * contains a given keyword in the TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param keyword The keyword the user wants to find a matching Task for in the TaskList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    SearchCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_SEARCH, keyword);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 18
    }
  },
  {
    "path": "src/main/java/duke/command/ShowListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Command which is used to instruct Duke display the contents of the TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ShowListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Command which is used to instruct Duke display the contents of the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ShowListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(Type.COMMAND_SHOW_LIST);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 14
    }
  },
  {
    "path": "src/main/java/duke/command/Type.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The enumeration of the type of Commands which can be given to Duke to manipulate/display"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * information about the TaskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * \u003cp\u003eThe enumeration also contains details such as the number of parameters that are expected for the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Command, the names of the parameters, and the delimiters used to separate multiple the different"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * arguments, if any.\u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_EXIT(0),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_SHOW_LIST(0),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_DELETE_TASK(1, \"task number\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_COMPLETE_TASK(1, \"task number\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_SEARCH(1, \"keyword\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_RELAX_SEARCH(1, \"keyword\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_ADD_TODO(1, \"description\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_ADD_DEADLINE(2, \"description\", \"time\", \"/by\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_ADD_EVENT(2, \"description\", \"time\", \"/at\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_LOAD_FILE(1, \"file name\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    COMMAND_SAVE_FILE(1, \"file name\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Type(int parametersExpected, String... parameterNamesAndDelimiters) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.parametersExpected \u003d parametersExpected;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        parameters \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        delimiters \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (int i \u003d 0; i \u003c parameterNamesAndDelimiters.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (i \u003c parametersExpected) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parameters.add(parameterNamesAndDelimiters[i]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                delimiters.add(parameterNamesAndDelimiters[i]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private int parametersExpected;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ArrayList\u003cString\u003e parameters;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ArrayList\u003cString\u003e delimiters;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an ArrayList of the delimiters used, if any, to to separate arguments in this a Command of this Type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return An ArrayList of the delimiters used if any, to to separate arguments in this a Command of this Type."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ArrayList\u003cString\u003e getDelimiters() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ArrayList\u003cString\u003e(delimiters);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an ArrayList of the parameter names, if any, of Command of this Type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return An ArrayList of the parameter names, if any, of Command of this Type."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ArrayList\u003cString\u003e getParameters() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ArrayList\u003cString\u003e(parameters);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the number of arguments expected for a Command of this Type."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The number of arguments expected for a Command of the Type."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int getNumberOfArgumentsExpected() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return parametersExpected;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 70
    }
  },
  {
    "path": "src/main/java/duke/error/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A DukeException is an Exception which can be thrown when an error occurs in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the DukeException to be thrown when an error occurs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param messageLines The message explaining the error which caused the DukeException to be thrown"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DukeException(String... messageLines) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(append(messageLines));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Helper method to append the varargs String provided together into one string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param segments The different Strings to be appended."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The combined String."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static String append(String... segments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (String segment : segments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assert segment !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            message.append(segment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 31
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * \u003cp\u003eThis control represents dialog from either Duke or the user. It consists of a Circle with an ImagePattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * fill to represent the speaker, and a Label to display the message from the speaker.\u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Circle icon;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String DIALOG_BOX_RESOURCE_PATH \u003d \"/view/DialogBox.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Insets DIALOGBOX_BACKGROUND_INSET \u003d new Insets(5,37.5,5,37.5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Insets LABEL_PADDING_INSET_LEFT \u003d new Insets(0,42.5,0,5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Insets LABEL_PADDING_INSET_RIGHT \u003d new Insets(5,5,5,42.5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final CornerRadii DIALOGBOX_BACKGROUND_RADII_TEN \u003d new CornerRadii(10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color DIALOGBOX_BACKGROUND_RED \u003d Color.rgb(100,0,0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color DIALOGBOX_BACKGROUND_BLUE \u003d Color.rgb(0,0,100);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color DIALOGBOX_BACKGROUND_GREEN \u003d Color.rgb(0,100,0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the dialog box."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param speakerText The speaker\u0027s text to be displayed in the dialog box"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param image The image to be used as the display picture"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private DialogBox(String speakerText, Image image) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert speakerText !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert image !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assert Paths.get(\"src\", \"main\", \"resources\", DIALOG_BOX_RESOURCE_PATH)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    .toFile().exists() : \"DialogBox.fxml file does not exist\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(DIALOG_BOX_RESOURCE_PATH));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        text.setText(speakerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        text.setPadding(LABEL_PADDING_INSET_RIGHT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // formats the display picture"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        icon.setFill(new ImagePattern(image));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // mirrors the dialog box elements orientation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        text.setPadding(LABEL_PADDING_INSET_LEFT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a dialog box formatted to display a message from the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param userText The user\u0027s message"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param image The user\u0027s display picture"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The dialog box formatted to display the user\u0027s message"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static DialogBox getUserDialog(String userText, Image image) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert userText !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert image !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DialogBox user \u003d new DialogBox(userText, image);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // sets the background to a green rounded corner box"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        user.setBackground("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new Background("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        new BackgroundFill("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_GREEN,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_RADII_TEN,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_INSET"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                )"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a dialog box formatted to display messages from Duke."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param dukeText Duke\u0027s message"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param image Duke\u0027s display picture"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The dialog box formatted to display duke\u0027s message"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static DialogBox getDukeNormalDialog(String dukeText, Image image) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert dukeText !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert image !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DialogBox duke \u003d new DialogBox(dukeText, image);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // sets the background to a blue rounded corner box"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.setBackground("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new Background("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        new BackgroundFill("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_BLUE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_RADII_TEN,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_INSET"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                )"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.flip();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return duke;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a dialog box formatted to display error messages from Duke."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param dukeErrorText Duke\u0027s error message"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param image Duke\u0027s display picture"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The dialog box formatted to display duke\u0027s error message"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static DialogBox getDukeErrorDialog(String dukeErrorText, Image image) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert dukeErrorText !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert image !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DialogBox duke \u003d new DialogBox(dukeErrorText, image);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // sets the background to a red rounded corner box"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.setBackground("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new Background("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        new BackgroundFill("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_RED,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_RADII_TEN,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                DIALOGBOX_BACKGROUND_INSET"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                )"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.flip();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return duke;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 171
    }
  },
  {
    "path": "src/main/java/duke/gui/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Launcher for the Duke GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 12
    }
  },
  {
    "path": "src/main/java/duke/gui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.ui.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A GUI for Duke using FXML/JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void start(javafx.stage.Stage stage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assert Paths.get(\"src\", \"main\", \"resources\", MainWindow.MAIN_WINDOW_RESOURCE_PATH)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    .toFile().exists() : \"MainWindow.fxml does not exist\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(MainWindow.MAIN_WINDOW_RESOURCE_PATH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.setLocation(Gui.class.getResource(MainWindow.MAIN_WINDOW_RESOURCE_PATH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AnchorPane mainWindow \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //set the current working Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // print greeting message after the stage is shown"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().activateDuke();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // tries to load task list, and display message/error"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().loadExistingTaskList(Duke.DEFAULT_SAVE_FILE_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // show the goodbye message as a popup that needs to be clicked to close duke"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().dukeActivityStatus.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (!newValue \u0026\u0026 oldValue) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    showGoodbyePopup(stage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void showGoodbyePopup(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert stage !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert stage.isShowing();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DialogBox box \u003d DialogBox.getDukeNormalDialog("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"GoodBye! Hope to see you again!\\n\\nCLICK ME or PRESS ENTER\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new Image(Gui.class.getResourceAsStream(MainWindow.DUKE_IMAGE_RESOURCE_PATH)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Scene sc \u003d new javafx.scene.Scene(box);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        sc.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Stage goodbyePopup \u003d new Stage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        goodbyePopup.setScene(sc);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        goodbyePopup.initOwner(stage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        goodbyePopup.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        goodbyePopup.initStyle(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        box.setOnMouseClicked(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        sc.setOnKeyPressed(keyEvent -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (keyEvent.getCode().equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        goodbyePopup.show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 93
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.ui.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The main window of the JavaFX GUI for Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String MAIN_WINDOW_RESOURCE_PATH \u003d \"/view/MainWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String USER_IMAGE_RESOURCE_PATH \u003d \"/images/user_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String DUKE_IMAGE_RESOURCE_PATH \u003d \"/images/duke_icon.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label dukeStorageName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    SimpleBooleanProperty dukeActivityStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Image userImage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Image dukeImage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        dukeActivityStatus \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userImage \u003d new Image(Gui.class.getResourceAsStream(USER_IMAGE_RESOURCE_PATH));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        dukeImage \u003d new Image(Gui.class.getResourceAsStream(DUKE_IMAGE_RESOURCE_PATH));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        dialogContainer.setPrefWidth(scrollPane.getPrefViewportWidth());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the current working Duke instance which the GUI will interface with."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param duke The Duke instance to interface with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert duke !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        dukeStorageName.textProperty().bind(duke.observableStorageName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Tries to load an TaskList from the save file with the specified name, and displays the Response from the attempt."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param fileName The file from which to try to load a TaskList from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void loadExistingTaskList(String fileName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert fileName !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Response response \u003d duke.getResponse(\"load \" + fileName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!response.wasCausedByError()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            display(DialogBox.getDukeNormalDialog(response.toString(), dukeImage));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            display(DialogBox.getDukeErrorDialog(response.toString(), dukeImage));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Displays the Response from activating Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void activateDuke() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Response response \u003d duke.greet();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert response !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        dukeActivityStatus.set(response.isActive());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert response.toString() !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        display(DialogBox.getDukeNormalDialog(response.toString(), dukeImage));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Response res \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (res.wasCausedByError()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            displayError(input, res.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            displayDialog(input, res.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        dukeActivityStatus.set(res.isActive());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Displays the user\u0027s message, and Duke\u0027s response message."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param input The user\u0027s message to Duke"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param response Duke\u0027s response to the user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void displayDialog(String input, String response) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert response !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        display("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DialogBox.getDukeNormalDialog(response, dukeImage)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Displays the user\u0027s message and Duke\u0027s error response message."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param input The user\u0027s message to Duke which causes an error"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param response Duke\u0027s error response message"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void displayError(String input, String response) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert response !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        display("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DialogBox.getDukeErrorDialog(response, dukeImage)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void display(DialogBox... dialogs) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (DialogBox dialog : dialogs) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            dialogContainer.getChildren().add(dialog);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 150
    }
  },
  {
    "path": "src/main/java/duke/io/DukeCorruptFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The DukeException to be thrown when a the file at the given file path is not formatted"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * in the way the method reading the file expects it to be formatted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeCorruptFileException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the DukeException thrown when a file is not formatted in the way the method that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * throws this expects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param file The file path of the badly formatted file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeCorruptFileException(File file) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"The save file at \", file.getAbsolutePath(), \" is formatted incorrectly.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file.isFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 23
    }
  },
  {
    "path": "src/main/java/duke/io/DukeInvalidFileNameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The DukeException to be thrown when the file name used for a save file contains non-alphanumeric"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * characters."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeInvalidFileNameException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the DukeException thrown when a file is not formatted in the way the method that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * throws this expects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param fileName The file path of the badly formatted file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeInvalidFileNameException(String fileName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(fileName + \" is not a valid Duke save file name. Duke save file names should only \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                + \"consist of alphanumeric characters.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 21
    }
  },
  {
    "path": "src/main/java/duke/io/DukeInvalidLoadFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The DukeException to be thrown when a Duke TaskList save file cannot be loaded."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeInvalidLoadFilePathException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs DukeException to be thrown when a Duke TaskList save file cannot be loaded."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param path The file path of the save file which cannot bo loaded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeInvalidLoadFilePathException(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"Your task list could not be loaded from \" + path);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert path !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 19
    }
  },
  {
    "path": "src/main/java/duke/io/DukeInvalidSaveFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The DukeException to be thrown when a Duke TaskList cannot be saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeInvalidSaveFilePathException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs DukeException to be thrown when a Duke TaskList save file cannot be loaded."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param path The file path of the save file which cannot bo loaded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeInvalidSaveFilePathException(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"Changes to your task list cannot be saved to \" + path);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert path !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 19
    }
  },
  {
    "path": "src/main/java/duke/io/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.net.URLDecoder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.nio.charset.UnsupportedCharsetException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * File handler responsible for reading/writing from/to files in order to load/save the TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * in between sessions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String DEADLINE_FLAG \u003d \"D\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String EVENT_FLAG \u003d \"E\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String TODO_FLAG \u003d \"T\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String COMPLETE \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INCOMPLETE \u003d \"0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private File saveFile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a file reader-writer to load/save a TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param fileName The name of the save file for the Task List"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Storage(String fileName) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert fileName !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert Pattern.matches(\"\\\\p{Alnum}+\", fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!fileName.matches(\"\\\\p{Alnum}+\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeInvalidFileNameException(fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String parentDirectoryPath \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String saveFolderName \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String storageName \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        File saveFolder \u003d new File(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            parentDirectoryPath \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    URLDecoder.decode("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            new File(getClass().getProtectionDomain().getCodeSource()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                    .getLocation().getPath()).getParent(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \"utf-8\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            saveFolderName \u003d \"DukeSaveFiles\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            storageName \u003d fileName + \".txt\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            saveFolder \u003d Paths.get(parentDirectoryPath, saveFolderName).toFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnsupportedEncodingException exception) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeInvalidLoadFilePathException(saveFolder.getAbsolutePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (saveFolder.exists() \u0026\u0026 !saveFolder.isDirectory()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            while (!saveFolder.isDirectory()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                saveFolder \u003d Paths.get(parentDirectoryPath, saveFolderName + \"(\" + Integer.toString(count) + \")\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .toFile();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        saveFile \u003d Paths.get(parentDirectoryPath, saveFolderName, storageName).toFile();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        saveFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // create new file if does not already exist"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (saveFile.createNewFile()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new FileWriter(saveFile).append(\"0\").flush();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeInvalidSaveFilePathException(saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the file name of the Storage with the file extension."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the file name of the Storage with the file extension."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return saveFile.getName();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Helper method to write a Deadline Task to a file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static void writeFromDeadline(Deadline task, FileWriter file) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        writeLinesToFile("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                file,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DEADLINE_FLAG,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.isComplete() ? COMPLETE : INCOMPLETE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.getDescription(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.time);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Helper method to write a Event Task to a file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static void writeFromEvent(Event task, FileWriter file) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        writeLinesToFile("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                file,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                EVENT_FLAG,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.isComplete() ? COMPLETE : INCOMPLETE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.getDescription(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.time);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Helper method to write a ToDo Task to a file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static void writeFromToDo(ToDo task, FileWriter file) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        writeLinesToFile("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                file,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                TODO_FLAG,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.isComplete() ? COMPLETE : INCOMPLETE,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.getDescription());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Helper method to write multiple lines to a file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static void writeLinesToFile(FileWriter file, String... lines) throws IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            file.append(line);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            file.append(System.lineSeparator());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the TaskList read from the save file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The TaskList read from data stored in the file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException Exception thrown when error occurs when trying to recreate the task list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public TaskList loadTaskList() throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            BufferedReader bufferedFileReader \u003d new BufferedReader(new FileReader(saveFile));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // populate tasklist"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (int tasksRemaining \u003d Integer.parseInt(bufferedFileReader.readLine());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                 tasksRemaining \u003e 0; tasksRemaining--) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                switch (bufferedFileReader.readLine()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                case DEADLINE_FLAG:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    taskList.add(readAsDeadline(bufferedFileReader));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                case EVENT_FLAG:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    taskList.add(readAsEvent(bufferedFileReader));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                case TODO_FLAG:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    taskList.add(readAsToDo(bufferedFileReader));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    throw new DukeCorruptFileException(saveFile);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeInvalidLoadFilePathException(saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (IOException | NumberFormatException exception) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeCorruptFileException(saveFile);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Deadline readAsDeadline(BufferedReader file) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Deadline(!file.readLine().equals(INCOMPLETE), file.readLine(), file.readLine());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ToDo readAsToDo(BufferedReader file) throws IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ToDo(!file.readLine().equals(INCOMPLETE), file.readLine());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Event readAsEvent(BufferedReader file) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Event(!file.readLine().equals(INCOMPLETE), file.readLine(), file.readLine());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Writes/Saves the TaskList into the save file."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param taskList The TaskList to be saved in the file"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when error occurs while trying to save the TaskList"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert taskList !\u003d null : \"tasklist is null\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FileWriter fileWriter;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fileWriter \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // list size"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fileWriter.append(Integer.toString(taskList.size()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fileWriter.append(System.lineSeparator());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // per task in list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (Task task : taskList.list()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                switch (task.getClass().getSimpleName()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                case \"ToDo\":"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    writeFromToDo((ToDo) task, fileWriter);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                case \"Event\":"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    writeFromEvent((Event) task, fileWriter);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                case \"Deadline\":"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    writeFromDeadline((Deadline) task, fileWriter);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeInvalidSaveFilePathException(saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // FileNotFoundException should the only exception, if it is not then:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            System.err.println(exception.getMessage());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 253
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Task in a TaskList that represents a Deadline with a description and a time/date which the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Deadline Task is expected to be completed by."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Deadline Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the Deadline Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param time        The time/date that the Deadline Task needs to be completed by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Deadline(String description, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert time !\u003d null : \"Deadline time cannot be null\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d Parser.parseDateTime(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the Deadline Task, with a specified completion status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param isComplete  The completion status of the Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param time        The time/date the Task needs to be completed by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Deadline(boolean isComplete, String description, String time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert time !\u003d null : \"Deadline time cannot be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d Parser.parseDateTime(time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskCompletionStatus \u003d isComplete;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the string representation of the Deadline Task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The string representation of the Deadline Task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new StringBuilder(\"[D]\").append(super.toString())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\" (by: \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(time)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\")\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 62
    }
  },
  {
    "path": "src/main/java/duke/tasklist/DukeNoCorrespondingTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A DukeException to be thrown when an error occurs because a Command tries to modify a Task which does"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * not exist in the TaskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class DukeNoCorrespondingTaskException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs the exception to be thrown when an error occurs because a Command tries to modify"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * a Task which does not exist in the TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param number The number which does not correspond to a Task in the TaskList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    DukeNoCorrespondingTaskException(int number) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"The following number does not correspond to a task in the list: \\n\", Integer.toString(number));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 19
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Task in a TaskList that represents an Event with a description and a time/date which the Event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Task occurs at."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs an Event task, with description and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param time The time the event occurs at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert time !\u003d null : \"Event time cannot be null\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d Parser.parseDateTime(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs an Event task with a specified completion status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param isComplete The completion status of the Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the Event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param time The time the Event occurs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Event(boolean isComplete, String description, String time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert time !\u003d null : \"Event time cannot be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d Parser.parseDateTime(time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskCompletionStatus \u003d isComplete;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the string representation of the Event Task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The string representation of the Event Task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new StringBuilder(\"[E]\").append(super.toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\" (at: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(time)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\")\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 65
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Abstract class representing a Task which can be added to a TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean taskCompletionStatus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskCompletionStatus \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null : \"Task description cannot be null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskDescription \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the completion status of the Task to true (is complete)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return This Task which has been marked as completed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Task complete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskCompletionStatus \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the Task has been completed, or false otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if the Task is complete, false otherwise"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return taskCompletionStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the description of the Task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The description of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the string representation of the Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The string representation of the Task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new StringBuilder(\"[\").append((taskCompletionStatus ? \"✓\" : \"✗\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\"] \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(taskDescription)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 62
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.DukeIncorrectParameterTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.util.Match;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A list to contain Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a copy of the ArrayList used to store the Tasks in the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return An ArrayList which contains the Tasks in the TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ArrayList\u003cTask\u003e list() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ArrayList\u003cTask\u003e(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The number of Tasks in the TaskList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Deletes the Task which number in the TaskList corresponds to the number provided, if any."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param id The number corresponding to the Task in the TaskList to be deleted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Task which was deleted from the TaskList, if the number corresponds"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when an error occurs when trying to delete a Task from the TaskList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Task delete(int id) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert id \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return taskList.remove(id - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // task id does not correspond to task in list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeNoCorrespondingTaskException(id);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Deletes the Task which number in the TaskList corresponds to the number provided, if any."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param id The number corresponding to the Task in the TaskList, as a String"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Task which was deleted from the list, if the number corresponds."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when an error occurs when trying to delete the Task from the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Task delete(String id) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert id !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return delete(Integer.parseInt(id));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeIncorrectParameterTypeException(\"Integer\", id);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds the given Task to the TaskList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param task The Task to be added to the TaskList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Task which was added to the TaskList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Task add(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Marks as completed the Task which corresponds to the number provided, if it exists."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param id The number corresponding to the task in the task list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Task which was marked as completed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when an error occurs when trying to mark the task as completed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Task complete(int id) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert id \u003e 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return taskList.get(id - 1).complete();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeNoCorrespondingTaskException(id);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Marks as completed the Task which corresponds to the number provided, if it exists."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param id The number corresponding to the Task in the TaskList, as a String"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Task which was marked as completed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when an error occurs when trying to mark the Task as completed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Task complete(String id) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert id !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return complete(Integer.parseInt(id));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeIncorrectParameterTypeException(\"Integer\", id);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an ArrayList containing the Tasks which have descriptions contains the keyword"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * (not case-sensitive)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param keyword The keyword to search for in the TaskList"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return An ArrayList containing the Tasks which contain the matching Tasks"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ArrayList\u003cTask\u003e search(String keyword) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //searches the string representation of the class"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (String word : task.getDescription().split(\"\\\\s+\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (!word.equalsIgnoreCase(keyword)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an ArrayList containing the Tasks with descriptions containing a word that"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * fuzzy-matches the keyword provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param keyword The keyword to search for in the TaskList"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return An ArrayList containing the matching Tasks"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ArrayList\u003cTask\u003e relaxedSearch(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (String word : task.getDescription().split(\"\\\\s+\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (Match.matchFuzzyIgnoreCase(keyword, word, 3)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    results.add(task);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 164
    }
  },
  {
    "path": "src/main/java/duke/tasklist/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Task in a TaskList that represents a simple ToDo Task with a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a ToDo Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a ToDo Task, with the specified completion status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param isComplete  The completion status of the Task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description The description of the Task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ToDo(boolean isComplete, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskCompletionStatus \u003d isComplete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the string representation of the ToDo Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The string representation of the ToDo Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"[T]\".concat(super.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 39
    }
  },
  {
    "path": "src/main/java/duke/ui/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.CompleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.LoadCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.RelaxedSearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.ToDo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.tasklist.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.value.ObservableStringValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * The driver class that uses the various components of Duke to represent a Task managing assistant."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String DEFAULT_SAVE_FILE_NAME \u003d \"DukeSave01\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableStringValue observableStorageName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private SimpleStringProperty storageName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storageName \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        observableStorageName \u003d new ObservableStringValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public String get() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return storageName.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public String getValue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return storageName.getValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public void addListener(ChangeListener\u003c? super String\u003e changeListener) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                storageName.addListener(changeListener);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public void addListener(InvalidationListener invalidationListener) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                storageName.addListener(invalidationListener);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public void removeListener(ChangeListener\u003c? super String\u003e changeListener) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                storageName.removeListener(changeListener);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public void removeListener(InvalidationListener invalidationListener) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                storageName.removeListener(invalidationListener);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the Response from activating Duke."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Response from activating Duke"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Response greet() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        isActive \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Response.fromString(\"Hi, I\u0027m Duke! What can I do for you?\", isActive);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the Response from Duke as a result of the given user input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param input The user input given to Duke"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the Response from Duke as a result of the given user input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!isActive) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Response.fromError(new DukeException(\"not accepting commands\"), isActive);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Response.fromString(executeCommand(Parser.parseAsCommand(input)), isActive);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Response.fromError(dukeException, isActive);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if duke is active, and false otherwise."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return true if duke is active, and false otherwise"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Determines which Command handler to use, then executes the provided Command with that handler."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param command The Command to be executed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws DukeException when the Command cannot be properly executed for some reason"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeCommand(Command command) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // all commands passed to this method have all required parameter non-empty"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        switch (command.getType()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeAddTaskCommand((AddTaskCommand) command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_COMPLETE_TASK:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeCompleteTaskCommand((CompleteTaskCommand) command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_DELETE_TASK:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeDeleteTaskCommand((DeleteTaskCommand) command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_LOAD_FILE:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeLoadCommand((LoadCommand) command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_SAVE_FILE:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeSaveCommand((SaveCommand) command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_SEARCH:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeSearchCommand((SearchCommand) command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_RELAX_SEARCH:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeSearchCommand((RelaxedSearchCommand) command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_SHOW_LIST:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeShowListCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return executeExitCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeAddTaskCommand(AddTaskCommand command) throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] parameters \u003d command.getArgumentsUsed();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        switch (command.getType()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_TODO:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            task \u003d new ToDo(parameters[0]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_DEADLINE:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task \u003d new Deadline(parameters[0], Parser.parseDateTime(parameters[1]));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task \u003d new Deadline(parameters[0], parameters[1]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case COMMAND_ADD_EVENT:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task \u003d new Event(parameters[0], Parser.parseDateTime(parameters[1]));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task \u003d new Event(parameters[0], parameters[1]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DukeException(\"This task type is not supported yet\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"Got it! I\u0027ve added this task to the list:\\n%s\\nNow you have %d task(s) in your list.\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                taskList.size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeCompleteTaskCommand(CompleteTaskCommand command) throws DukeException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] parameters \u003d command.getArgumentsUsed();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Task task \u003d taskList.complete(parameters[0]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return String.format(\"Got it! I\u0027ve marked this task as done:\\n%s\", task.toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeDeleteTaskCommand(DeleteTaskCommand command) throws DukeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] parameters \u003d command.getArgumentsUsed();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Task task \u003d taskList.delete(parameters[0]);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"Got it! I\u0027ve removed this task from the list:\\n%s\\nNow you have %d task(s) in your list.\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                taskList.size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeSearchCommand(SearchCommand command) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] parameters \u003d command.getArgumentsUsed();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d taskList.search(parameters[0]);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int resultsCount \u003d results.size();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (resultsCount \u003e 0) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int width \u003d Integer.toString(resultsCount).length();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            output.append(\"Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (Task task : results) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                output.append(String.format(\"\\n%0\" + width + \"d. %s\", count, task.toString()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new StringBuilder(\"There are no matching tasks in your list!\\n\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    .append(\"Maybe you can check your query, or use relaxfind instead!\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeSearchCommand(RelaxedSearchCommand command) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] parameters \u003d command.getArgumentsUsed();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d taskList.relaxedSearch(parameters[0]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int resultsCount \u003d results.size();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (resultsCount \u003e 0) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int width \u003d Integer.toString(resultsCount).length();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            output.append(\"Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (Task task : results) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                output.append(String.format(\"\\n%0\" + width + \"d. %s\", count, task.toString()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return \"There are no matching tasks in your list!\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeShowListCommand() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int taskCount \u003d taskList.size();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (taskCount \u003c 1) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return \"Your list is empty!\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int width \u003d Integer.toString(taskCount).length();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            output.append(\"Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (Task task : taskList.list()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                output.append(String.format(\"\\n%0\" + width + \"d. %s\", count, task.toString()));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeExitCommand() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"GoodBye! Hope to see you again!\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeLoadCommand(LoadCommand loadCommand) throws DukeException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert loadCommand !\u003d null;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert loadCommand.getArgumentsUsed()[0] !\u003d null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String saveFileName \u003d loadCommand.getArgumentsUsed()[0];"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storage \u003d new Storage(saveFileName);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        taskList \u003d storage.loadTaskList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storageName.set(storage.getFileName());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // task list successfully loaded"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"Your TaskList was successfully loaded from: \" + storage.getFileName();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String executeSaveCommand(SaveCommand saveCommand) throws DukeException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert saveCommand !\u003d null;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert saveCommand.getArgumentsUsed()[0] !\u003d null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String saveFileName \u003d saveCommand.getArgumentsUsed()[0];"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Storage storage \u003d new Storage(saveFileName);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // task list successfully loaded"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"Your TaskList was successfully saved to: \" + storage.getFileName();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 322
    }
  },
  {
    "path": "src/main/java/duke/ui/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Response represents a Response from Dukes as a result of some user input, as well as some"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * information about the current State of Duke after trying to carry out the instruction the input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Optional\u003cDukeException\u003e dukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Response(String message, DukeException dukeException, boolean isActive) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert message !\u003d null : \"Response message cannot be null\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.dukeException \u003d Optional.ofNullable(dukeException);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.isActive \u003d isActive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a Response from Duke if a Command is successfully executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cp\u003eThe Response contains the message Duke responds with, and the activity status of Duke.\u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param message The message from Duke due to successfully executing a Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param isActive True if Duke is able to accept further Commands, false otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Response from successfully executing a Command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static Response fromString(String message, boolean isActive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert message !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Response(message, null, isActive);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a Response from Duke if a Command was not successfully executed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cp\u003eThe Response contains the error message from Duke after an error occurs after user input, and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * the activity status of Duke at the time of the Response.\u003c/p\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param dukeException The DukeException thrown when the error occurs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param isActive True if Duke is able to respond to further Commands, false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Response due to the error that occurred in Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static Response fromError(duke.error.DukeException dukeException, boolean isActive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert dukeException !\u003d null : \"DukeException cannot be null for error Response\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Response(dukeException.getMessage(), dukeException, isActive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the Response was a result of a DukeException, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if the Response was a result of a DukeException, False otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean wasCausedByError() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return dukeException.isPresent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if Response indicated Duke can take further user input, false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if Response indicates Duke can take further user input, False otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the String representation of the Response."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the String representation of the Response."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 80
    }
  },
  {
    "path": "src/main/java/duke/util/Match.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Utility methods for String comparisons."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Match {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns True if both Strings provided are an exact match."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word1 The word to match with word2."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word2 The word to match with word1."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if word1 matches word2, otherwise False."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean matchExact(String word1, String word2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return word1.equals(word2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns True if both Strings provided are a non-case-sensitive match."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word1  The word to match with word2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word2 The word to match with word1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if both Strings are provided are a non-case-sensitive, False otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean matchExactIgnoreCase(String word1, String word2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return word1.equalsIgnoreCase(word2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns True if the two provided words have a levenshtein distance less than or equal to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * a given threshold."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word1 The word to match with word2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word2 The word to match with word1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param threshold The maximum levenshtein distance between words for them to consider a match."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if the levenshtein distance between the two provided words is within the threshold."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean matchFuzzy(String word1, String word2, int threshold) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return levenshteinDistance(word1, word1.length(), word2, word2.length()) \u003c\u003d threshold;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns True if the words provided, ignoring case, have a levenshtein distance below or equal"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * to the threshold."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word1 The word to match with word2"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param word2 The word to match with word1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param threshold The maximum levenshtein distance between words for them to consider a match."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return Returns True if the words provided, ignoring case, have a levenshtein distance below the threshold."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean matchFuzzyIgnoreCase(String word1, String word2, int threshold) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return matchFuzzy(word1.toLowerCase(), word2.toLowerCase(), threshold);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Calculate the Levenshtein distance between two words."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Reused from https://en.wikipedia.org/wiki/Levenshtein_distance#Recursive with minor modifications"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static int levenshteinDistance(String word, int wordLen, String other, int otherLen) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (wordLen \u003d\u003d 0 || otherLen \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Math.max(wordLen, otherLen);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int cost \u003d word.charAt(wordLen - 1) \u003d\u003d other.charAt(otherLen - 1) ? 0 : 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int deleteFromWord \u003d levenshteinDistance(word, wordLen - 1, other, otherLen) + 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int deleteFromOther \u003d levenshteinDistance(word, wordLen, other, otherLen - 1) + 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int deleteFromBoth \u003d levenshteinDistance(word, wordLen - 1, other, otherLen - 1) + cost;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Math.min(deleteFromWord, Math.min(deleteFromOther, deleteFromBoth));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 73
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cLabel fx:id\u003d\"text\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-label-padding: 10;\" text\u003d\"Label\" textFill\u003d\"#f5f5f5\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003cCircle fx:id\u003d\"icon\" fill\u003d\"#ffffff00\" radius\u003d\"37.5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cLabel fx:id\u003d\"dukeStorageName\" prefHeight\u003d\"20.0\" prefWidth\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefViewportWidth\u003d\"480.0\" prefWidth\u003d\"500.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/opaqueInsets\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cInsets bottom\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cHBox prefHeight\u003d\"50.0\" prefWidth\u003d\"500.0\" AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"430.0\" promptText\u003d\"enter command\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"70.0\" style\u003d\"-fx-background-radius: 0;\" text\u003d\"SEND\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 49
    }
  },
  {
    "path": "src/test/java/duke/io/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.error.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.ShowListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Class to test certain functionality of the Parser class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that the parseDateTime method can output the properly formatted date and time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * when a valid input is given."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDateTime_validInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(\"12th of DECEMBER 1212, 12:12pm\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Parser.parseDateTime(\"12/12/1212 1212\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(\"12th of DECEMBER 1212, 12:12am\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Parser.parseDateTime(\"12/12/1212 0012\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(\"23rd of JANUARY 2019, 11pm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Parser.parseDateTime(\"23/01/2019 2300\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail(\"Should not have thrown exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that the parseDateTime method throws an exception when it tries to parse and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * format an invalid input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDateTime_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"1212\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/12/1212\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12pm\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"never\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that the parseDateTime method throws an exception when the input looks valid but"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * cannot be formatted to the expected format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDateTime_validLookingInvaliButdInput_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/00/1212 1212\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/13/1212 1212\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"99/12/1212 1212\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"00/12/1212 1212\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/12/0000 1212\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that the parseAsCommand method throws a DukeMissingParameterException when the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * it tries to parse a input as a command, but the required arguments are not provided."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseAsCommand_missingParameter_exceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //task commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"todo \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"deadline \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"deadline task\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"deadline /by time\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"event \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"event task \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"event /at time\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //other commands"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"done \"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(duke.command.DukeMissingArgumentException.class, () -\u003e Parser.parseAsCommand(\"delete \"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that the parseAsCommand method properly ignores redundant input when attempting to parse"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * commands which require 0 arguments."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseAsCommand_redundantArgumentForNoArgumentCommands_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(Parser.parseAsCommand(\"list 1\") instanceof ShowListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(Parser.parseAsCommand(\"bye 1\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(Parser.parseAsCommand(\"list a\") instanceof ShowListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(Parser.parseAsCommand(\"bye a\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail(\"Should return a command ignoring the redundant arguments\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that the parseAsCommand method properly returns an AddTaskCommand when the input is valid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseAsCommand_nonParseableTimeForDeadlineOrEvent_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(Parser.parseAsCommand(\"deadline task /by time\") instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(Parser.parseAsCommand(\"event task /at time\") instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail(\"Should return without formatting the time argument into dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 122
    }
  },
  {
    "path": "src/test/java/duke/ui/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Class to test functionality of certain methods in the Duke class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static Duke duke;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setUpDuke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.greet();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"load DukeTestSave01\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @AfterEach()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void clearTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        while (!duke.getResponse(\"delete 1\").wasCausedByError()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            continue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that typos and unsupported commands result in an error Response from Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_invalidInputs_responseCausedByError() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deAdline\").wasCausedByError());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"ddasd\").wasCausedByError());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"what\").wasCausedByError());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"\").wasCausedByError());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"   \").wasCausedByError());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"fi nd\").wasCausedByError());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that bad syntax for commands to add tasks result in an error Response from Duke for the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * following situations."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003eMissing arguments\u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003eWrong delimiter\u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_invalidAddTaskInputs_responseCausedByError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"todo\").wasCausedByError());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deadline\").wasCausedByError());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deadline a\").wasCausedByError());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deadline a /by\").wasCausedByError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deadline /by\").wasCausedByError());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deadline /by 12\").wasCausedByError());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"deadline a /at 12\").wasCausedByError());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"event\").wasCausedByError());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"event a\").wasCausedByError());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"event a /at\").wasCausedByError());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"event /at\").wasCausedByError());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"event /at 12\").wasCausedByError());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"event a /by 12\").wasCausedByError());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that bad syntax for commands to delete tasks result in an error Response from Duke for the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * following situations."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003eno argument\u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003enegative integer\u003c/li\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003ezero\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003eargument not parsable as integer\u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_invalidDeleteInputs_responseCausedByError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"delete\").wasCausedByError());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"delete a\").wasCausedByError());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that bad syntax for commands to complete tasks result in an error Response from Duke for the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * following situations."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003eno argument\u003c/li\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003enegative integer\u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003ezero\u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003eargument not parsable as integer\u003c/li\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_invalidCompleteInputs_responseCausedByError() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"done\").wasCausedByError());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"done a\").wasCausedByError());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that bad syntax for commands to search for tasks result in an error Response from Duke"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * when no argument is given."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_invalidSearchInputs_responseCausedByError() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"find\").wasCausedByError());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that proper syntax for commands to search for tasks result in a normal Response from Duke."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_validSearchInput_responseNotCausedByError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"find afsdf\").wasCausedByError());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"find afsdf\").wasCausedByError());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"find 1\").wasCausedByError());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that parameter-less commands (list, bye) result in a normal Response from Duke in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * following situations."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003enormal usage (no argument given)\u003c/li\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cli\u003ewith redundant argument given\u003c/li\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_validParameterlessCommand_responseNotCausedByError() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"list\").wasCausedByError());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"list asdas\").wasCausedByError());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"bye\").wasCausedByError());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setUpDuke();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"bye asdas\").wasCausedByError());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that after the command to exit is given to Duke, that it is inactive and"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * response to further input is caused by error."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_exitCommand_dukeInactiveAndResponseCausedByError() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // while accepting input"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.isActive());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // stops accepting input after exit"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"bye\").wasCausedByError());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(duke.getResponse(\"bye\").wasCausedByError());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // after stop accepting input"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.isActive());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that proper syntax for commands to add tasks result in an normal Response from Duke."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_validAddTaskInputs_responseNotCausedByError() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"todo test1\").wasCausedByError());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"deadline test2 /by 12\").wasCausedByError());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"deadline test3 /by 12/12/1212 1212\").wasCausedByError());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"event test4 /at 12\").wasCausedByError());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"event test5 /at 12/12/1212 1212\").wasCausedByError());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that proper syntax for commands to delete tasks result in an normal Response from Duke."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_validDeleteTaskInputs_responseNotCausedByError() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"todo test1\").wasCausedByError();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"deadline test2 /by 12\").wasCausedByError();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"deadline test3 /by 12/12/1212 1212\").wasCausedByError();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"event test4 /at 12\").wasCausedByError();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"event test5 /at 12/12/1212 1212\").wasCausedByError();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 5\").wasCausedByError());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 4\").wasCausedByError());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 3\").wasCausedByError());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 1\").wasCausedByError());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 1\").wasCausedByError());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that proper syntax for commands to mark tasks as complete results in an normal Response from Duke."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getResponse_validCompleteTaskInputs_responseNotCausedByError() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"todo test1\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"deadline test2 /by 12\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"deadline test3 /by 12/12/1212 1212\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"event test4 /at 12\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"event test5 /at 12/12/1212 1212\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 5\").wasCausedByError());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 4\").wasCausedByError());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 3\").wasCausedByError());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 2\").wasCausedByError());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 1\").wasCausedByError());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Test that tasks are saved between sessions."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void exitAndSetUp_manipulateLastSessionsTasks_responseNotCausedByError() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"todo a\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"todo b\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        duke.getResponse(\"bye\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setUpDuke();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 1\").wasCausedByError());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"done 2\").wasCausedByError());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 1\").wasCausedByError());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(duke.getResponse(\"delete 1\").wasCausedByError());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 223
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "if [ -e \"./actual$1.txt\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    rm actual$1.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "if ! javac -classpath ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "java -classpath ../bin Duke \u003c input$1.txt \u003e actual$1.txt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "diff actual$1.txt output$1.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    echo \"Test $1 result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    echo \"Test $1 result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "briyanii": 34
    }
  }
]
