[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 1,
      "-": 15
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "E | 0 | sad | 02/12/2019 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "E | 0 | sad | 02/12/2019 1800"
      }
    ],
    "authorContributionMap": {
      "hooncp": 2
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateTimeSplit \u003d by.toString().split(\"T\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String date \u003d dateTimeSplit[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] timeSplit \u003d time.split(\":\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String dataBy \u003d dateSplit[2] + \"/\" + dateSplit[1] + \"/\" + dateSplit[0] + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                + timeSplit[0] + timeSplit[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"D | \" + super.toDataString() + \" | \" + dataBy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 35
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String command \u003d ui.readCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                if (command.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    end();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                } else if (command.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                } else if (command.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    taskList.list();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String[] commandSplit \u003d command.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String deadline \u003d \"deadline\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String event \u003d \"event\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String todo \u003d \"todo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    if (commandSplit[0].equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        int index \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        taskList.done(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    } else if (commandSplit[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        int index \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        taskList.delete(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    } else if (commandSplit[0].equalsIgnoreCase(deadline)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        String details \u003d command.substring(deadline.length()).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        if (details.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                            throw new InputMismatchException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        String[] detail \u003d details.split(\" /by \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        Task addTask \u003d new Deadline(detail[0], detail[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        taskList.add(addTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    } else if (commandSplit[0].equalsIgnoreCase(event)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        String details \u003d command.substring(event.length()).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        if (details.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                            throw new InputMismatchException(\"The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        String[] detail \u003d details.split(\" /at \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        Task addTask \u003d new Event(detail[0], detail[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        taskList.add(addTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    } else if (commandSplit[0].equalsIgnoreCase(todo)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        String details \u003d command.substring(todo.length()).trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        if (details.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                            throw new InputMismatchException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        Task addTask \u003d new Todo(details);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        taskList.add(addTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        throw new InputMismatchException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                System.out.println(\"OOPS!!! \" + e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                System.out.println(\"OOPS!!! \" + e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                System.out.println(\"OOPS!!! \" + e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            command \u003d ui.readCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        storage.rewriteData();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Duke duke \u003d new Duke(\"C:\\\\Users\\\\hooncp\\\\Desktop\\\\duke\\\\data\\\\data.txt\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 90,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateTimeSplit \u003d at.toString().split(\"T\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String date \u003d dateTimeSplit[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] timeSplit \u003d time.split(\":\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String dataAt \u003d dateSplit[2] + \"/\" + dateSplit[1] + \"/\" + dateSplit[0] + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                + timeSplit[0] + timeSplit[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"E | \" + super.toDataString() + \" | \" + dataAt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 34
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "//    private String parse() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 8
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            while ((line \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                String regex \u003d \" \" +  \"\\\\|\"  + \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                String[] data \u003d line.split(regex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                if (data[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    t \u003d new Todo(data[2], changeStringToBoolean(data[1]));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                } else if (data[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    t \u003d new Deadline(data[2], data[3], changeStringToBoolean(data[1]));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    t \u003d new Event(data[2], data[3], changeStringToBoolean(data[1]));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            System.out.println(\"Attempting to load from: \" + filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean changeStringToBoolean(String number) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (number.equals(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void rewriteData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                fw.write(t.toDataString() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            System.out.println(\"Saving data to: \" + filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 55
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return (isDone ? \"+\" : \"-\"); //return + symbols means done - symbol means not done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String mark \u003d \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return mark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return isDone ? \"1 | \" + getDescription() : \"0 | \" + getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 45
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    //Lists out all the tasks in Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void list() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalArgumentException(\"Nothing found in list\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        int number \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            String outputString \u003d number + \". \" + task.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            System.out.println(outputString);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            number++;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String outputString \u003d \"Got it. I\u0027ve added this task: \\n\" + task.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(outputString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void done(int number) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (number \u003e tasks.size() || number \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The task number does not exist.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Task task \u003d tasks.get(number - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void delete(int number) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (number \u003e tasks.size() || number \u003c\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The task number does not exist.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Task task \u003d tasks.get(number - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        tasks.remove(number - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 52
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return \"T | \" + super.toDataString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 19
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        System.out.println(\"Error, file not found\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 28
    }
  },
  {
    "path": "test-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "event sad /at 02/12/2019 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hooncp": 4
    }
  },
  {
    "path": "test-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hooncp": 21
    }
  }
]
