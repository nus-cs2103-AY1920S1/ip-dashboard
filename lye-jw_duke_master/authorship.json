[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/dude issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "lye-jw": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "test {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 28,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "# DUDE User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "###### by Lye Jian Wen"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "## Introduction "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Welcome to DUDE, a simple and intuitive personal assistant! DUDE helps you maintain a list of various types of tasks (To-dos, Deadlines and Events) to boost your time management and productivity. DUDE engages you in a personalised manner; you give it short requests, and it responds conversationally."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "## Starting Out"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. Double-click on `DUDE.jar` to start the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "2. You should see the following screen:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   ![DudeStartUp](DudeStartup.png)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "3. To enter commands, key them into the bar at the bottom and click `Send`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "4. If you\u0027re transferring the app from another device and want to keep an existing task list from that device, copy the `data` folder from the old install directory to the new one."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "## Features and Command Usage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "**Note: All **(single-word) commands** are case-sensitive, but their **details are case-insensitive***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 1. Add a To-do: `todo`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Adds a `Todo` task to the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `todo TODO_DESCRIPTION`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "`todo Go to the gym`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![AddTodo](DudeAddTodo.png)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 2. Add a Deadline: `deadline`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Adds a `Deadline` task to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `deadline DEADLINE_DESCRIPTION /by END_TIME`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        where `END_TIME` can be a date and time or a phrase like `next week` that specifies the Deadline\u0027s end time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `deadline Find love /by 12/12/2019 2359`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `deadline Finish Lab Assignment /by Impossible deadline`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![AddDeadline](DudeAddDeadline.png)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 3. Add an Event: `event`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Adds an Event task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `event EVENT_DESCRIPTION /at EVENT_PERIOD`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        where `EVENT_PERIOD` can be a date and time or a phrase like `Sunday 2-4pm` that specifies the period of the Event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `event Date with imaginary girlfriend :\u0027) /at Saturday 10am-2pm`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `event Robot Takeover /at 05.08.2918 2 PM`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![AddEvent](DudeAddEvents.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 4. Update task: `update`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Updates a task\u0027s details (description or time for Deadline and Event)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `update TASK_NUMBER | UPDATE_FIELD UPDATE_VALUE`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        where `UPDATE_FIELD` is `desc` or `time`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `update 4 | desc:Keep sleeping`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `update 3 | time:NEVER`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![AddEvent](DudeUpdateTask.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 5. List all tasks: `list`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Lists all current tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `list`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![List](DudeList.png)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 6. Clone task: `clone`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Clones (creates duplicate of) a task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `clone TASK_NUMBER`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `clone 9`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![AddEvent1](DudeClone1.png) ![AddEvent2](DudeClone2.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 7. Mark tasks as Done: `done`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Sets a task status to `done` (`[ ]` to `[+]`)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `done TASK_NUMBER`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `done 5`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![SetDone](DudeSetAsDone.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 8. Delete task: `delete`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Deletes a task from the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `delete TASK_NUMBER`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `delete 10`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![Delete](DudeDelete.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "### 9. Exit: `bye`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Exits the application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Format: `bye`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "![Delete](DudeBye.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "After the above response from DUDE, the window closes."
      }
    ],
    "authorContributionMap": {
      "lye-jw": 97,
      "-": 9
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 dukeCommand could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@rem Get dukeCommand-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@rem Slurp the dukeCommand line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@rem Setup the dukeCommand line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 4,
      "-": 80
    }
  },
  {
    "path": "src/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo FIRST"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline SECOND /by 20/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline THIRD /by 20/12/2019 0600 PM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline FOURTH /by 20/12/2019 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline FIFTH /by 20/12/2019 next week"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event SIXTH /at 10/12/2019 0600"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event SEVENTH /at 10/12/2019 06:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event EIGHTH /at 10/12/2019 6 PM"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 6"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline dsafdsf/by dafdsf"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event dhfgaf /atsgringsfg"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 3 5 6"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 4 6 6"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 31
    }
  },
  {
    "path": "src/main/java/dude/Dude.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Dude extends Application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Initializes Duke object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Dude() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.filePath \u003d new File(\"\").getAbsolutePath() + \"/data/duke.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui \u003d new Ui(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Parser.setFilePath(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Set up display window components"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        setupScrollPane();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        setupDialogContainer();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        setupInputTextField();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        setupSendButton();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane mainLayout \u003d setupAnchorPaneLayout();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Create Stage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        createStage(primaryStage, mainLayout);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui \u003d new Ui(dialogContainer, userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage \u003d new Storage(filePath, dialogContainer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void setupScrollPane() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.setPrefSize(400, 560);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void setupDialogContainer() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void setupInputTextField() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput.setPrefWidth(335.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput.setPrefHeight(35.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void setupSendButton() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        sendButton.setPrefWidth(60.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        sendButton.setPrefHeight(35.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private AnchorPane setupAnchorPaneLayout() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return mainLayout;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void createStage(Stage primaryStage, AnchorPane mainLayout) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        primaryStage.setTitle(\"DUDE\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        primaryStage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        primaryStage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Handles reading of input and input and producing of output."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String fullCommand \u003d ui.readInput();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printUserInput();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(de.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 137,
      "-": 1
    }
  },
  {
    "path": "src/main/java/dude/DudeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DudeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DudeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 8
    }
  },
  {
    "path": "src/main/java/dude/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Application.launch(Dude.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 12
    }
  },
  {
    "path": "src/main/java/dude/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Adds a Task of type Todo, Deadline, Event or clone of existing item to the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String addType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Initializes instance of AddCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param addType Type of Task to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param userInput Input entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param inputSplit String array of user input split by spaces."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param filePath Path of save file on hard disk to be written to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public AddCommand(String addType, String userInput, String[] inputSplit, String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.addType \u003d addType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Adds new Task of type Todo, Deadline, Event or clone of existing item to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param tasks List of Tasks to be added to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param ui Ui class that handles printing to user interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param storage Storage class that handles writing to save file on hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws DudeException If input has invalid format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        switch (addType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            addTodo(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            addDeadline(tasks, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            addEvent(tasks, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"clone\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            addClone(tasks, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assert false : \"Invalid item in external save file\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // throw new AssertionError(\"Invalid item in external save file\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void addTodo(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (inputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Exception if no description after \"todo\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new DudeException(\":( OOPS!!! The description of a todo cannot be empty.\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Todo todo \u003d new Todo(userInput.replace(\"todo \", \"\"), 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        tasks.addToList(todo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String writeStringT \u003d todo.getType() + \" \" + 0 + \" \" + todo.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage.writeToFile(filePath, writeStringT, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printAddNotification(todo.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void addDeadline(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (!userInput.contains(\" /by \")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Exception for invalid deadline format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new DudeException(\":( OOPS!!! For deadline please use the format\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\\"deadline description /by end time\\\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String[] splitStringD \u003d userInput.split(\" /by \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        LocalDateTime inputDateD \u003d Parser.convertToDate(splitStringD[1], Parser.dateFormats);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String inputDateStrD \u003d inputDateD \u003d\u003d null ? splitStringD[1]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                : inputDateD.format(Parser.OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Deadline deadline \u003d new Deadline(splitStringD[0].replace(\"deadline \", \"\"), 0,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                inputDateStrD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        tasks.addToList(deadline);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String writeStringD \u003d deadline.getType() + \" 0\" + \" \" + deadline.getDescription() + \" | \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + deadline.getEndTime() + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage.writeToFile(filePath, writeStringD, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printAddNotification(deadline.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void addEvent(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (!userInput.contains(\" /at \")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Exception for invalid deadline format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new DudeException(\":( OOPS!!! For event please use the format\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\\"event description /at period\\\"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String[] splitStringE \u003d userInput.split(\" /at \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        LocalDateTime inputDateE \u003d Parser.convertToDate(splitStringE[1], Parser.dateFormats);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String inputDateStrE \u003d inputDateE \u003d\u003d null ? splitStringE[1]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                : inputDateE.format(Parser.OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Event event \u003d new Event(splitStringE[0].replace(\"event \", \"\"), 0,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                inputDateStrE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        tasks.addToList(event);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String writeStringE \u003d event.getType() + \" 0\" + \" \" + event.getDescription() + \" | \" + event.getEventPeriod()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage.writeToFile(filePath, writeStringE, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printAddNotification(event.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void addClone(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (inputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if there is no task number or multiple words after \"clone\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DudeException(\":( OOPS!!! Please specify number of a single task to clone.\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int specifiedClone \u003d Integer.parseInt(inputSplit[1]); // throws NumberFormatException if not int"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (specifiedClone \u003c 1 || specifiedClone \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if task number is beyond current number of tasks"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DudeException(\":( OOPS!!! Please specify valid task number.\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task originalTask \u003d tasks.getElement(specifiedClone - 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task clonedTask;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String writeStringCBack;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (originalTask instanceof Deadline) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                clonedTask \u003d new Deadline(originalTask.getDescription(), 0,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        ((Deadline) originalTask).getEndTime());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                writeStringCBack \u003d  \" | \" + ((Deadline) clonedTask).getEndTime() + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } else if (originalTask instanceof Event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                clonedTask \u003d new Event(originalTask.getDescription(), 0,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        ((Event) originalTask).getEventPeriod());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                writeStringCBack \u003d \" | \" + ((Event) clonedTask).getEventPeriod() + \"\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                assert originalTask instanceof Todo;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                clonedTask \u003d new Todo(originalTask.getDescription(), 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                writeStringCBack \u003d \"\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String writeStringC \u003d clonedTask.getType() + \" 0\" + \" \" + clonedTask.getDescription()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + writeStringCBack;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks.addToList(clonedTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.writeToFile(filePath, writeStringC, true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printAddNotification(clonedTask.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(\":( OOPS!!! Please specify task number as one integer only.\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 151
    }
  },
  {
    "path": "src/main/java/dude/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Base class for classes that execute logic based on user commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String[] inputSplit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Sets up class attributes common across subclasses of Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param filePath Path of save file on hard disk to be written to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param inputSplit String array of user input split by spaces."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Command(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.inputSplit \u003d inputSplit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Command(String[] inputSplit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.inputSplit \u003d inputSplit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DudeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 34
    }
  },
  {
    "path": "src/main/java/dude/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Deletes a Task from the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DeleteCommand(String[] inputSplit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(inputSplit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Deletes Task specified with its number in the list by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param tasks List of Tasks to be deleted from."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param ui Ui class that handles printing to user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param storage Storage class that handles writing to save file on hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws DudeException If command has invalid format: not \"delete\" followed by a single integer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (inputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if there is no task number or multiple words after \"delete\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DudeException(\":( OOPS!!! Please specify number of a single task to delete.\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int specifiedDel \u003d Integer.parseInt(inputSplit[1]); // will throw NumberFormatException if not int"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task delTask \u003d tasks.getElement(specifiedDel - 1); // throws IndexOutOfBoundsException if invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks.deleteFromList(specifiedDel - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printDeleteNotification(delTask.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Write to file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.overwriteFile(tasks.toArrayList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(\":( OOPS!!! Please specify task number as one integer only.\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(\":( OOPS!!! Please specify valid task number.\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 46
    }
  },
  {
    "path": "src/main/java/dude/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Changes a Task\u0027s status to done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DoneCommand(String[] inputSplit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(inputSplit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Marks Task specified with its number in the list by the user as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param tasks List of existing Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param ui Ui class that handles printing to user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param storage Storage class that handles writing to save file on hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws DudeException If command has invalid format: not \"done\" followed by a single integer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (inputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if there is no task number or multiple words after \"done\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DudeException(\":( OOPS!!! Please specify number of a single task to mark as done.\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int specifiedDone \u003d Integer.parseInt(inputSplit[1]); // throws NumberFormatException if not int"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task doneTask \u003d tasks.getElement(specifiedDone - 1); // throws IndexOutOfBoundsException if invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            doneTask.setDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printDoneNotification(doneTask.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Write to file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.overwriteFile(tasks.toArrayList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(\":( OOPS!!! Please specify task number as one integer only.\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(\":( OOPS!!! Please specify valid task number.\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 46
    }
  },
  {
    "path": "src/main/java/dude/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ExitCommand(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Terminates the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Thread.sleep() and Timeout.SECONDS.sleep() don\u0027t work as System shuts down without printing exit message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Use ScheduledExecutorService to make System exit after a delay, after exit message is printed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ScheduledExecutorService exe \u003d Executors.newSingleThreadScheduledExecutor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Runnable command \u003d () -\u003e System.exit(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // schedule() takes Runnable, delay, unit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        exe.schedule(command, 2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        exe.shutdown();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 33
    }
  },
  {
    "path": "src/main/java/dude/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Searches for list items containing a keyword and returns them in a list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public FindCommand(String[] inputSplit, String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(inputSplit);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DudeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (inputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new DudeException(\":( OOPS!!! Please provide a keyword to find.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d tasks.toArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        List\u003cTask\u003e temp \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                taskArrayList.parallelStream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .filter(t -\u003e t.getDescription().toLowerCase().contains(keyword.toLowerCase()))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printSearchList(temp);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 37
    }
  },
  {
    "path": "src/main/java/dude/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Displays all existing Tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printTaskList(tasks.toArrayList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 20
    }
  },
  {
    "path": "src/main/java/dude/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Updates an item in the list with new details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateCommand(String filePath, String userInput, String[] inputSplit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Updates item in the list with new details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param tasks List of Tasks from which item is to be updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param ui Ui class that handles printing to user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param storage Storage class that handles writing to save file on hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (!userInput.contains(\" | \") || !userInput.contains(\":\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DudeException(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int taskNo \u003d Integer.parseInt(inputSplit[1]);   // throws NumberFormatException if not int"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task updatingTask \u003d tasks.getElement(taskNo - 1);   // throws IndexOutOfBoundsException if out of list range"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String[] inputSplitUpdate \u003d userInput.split(\" \\\\| \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String[] inputSplitUpdateValue \u003d inputSplitUpdate[1].split(\":\", 2); // Splits at 1st \":\" occurrence"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            switch (inputSplitUpdateValue[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"desc\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                String originalDesc \u003d updatingTask.getDescription();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                updatingTask.setDescription(inputSplitUpdateValue[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                ui.printUpdateNotification(updatingTask.toString(), \"desc\", originalDesc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                storage.overwriteFile(tasks.toArrayList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                if (updatingTask instanceof Todo) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    throw new DudeException(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    updateTimeForValidTasks(tasks, ui, storage, updatingTask, inputSplitUpdateValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DudeException(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(\":( OOPS!!! To update please use the format\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\\"update (task number) | (update field):(update value)\\\"\\n\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"-task number: Integer number of task to be updated. (Must exist in list!)\\n\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"-update field: Field \\\"desc\\\" for all tasks, or \\\"time\\\" for deadline and event only.\\n\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"-update value: Value to update field to.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void updateTimeForValidTasks(TaskList tasks, Ui ui, Storage storage, Task updatingTask,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                                         String[] inputSplitUpdateValue) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String originalTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        LocalDateTime inputDateU \u003d Parser.convertToDate(inputSplitUpdateValue[1], Parser.dateFormats);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String inputDateStrU \u003d inputDateU \u003d\u003d null ? inputSplitUpdateValue[1]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                : inputDateU.format(Parser.OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (updatingTask instanceof Deadline) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            originalTime \u003d ((Deadline) updatingTask).getEndTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ((Deadline) updatingTask).setEndTime(inputDateStrU);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assert updatingTask instanceof Event;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            originalTime \u003d ((Event) updatingTask).getEventPeriod();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ((Event) updatingTask).setEventPeriod(inputDateStrU);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printUpdateNotification(updatingTask.toString(), \"time\", originalTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage.overwriteFile(tasks.toArrayList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 86
    }
  },
  {
    "path": "src/main/java/dude/fxgui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.fxgui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Initializes a dialog box in the GUI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param text Text to be displayed in Label."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param img Image to be displayed in ImageView."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param type Indication of whether dialog box is for \"user\" or \"duke\" dialog."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DialogBox(String text, Image img, String type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Circle clipping starts from top left corner of image"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (\"user\".equals(type)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            this.setBackground(new Background(new BackgroundFill(Color.LIGHTSKYBLUE, new CornerRadii(20.0),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    new Insets(5, 5, 5, 5))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            this.setBackground(new Background(new BackgroundFill(Color.KHAKI, new CornerRadii(20.0),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    new Insets(5, 5, 5, 5))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return new DialogBox(text, img, \"user\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Produces a duke dialog box that is flipped to the left side of the interface."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param text Text contained by the dialog box."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param img Image representing duke."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        var db \u003d new DialogBox(text, img, \"dude\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assert db.getAlignment() \u003d\u003d Pos.TOP_LEFT : \"Wrong alignment for Duke Dialog box\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 87
    }
  },
  {
    "path": "src/main/java/dude/fxgui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.fxgui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userSleipnir.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeGhidorah.jpg\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String response \u003d getResponse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"BIDIBIDIBIDI \" + input + \" BIDIBIDIBIDI\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 50
    }
  },
  {
    "path": "src/main/java/dude/helper/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.command.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Processes user input into Commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static DateTimeFormatter dateFormats \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy HH:mm\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy HH:mm\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy HH:mm\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy hh:mm\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy hh:mm\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy hh:mm\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy h a\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy h a\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy h a\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy hhmm a\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy hhmm a\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy hhmm a\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy HHmm\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy HHmm\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy Hmm\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy Hmm\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy hhmm\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy hhmm\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy hhmm\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd MMMM yyyy HHmm\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/M/yyyy\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-M-yyyy\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.M.yyyy\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd MMMM yyyy\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static DateTimeFormatter OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Converts user input into their relevant Command subclasses for processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param userInput Input from the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @return Command object to process input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws DudeException If first word of input is not \"list\", \"done\", \"todo\", \"deadline\", \"event\", \"delete\", \"bye\"."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static Command parse(String userInput) throws DudeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (\"bye\".equals(userInput)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new ExitCommand(filePath, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String[] inputSplit \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        switch (inputSplit[0]) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new DoneCommand(inputSplit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"todo\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"deadline\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"event\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"clone\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"clone\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new DeleteCommand(inputSplit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new FindCommand(inputSplit, userInput.replaceFirst(\"find \", \"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new UpdateCommand(filePath, userInput, inputSplit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Exception if invalid instruction"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new DudeException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Converts String of certain formats to Date object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param dateString  String to be converted to Date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param dateFormats DateTimeFormatter specifying format patterns to parse input String."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @return Date converted from String."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static LocalDateTime convertToDate(String dateString, DateTimeFormatter dateFormats) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return LocalDateTime.parse(dateString, dateFormats);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DateTimeParseException de) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static void setFilePath(String filePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Parser.filePath \u003d filePath;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 111
    }
  },
  {
    "path": "src/main/java/dude/helper/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Handles reading from and writing to save file on hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Storage(String filePath, VBox dialogContainer) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.dialogContainer \u003d dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Produces ArrayList of Tasks containing items listed in save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @return ArrayList of Tasks from file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws IOException If enclosing file directory or file itself does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws NoSuchElementException If there is no description after type and isDone in save file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException, NoSuchElementException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        File listFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        listFile.createNewFile(); // Directory data needs to exist already"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(listFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String type \u003d fileScanner.next();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int isDone \u003d Integer.parseInt(fileScanner.next());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String remaining \u003d fileScanner.nextLine().trim();   // throws NoSuchElementException if no description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String[] remainingSplit \u003d remaining.split(\" \\\\| \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                tasks.add(new Todo(remaining, isDone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                tasks.add(new Deadline(remainingSplit[0], isDone, remainingSplit[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                tasks.add(new Event(remainingSplit[0], isDone, remainingSplit[1]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new AssertionError(\"Invalid item in external save file\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // assert false : \"Invalid item in external save file\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Writes to save file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param filePath Directory path of save file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param textToAdd String to add to save file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param isAppend Determines whether String is appended to existing file contents or added to a new file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void writeToFile(String filePath, String textToAdd, boolean isAppend) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            FileWriter fw \u003d isAppend ? new FileWriter(filePath, true) : new FileWriter(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new Ui(dialogContainer, null)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .printError(\":( Failed to save changes to file. Please try again.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Overwrites save file with a new file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param listOfTasks Tasks used to populate list in new file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void overwriteFile(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String saveToFile \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        for (Task t : listOfTasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            saveToFile +\u003d String.format(\"%s %d %s\", t.getType(), t.getIsDone(), t.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (\"D\".equals(t.getType())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                saveToFile +\u003d \" | \" + ((Deadline) t).getEndTime();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } else if (\"E\".equals(t.getType())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                saveToFile +\u003d \" | \" + ((Event) t).getEventPeriod();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            saveToFile +\u003d \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        writeToFile(filePath, saveToFile, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 105
    }
  },
  {
    "path": "src/main/java/dude/helper/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.fxgui.DialogBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Handles reading from user input and printing to user interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String separationLine \u003d \"__\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/userSleipnir.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeGhidorah.jpg\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Initializes UI instance with a VBox that contains dialog boxes and TextField for user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param dialogContainer VBox that UI should write to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param userInput TextField that UI should read user input from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Ui(VBox dialogContainer, TextField userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.dialogContainer \u003d dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Ui(TextField userInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Displays welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String welcomeLine \u003d logo + \"\\nHello! I\u0027m DUDE!\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(welcomeLine, duke));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(readInput(), user));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String message \u003d \"Error loading from file. Initiating with empty Task list.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, duke));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printError(String message) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, duke));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Displays list of existing tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param tasks ArrayList of Tasks to be displayed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String list \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            list +\u003d \"\\n\" + (tasks.indexOf(task) + 1) + \". \" + task.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(list, duke));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printDoneNotification(String doneTask) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String notification \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"    \" + doneTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(notification, duke));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Prints notification when task is added to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param addTask Task to be added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param listSize Current size of the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printAddNotification(String addTask, int listSize) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String notification \u003d \"Got it. I\u0027ve added this task:\\n\" + \"    \" + addTask + \"\\nNow you have \" + listSize"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \" tasks in the list.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(notification, duke));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Prints notification when task is deleted from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param delTask Task to be deleted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param listSize Current size of the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printDeleteNotification(String delTask, int listSize) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String notification \u003d \"Noted. I\u0027ve removed this task:\\n\" + \"    \" + delTask + \"\\nNow you have \" + listSize"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \" tasks in the list.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(notification, duke));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Prints notification when item is updated with new details. Prints old details as well for comparison."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param updatingTask Task to be updated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param updateType Type of detail to be updated: \"desc\" for all Tasks or \"time for Event and Deadline."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param originalValue Original value of detail that was updated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printUpdateNotification(String updatingTask, String updateType, String originalValue) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String notification \u003d \"I\u0027ve updated this task\u0027s \" + updateType + \":\\n    \" + updatingTask"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"\\n\\n Original \" + updateType + \": \\n\" + originalValue;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(notification, duke));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String exit \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(exit, duke));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Displays list of tasks produced from the FindCommand."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param tasks ArrayList of Tasks to be displayed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printSearchList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String list \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            list +\u003d \"\\n\" + (tasks.indexOf(task) + 1) + \". \" + task.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(list, duke));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 143
    }
  },
  {
    "path": "src/main/java/dude/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Initializes a Deadline object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param description Description of the Deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param isDone Completion status of the Deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param endTime Time that the task must be completed by."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Deadline(String description, int isDone, String endTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"[D] \" + super.toString() + \" (by: \" + endTime + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 31
    }
  },
  {
    "path": "src/main/java/dude/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String eventPeriod;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Initializes an Event object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param description Description of the Event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param isDone Completion status of the Event task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param eventPeriod Time when the Event occurs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Event(String description, int isDone, String eventPeriod) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.eventPeriod \u003d eventPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getEventPeriod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return eventPeriod;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setEventPeriod(String eventPeriod) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.eventPeriod \u003d eventPeriod;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"[E] \" + super.toString() + \" (at: \" + eventPeriod + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 31
    }
  },
  {
    "path": "src/main/java/dude/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Represents a task with corresponding description and completion status (isDone)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected int isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Task(String description, int isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.isDone \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public int getIsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String doneSymbol \u003d isDone \u003d\u003d 1 ? \"[+]\" : \"[  ]\"; // \"[✓]\" : \"[✘]\"; \"[\\u2713]\" : \"[\\u2718]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return doneSymbol + \" \" + description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 41
    }
  },
  {
    "path": "src/main/java/dude/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Represents a list of tasks and handles list operations."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private ArrayList\u003cTask\u003e taskStore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.taskStore \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskStore) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.taskStore \u003d taskStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ArrayList\u003cTask\u003e toArrayList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return taskStore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void addToList(Task addTask) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        taskStore.add(addTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void deleteFromList(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        taskStore.remove(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Task getElement(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return taskStore.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return taskStore.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 38
    }
  },
  {
    "path": "src/main/java/dude/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Todo(String description, int isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"[T] \" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 14
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dude.fxgui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 19
    }
  },
  {
    "path": "src/test/java/dude/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 8
    }
  },
  {
    "path": "src/test/java/dude/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_todoEmptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new AddCommand(\"todo\", \"todo\", new String[]{\"todo\"}, \"\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(null, null), new Storage(\"\", null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \":( OOPS!!! The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_deadlineWrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new AddCommand(\"deadline\", \"deadline WORK/by 20/10/2019 1800\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    new String[]{\"deadline\", \"WORK/by\", \"20/10/2019\", \"1800\"}, \"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(null, null), new Storage(\"\", null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \":( OOPS!!! For deadline please use the format\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\\"deadline description /by end time\\\"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_eventWrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new AddCommand(\"event\", \"event Celebration /at21/11/2019 0645 PM\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    new String[]{\"event\", \"Celebration\"}, \"\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(null, null), new Storage(\"\", null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \":( OOPS!!! For event please use the format\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\\"event description /at period\\\"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 60
    }
  },
  {
    "path": "src/test/java/dude/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDelete_noTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DeleteCommand(new String[]{\"delete\"})"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(null, null), new Storage(\"\", null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \":( OOPS!!! Please specify number of a single task to delete.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 30
    }
  },
  {
    "path": "src/test/java/dude/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDone_noTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DoneCommand(new String[]{\"done\"})"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(null, null), new Storage(\"\", null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \":( OOPS!!! Please specify number of a single task to mark as done.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 30
    }
  },
  {
    "path": "src/test/java/dude/helper/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import dude.DudeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Parser.parse(\"Random gibberish\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DudeException de) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 21
    }
  },
  {
    "path": "src/test/java/dude/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[D] [  ] deadline String test (by: 20 Oct 2019, 06:00 PM)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new Deadline(\"deadline String test\", 0, \"20 Oct 2019, 06:00 PM\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 14
    }
  },
  {
    "path": "src/test/java/dude/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[E] [+] event String test (at: 20 Oct 2019, 4-6pm)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new Event(\"event String test\", 1, \"20 Oct 2019, 4-6pm\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 14
    }
  },
  {
    "path": "src/test/java/dude/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[+] task String test\", new Task(\"task String test\", 1).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 13
    }
  },
  {
    "path": "src/test/java/dude/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[T] [  ] todo String test\", new Todo(\"todo String test\", 0).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 13
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "      ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Got it. I\u0027ve added this dukeTask:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [T][ ] borrow book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Got it. I\u0027ve added this dukeTask:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [D][ ] return book (by: Sunday)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Got it. I\u0027ve added this dukeTask:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     1.[T][ ] borrow book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     2.[D][ ] return book (by: Sunday)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     3.[E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Nice! I\u0027ve marked this dukeTask as done:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     1.[T][ ] borrow book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     2.[D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     3.[E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Noted. I\u0027ve removed this dukeTask:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     1.[T][ ] borrow book"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     2.[E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 63
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "random string"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline return book 2/by Sunday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event project meeting 2 /atMon 4-6pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done everything"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done -2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 20"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 0 7 4 3 7"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete everything"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete -2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 9 5 3 7 9"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 27
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the dukeTask `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another dukeTask. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.dude.Dude`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       mainClassName \u003d \"seedu.dude.Dude\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the dukeCommand `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":bulb: Simply run the dukeCommand `gradlew {taskName}` in the terminal and Gradle will run the dukeTask! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` dukeCommand."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the dukeCommand will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveBaseName \u003d \"dude\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Now you can run the dukeCommand `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the dukeCommand `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "│     └─seedu/dude/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        └─seedu/dude/dude.DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/dude/dude.DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 12,
      "-": 158
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Image dude \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DialogBox(dukeText, new ImageView(dude))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(dude))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 3,
      "-": 240
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Duke dude;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        dude \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String response \u003d dude.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Duke dude \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(dude);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 5,
      "-": 289
    }
  }
]
