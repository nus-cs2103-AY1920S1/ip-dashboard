[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 19,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private PreParser preParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        preParser \u003d new PreParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Command command \u003d preParser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                ui.oops(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.oops(\"Couldn\u0027t save tasks to disk.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 45,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Duke duke \u003d new Duke(\"./data/tasks.txt\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 8
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Parser for {@link duke.command.Command} argument lists. It can convert an entire raw argument list into a multimap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * between switch names and switch argument lists. Both required and optional switches are supported."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e requiredSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e optionalSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Registers the specified String as a switch while specifying if it is required or optional."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Commands missing required switches will cause an exception upon parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param name        the String that uniquely identifies this switch."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param isRequired  boolean specifying if the switch is required."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(String name, boolean isRequired) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (isRequired) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            requiredSwitches.add(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            optionalSwitches.add(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Parses the argument list into a multimap between switch names and switch argument lists. The command name is"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * taken as the first key of the multimap. Switches must have been registered using"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link #register(String, boolean)} before parsing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param args            the command argument list as a String[]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                a map with switch names as keys and switch argument lists as values"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if there are repeated switches or if required switches are missing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Map\u003cString, String[]\u003e parse(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e requiredSwitchesRemaining \u003d new TreeSet\u003c\u003e(requiredSwitches);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e optionalSwitchesRemaining \u003d new TreeSet\u003c\u003e(optionalSwitches);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int switchStartIndex \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) { // command name is an implied switch"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            boolean isSwitch \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (requiredSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if (!requiredSwitchesRemaining.remove(args[i])) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } else if (optionalSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if (!optionalSwitchesRemaining.remove(args[i])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (isSwitch) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    // This allows for switches with no arguments"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex + 1, i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                } catch (IllegalArgumentException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Bad arguments for switch \" + args[switchStartIndex]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                switchStartIndex \u003d i;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Add last switch"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex + 1, args.length));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!requiredSwitchesRemaining.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            for (String s : requiredSwitchesRemaining) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(requiredSwitchesRemaining.size() \u003d\u003d 1 ? \"is a required switch\" : \"are required switches\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(sb.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return switchArgs;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String formed by concatenating each String in the specified array in sequence while inserting a space"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * (\u003ccode\u003e\" \"\u003c/code\u003e) between each."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param strings  the String[] to concatenate"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return         the concatenated String"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return concatenate(strings, 0, strings.length);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String formed by concatenating the Strings in the array within the specified range in sequence while"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * inserting a space (\u003ccode\u003e\" \"\u003c/code\u003e) between each."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param strings    the String[] containing the range to concatenate"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param fromIndex  the start index, inclusive"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param toIndex    the end index, exclusive"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return           the concatenated String"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings, int fromIndex, int toIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d fromIndex; i \u003c toIndex; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(strings[i]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (i !\u003d toIndex - 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\" \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a LocalDate parsed from the specified String. Attempts to use several default {@link DateTimeFormatter}s"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * to parse the String. An exception is thrown if the input is not in a recognised format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If the input contains both a date and a time, {@link #parseDateTime(String)} should be used instead."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param input           the String to be parsed. It must contain only a date and be in a recognised format."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                the LocalDate parsed from the input"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the String cannot be parsed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static LocalDate parseDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/YYYY\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofPattern(\"d/M/YYYY\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                date \u003d LocalDate.parse(input, formatter);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Format not applicable"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse input as date\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a LocalDateTime parsed from the specified String. Attempts to use several default"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link DateTimeFormatter}s to parse the String. An exception is thrown if the input is not in a"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * recognised format."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If the input contains only a date but not a time, {@link #parseDate(String)} should be used instead."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param input           the String to be parsed. It must contain both a date and a time"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                        and be in a recognised format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                the LocalDateTime parsed from the input"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the String cannot be parsed"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static LocalDateTime parseDateTime(String input) throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .appendPattern(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .toFormatter());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .appendPattern(\"d/M/yyyy HHmm\")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .toFormatter());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                dateTime \u003d LocalDateTime.parse(input, formatter);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Format not applicable"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse input as date\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String representing a verbosely formatted version of the specified date or datetime String. It first"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * attempts to parse the input as a {@link LocalDate}. If that fails, it tries to parse it as a"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link LocalDateTime}. Upon successful parsing, it prettily formats the resulting object as a String."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * LocalDates are formatted as \u003ccode\u003e\"d of MMMM yyyy\"\u003c/code\u003e."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * LocalDateTimes are formatted as \u003ccode\u003e\"d of MMMM yyyy, h:mma\"\u003c/code\u003e."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param input           the String to be parsed. It can be either a date or datetime but must be in a"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                        recognised format."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                String containing the prettily formatted date or datetime"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the input cannot be parsed as either a LocalDate or LocalDateTime"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String parseDateOrDateTimeToString(String input) throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String parsedString \u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            parsedString \u003d parseDate(input).format(DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM yyyy\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e1) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                parsedString \u003d parseDateTime(input).format(DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM yyyy, h:mma\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DukeException e2) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Format not applicable"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (parsedString \u003d\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse String as Date or DateTime\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return parsedString;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 229
    }
  },
  {
    "path": "src/main/java/duke/PreParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.CommandMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Parser that converts Strings into {@link Command} objects using a {@link CommandMap}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * as a String-{@link Class} map."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class PreParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private CommandMap commandMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a PreParser using the default {@link CommandMap} mapping."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public PreParser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] dummyArgs \u003d new String[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap \u003d new CommandMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new ByeCommand(dummyArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new ListCommand(dummyArgs));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new DoneCommand(dummyArgs));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new TodoCommand(dummyArgs));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new DeadlineCommand(dummyArgs));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new EventCommand(dummyArgs));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new DeleteCommand(dummyArgs));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new FindCommand(dummyArgs));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a PreParser using the specified {@link CommandMap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param commandMap  a CommandMap that maps command name Strings to {@link Command}s."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public PreParser(CommandMap commandMap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.commandMap \u003d commandMap;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a {@link Command} object parsed from the specified String. The Command contains all arguments specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * in the String, ignoring extraneous spaces."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Specifically, the Command arguments are parsed into a String[] by calling {@link String#split} on the input with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003ccode\u003e\" \"\u003c/code\u003e as the delimiter."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param fullCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                the parsed Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the command name is not a key in the CommandMap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] args \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Class\u003c? extends Command\u003e cls \u003d commandMap.get(args[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Command command \u003d cls.getConstructor(String[].class).newInstance(new Object[]{args});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 67
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This class provides all file input/output functionality needed for persistent storage of Duke tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a Storage using the specified path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param filepath  String containing the path of the file to read and write"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.path \u003d Paths.get(filepath).toAbsolutePath().normalize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the TaskList loaded from disk. The file on disk must have been written by {@link #save(TaskList)}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * using the current versions of the TaskList and Task classes. If the file does not exist, a new empty TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * is returned."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                         the TaskList loaded from the file data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IOException             if there is an I/O exception. This could mean that the file exists but cannot be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                                 accessed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws ClassNotFoundException  if the data in the file does not match the current TaskList and Task class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                                 definitions. This could mean that the file does not contain valid Duke data or"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                                 was saved by an earlier incompatible version of Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList load() throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(path.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList taskList \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ois.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Saves the specified TaskList to disk. The TaskList is serialised using an {@link ObjectOutputStream}. Any"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * non-existent directories specified in the filepath are created. Overwrites the file at the path if it exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param taskList      the TaskList to save to disk. It must be {@link Serializable}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IOException  if there is an I/O exception. This could mean that the directories cannot be created or the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                      file cannot be accessed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(path.getParent() !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(path.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.writeObject(taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 70
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This class provides all the input/output functionality needed to interact with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * It is a thin wrapper over an {@link InputStream} and a {@link PrintStream}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private InputStream in;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private PrintStream out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a Ui using the default {@link System#in} and {@link System#out}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a Ui using the specified streams."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param inputStream  the stream to receive user input from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param printStream  the stream to print user output to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Ui(InputStream inputStream, PrintStream printStream) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.in \u003d inputStream;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            // Set UTF-8 encoding to print characters like ✓ and ☹"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Charset utf8Charset \u003d Charset.forName(\"UTF-8\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            PrintStream out \u003d new PrintStream(printStream, true, utf8Charset.name());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.out \u003d out;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.out \u003d printStream;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the String that was read"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prints a String in a stylised ASCII text box."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param text  the String to be printed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void say(String text) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prepends an exclamatory phrase to a String and prints it in a stylised ASCII text box."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The result is the same as calling {@link #say} with the argument \u003ccode\u003e\"☹ OOPS!!!\" + text\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param text  the String to be printed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void oops(String text) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"\\u2639 OOPS!!! \" + text); // ☹"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prints an error message about the failure to load tasks from disk."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oops(\"Couldn\u0027t load tasks from disk.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prints a message welcoming the user to Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 88
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ByeCommand(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"bye\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 21
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String[] args;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return (this instanceof ByeCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public abstract String getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24
    }
  },
  {
    "path": "src/main/java/duke/command/CommandMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CommandMap {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    Map\u003cString, Class\u003c? extends Command\u003e\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(Command command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commands.put(command.getName(), command.getClass());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Class\u003c? extends Command\u003e get(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return commands.get(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 18
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DeadlineCommand(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        parser.register(\"/by\", true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] byArgs \u003d switchArgs.get(\"/by\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (byArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.task.Deadline d \u003d new duke.task.Deadline(Parser.concatenate(comArgs), Parser.concatenate(byArgs));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(d);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"added: \" + d);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DeleteCommand(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be deleted must be an integer.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            task \u003d tasks.delete(oneIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(String.format(\"Noted. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d task%s in the list.\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                task.toString(), tasks.size(), tasks.size() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DoneCommand(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be marked must be an integer.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks.markDone(oneIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(oneIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 42
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public EventCommand(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        parser.register(\"/at\", true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] atArgs \u003d switchArgs.get(\"/at\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (atArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.task.Event e \u003d new duke.task.Event(Parser.concatenate(comArgs), Parser.concatenate(atArgs));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"added: \" + e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 42
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public FindCommand(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The search keyword cannot be blank.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e foundTaskIndices \u003d tasks.findKeywordOneIndices(comArgs[0], false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (foundTaskIndices.size() \u003e 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            for (int i \u003d 0; i \u003c foundTaskIndices.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                int oneIndex \u003d foundTaskIndices.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(oneIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(tasks.get(oneIndex).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if (i !\u003d foundTaskIndices.size() - 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    sb.append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.say(\"Here are the matching tasks in your list:\\n\" + sb.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.say(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ListCommand(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.say(tasks.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.say(\"No tasks yet.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 25
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TodoCommand(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.task.Todo t \u003d new duke.task.Todo(Parser.concatenate(comArgs));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"added: \" + t);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Deadline(String desc, String date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d Parser.parseDateOrDateTimeToString(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), description, date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Event(String desc, String date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d Parser.parseDateOrDateTimeToString(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description, date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task(String d) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        description \u003d d;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2717\"; // ✓ or ✗"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Task is already done!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 32
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone(int oneIndex) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.get(oneIndex - 1).markDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task delete(int oneIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.remove(oneIndex - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task get(int oneIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.get(oneIndex - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List\u003cInteger\u003e findKeywordOneIndices(String keyword, boolean isCaseSensitive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!isCaseSensitive) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e foundTaskIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            String taskString \u003d tasks.get(i).toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (!isCaseSensitive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                taskString \u003d taskString.toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (taskString.contains(keyword)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                foundTaskIndices.add(i+1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return foundTaskIndices;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List\u003cTask\u003e findKeywordTasks(String keyword, boolean isCaseSensitive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return findKeywordOneIndices(keyword, isCaseSensitive)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .map(oneIndex -\u003e get(oneIndex))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            s \u003d s + String.format(\"%d. %s\\n\", (i + 1), tasks.get(i).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Todo(String d) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 12
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void getStatusIcon_undone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo todo \u003d new Todo(\"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"\\u2717\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void getStatusIcon_done() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo todo \u003d new Todo(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        todo.markDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"\\u2713\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void toString_ascii() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] Complete JUnit tests\", new Todo(\"Complete JUnit tests\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void toString_unicode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] ✓✗☹\", new Todo(\"✓✗☹\").toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] \\u2713\\u2717\\u2639\", new Todo(\"\\u2713\\u2717\\u2639\").toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void toString_largeString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String largeString \u003d \"The standard Lorem Ipsum passage, used since the 1500s\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\\"\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"Section 1.10.32 of \\\"de Finibus Bonorum et Malorum\\\", written by Cicero in 45 BC\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\\\"\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"1914 translation by H. Rackham\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\\\"\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"Section 1.10.33 of \\\"de Finibus Bonorum et Malorum\\\", written by Cicero in 45 BC\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\\\"\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"1914 translation by H. Rackham\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\\\"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] \" + largeString, new Todo(largeString).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone_alreadyDone_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo todo \u003d new Todo(\"Run this test\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            todo.markDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            todo.markDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            assertEquals(\"Task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 65
    }
  }
]
