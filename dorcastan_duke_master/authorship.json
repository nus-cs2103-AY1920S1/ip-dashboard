[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "version \u00270.1.7\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveVersion \u003d \"0.1.7\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 29,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# Snowball the Task Manager "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "## About"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Snowball is a Task Manager which helps to keep track of all the things you have to do."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Snowball communicates using a chat interface, so all you have to do is to type in your "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "commands, and Snowball will handle the rest!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "![Snowball image](../src/main/resources/images/Snowball.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003eHello! My name is Snowball. I\u0027m here to help you organise your tasks!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "### Basic Search Function"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Ever had trouble trying to scan through a long list of tasks to find the one that you "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "were looking for? Snowball eliminates this problem by looking up tasks for you. Simply"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "use the `find` command to search for any part of the task\u0027s details that is visible when "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "tasks are displayed. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "### Different Types of Tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Snowball organises three types of tasks: To-Dos, Deadlines, and Events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "1. **To-Do**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    A To-Do is a generic task that consists of a description and completion status. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    To-Dos are denoted by **[T]** in the displayed task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "1. **Deadline**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    A Deadline is similar to a To-Do, but it also contains a due date/time which is displayed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    along with the Deadline. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Deadlines are marked with **[D]** in the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "1. **Event**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    An Event is a task which consists of a description and an event time. It differs from a"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Deadline in that Deadlines must be completed *by* a certain time, whereas events happen"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    *at* their given time. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Events are denoted by **[E]** in the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "### Task Priority Levels"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "All tasks can be marked with a priority level that is either None, Low, Medium, or High "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "(increasing order of importance)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "When tasks are displayed, priority levels that are higher than None are also displayed before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "the task that they are attached to."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003e1\\. [T][-] Say hello to Snowball!\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "2\\. [T][-] [Not so important] Bake muffins\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "3\\. [D][-] [Quite important] Read lecture notes (by: Thu, 12 Sep 19, 22:00)\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "4\\. [D][-] [Important!!] Write presentation script (by: Fri, 13 Sep 19, 14:00)\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003e **Command Format**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003e * Words in UPPER-CASE are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003e * Items in [square brackets] are optional."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003e * Main commands are case insensitive. `LIST` and `liSt` will work, but not `/AT`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003e * Parameters must be given in the specified order unless otherwise stated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#### Displaying Tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Displays the list of tasks that Snowball is currently managing. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Tasks types and completion status are shown along with the task description and time "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  (if any). Priority levels that are higher than None are also displayed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* For example: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003e 1. [E][+] Project meeting (at: Tue, 10 Sep 19, 12:00) "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003e 1. [D][-] Submit presentation slides (by: Wed, 11 Sep 19, 23:59)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003e 1. [T][-] Go to sleep"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `find PHRASE`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Displays all tasks that contain `PHRASE` in their description, priority level, "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  index number, or time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Can be used to search for specific task numbers or priority levels. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `find` is case sensitive, i.e. `find meeting` will not find a task with the "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  description \"Meeting with project group\"."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* For example: `find Sun`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003e 1\\. [D][-] Read lecture notes (by: Sun, 18 Aug 19, 12:00)\u003cbr\u003e "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    3\\. [T][-] Go out on Sunday!"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Example #2: `find 1` displays all tasks that contain the number 1. However, it also"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  shows tasks which have the number 1 in their descriptions."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003e 2\\. [T][-] Read books\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    10\\. [T][-] Draft interview questions\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    22\\. [D][-] Submit report (by: Mon, 11 Nov 19, 12:00)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Example #3: `find Important!` displays all tasks that are marked as Important."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003e 5\\. [T][-] [Important!!] Message group about project deadline\u003cbr\u003e "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    22\\. [D][-] [Important!!] Submit report (by: Mon, 11 Nov 19, 12:00)\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#### Adding New Tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `todo DESCRIPTION`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Adds a new To-Do task with the given description."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `deadline DESCRIPTION /by TIME`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Adds a new Deadline task with the given description and due time."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `TIME` must be given in one of the following formats:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * DOW, DD-MM-YY, hh:mm"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * DD-MM-YYYY hh:mm"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * DDMMYY hhmm"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        * Note: no punctuation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * ISO date time, i.e. YYYY-MM-DDThh:mm:ss"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        * Note the \u0027T\u0027 between date and time"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* If `TIME` does not match any valid format, the due date and time will be set "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  to the current date and time. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `event DESCRIPTION /at TIME`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Adds a new Event task with the given description and event time."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `TIME` must be given in one of the following formats:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * DOW, DD-MM-YY, hh:mm"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * DD-MM-YYYY hh:mm"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * DDMMYY hhmm"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        * Note: no punctuation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * ISO date time, i.e. YYYY-MM-DDThh:mm:ss"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        * Note the \u0027T\u0027 between date and time"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* If `TIME` does not match any valid format, the event date and time will be set "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  to the current date and time. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#### Completing Tasks"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `done INDEX`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Marks the task with the given index number as done."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `INDEX` should be the list index number of the task with no other symbols or "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  punctuation."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* For example: `done 1`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003eNice! I\u0027ve marked this task as done:\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    [T][+] Make user guide"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Invalid usage: `done 1.`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003eSorry, I couldn\u0027t find the task you requested!"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `undone INDEX`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Marks the task with the given index number as undone."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `INDEX` should be the list index number of the task with no other symbols or "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  punctuation."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* For example: `undone 1`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003eOh dear. I\u0027ve marked this task as undone:\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    [T][-] Make user guide"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Invalid usage: `undone 1.`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003eSorry, I couldn\u0027t find the task you requested!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#### Changing Task Priority Levels"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `priority INDEX PRIORITY-LEVEL`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Changes the priority of the task with the given `INDEX` to `PRIORITY-LEVEL`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `INDEX` should be the list index number of the task with no other symbols or "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  punctuation. Same as for the `done` and `undone` commands."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `PRIORITY-LEVEL` should be one of the following:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * High priority (Important!!): `high`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * Medium priority (Quite important): `medium`, `mid`, or `quite`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * Low priority (Not so important): `low`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    * No priority: `none` or `no`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* For example: `priority 1 high`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003eOkay! I\u0027ve set this task\u0027s priority to Important!!:\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    [T][-] [Important!!] Make user guide"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#### Removing Tasks"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `delete INDEX`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Deletes the task with the given index number. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Use with caution: deleted tasks cannot be recovered."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#### Saying Bye"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "##### `bye`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Displays a goodbye message from Snowball. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Does not actually do anything useful. But it\u0027s always good manners to say bye before "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  you leave a chat!"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `list` - Display all tasks."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `find PHRASE` - Display tasks that contain `PHRASE`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `todo DESCRIPTION` - Add a To-Do with the given description."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `deadline DESCRIPTION /by TIME` - Add a Deadline with the given description and due time."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `event DESCRIPTION /at TIME` - Add an Event with the given description and event time."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `done INDEX` - Mark the task with the given index number as done."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `undone INDEX` - Mark the task with the given index number as undone."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `priority INDEX PRIORITY-LEVEL` - Mark the given task with the given priority level."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `delete INDEX` - Delete the task with the given index number."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `bye` - Tell Snowball goodbye before you exit the application."
      }
    ],
    "authorContributionMap": {
      "dorcastan": 172,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.ui.SpeechMaker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.HardDiskStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Main class for the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Provides a constructor with zero parameters for JavaFX Launcher"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * to use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // hardcoded storage file path"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        storage \u003d new HardDiskStorage(\"/data/duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets up user interface, storage, and task list for the Duke application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath Path to data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        storage \u003d new HardDiskStorage(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Executes the given user input and returns Snowball\u0027s response."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input String of user-given input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String of Snowball\u0027s response to given input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return SpeechMaker.getApology(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 67,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * This class is used for all Duke-related exceptions. Exception messages"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * play an important role in providing users with feedback upon invalid input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates an exception specific to the Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param errorMessage Message to be passed using the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 17
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A launcher class to work around classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Launches the Duke application from the Main class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param args Standard arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 18
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A GUI for the Duke application using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Starts the Duke application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param stage JavaFX stage to use for GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            stage.setTitle(\"Snowball the Task Manager\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 40
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Abstract class that consolidates common operations for Commands that add"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * tasks, such as EventCommand and TodoCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs an AddCommand with the given details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    AddCommand(String details) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Displays a message indicating the successful addition of a new Task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and attempts to save the task list to storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int numberOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String textToDisplay \u003d \"Got it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\n  \" + tasks.get(numberOfTasks - 1)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\nNow you have \" + numberOfTasks + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(textToDisplay);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save(tasks, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            System.err.print(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return textToDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.ui.SpeechMaker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The ByeCommand class is used when an exit command is given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a bye Command, which has the attribute isExit set to true."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Displays an exit message on the given user interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String byeMessage \u003d SpeechMaker.BYE_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(byeMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 34
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The Command class is used to pass commands around the Duke application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * once user input has been parsed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Details of the command, if any. Possible command details include, but"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * are not limited to, the description of a Task to be created and the index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * number of a Task to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Whether the command is an exit command. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Whether the command marks a task as done. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a Command with the value isExit set according to the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * boolean value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isExit Whether this is an exit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Command(boolean isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(\"\", isExit, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a Command with the given details. By default, the boolean"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * values isExit and isDone are both set to false."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of the command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Command(String details) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(details, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a Command with the given details and value of isDone. By"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * default, the boolean value isExit is set to false."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of the command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether this command marks a task as done or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Command(String details, boolean isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(details, false, isDone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a Command with the given details and values of isExit and isDone."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of the command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isExit Whether this is an exit command or not."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether this command marks a task as done or not."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Command(String details, boolean isExit, boolean isDone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the details associated with this command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Command details."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether this is an exit command or not."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return True if this is an exit command and false otherwise."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether this command is a done command (marks a task as done)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * or not. Not to be confused with whether this command is an instance of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * the DoneCommand class."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return True if executing this command will result in a task being"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *         marked as done, and false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Executes the current command using the given resources."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response to the command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If command details are invalid, etc."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public abstract String execute(TaskList tasks, TextUi ui, Storage storage)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throws DukeException;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Saves the current task list using the given storage."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks to be saved."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Storage to save task list in."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If file does not get written properly."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void save(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \"Oops! I encountered an error when saving your tasks.\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"    \" + e.getMessage() + \"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"If you say bye now, you may not be able to access this\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \" list in future.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the index of the taskList task with the given number if such a"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * task exists, and throws an exception otherwise. Note that the input"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * number is one-indexed, whereas taskList is zero-indexed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param number String that should contain a number."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param numberOfTasks Number of tasks in the current list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return The requested task index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException Exception message indicating task not found."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    int getTaskIndex(String number, int numberOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (taskIndex \u003c 1 || taskIndex \u003e numberOfTasks) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return taskIndex - 1; // taskList is zero-indexed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 155
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The DeadlineCommand class is used to create new deadlines."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Construct a new DeadlineCommand with the given command details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Command details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If the given details do not include a deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DeadlineCommand(String details) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!details.contains(\" /by \")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"what\u0027s the deadline for this?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a new deadline to the list of tasks using the details contained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * in the current command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] taskDetails \u003d details.split(\" /by \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(new Deadline(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A DeleteCommand communicates instructions for a task to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a new DeleteCommand with the given details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DeleteCommand(String details) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Removes the task specified by the current DeleteCommand\u0027s details from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * the given task list, then saves the new list to storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If storage fails, etc."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int initialListSize \u003d tasks.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int taskIndex \u003d getTaskIndex(details, initialListSize); // might throw exception"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Task deletedTask \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String textToDisplay \u003d \"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\n  \" + deletedTask.toString()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(textToDisplay);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save(tasks, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            System.err.print(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert tasks.size() \u003d\u003d initialListSize - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return textToDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A DoneCommand object contains instructions to mark a task as done or undone."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a DoneCommand with the given details, and a flag to indicate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * whether the command is intended to mark a task as done or undone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of task to be marked as done/undone."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether the task should be marked as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DoneCommand(String details, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Finds the task specified by the current DoneCommand\u0027s details, then marks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * it as done or undone accordingly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If task index is invalid, list fails to be saved"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                       to storage, etc."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int taskIndex \u003d getTaskIndex(details, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Task selectedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String textToDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            selectedTask.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            textToDisplay \u003d \"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + selectedTask.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            selectedTask.markAsUndone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            textToDisplay \u003d \"Oh dear. I\u0027ve marked this task as undone:\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + selectedTask.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(textToDisplay);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save(tasks, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            System.err.print(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return textToDisplay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 59
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * An EventCommand contains instructions to create an event task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a new EventCommand using the given details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Command details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If the given details do not include an event time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EventCommand(String details) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!details.contains(\" /at \")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I need to know when your event is!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event based on the details contained in the current"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * EventCommand, then adds the event to the task list. The superclass"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * method execute(TaskList, TextUi, Storage) is called as part of the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * process."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] taskDetails \u003d details.split(\" /at \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(new Event(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 44
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A FindCommand contains instructions to find all tasks that match a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * specific pattern."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new FindCommand that can search for the given details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details String containing details that found tasks should contain."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public FindCommand(String details) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Displays all tasks that match the details contained in the current"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * FindCommand. Tasks are evaluated using their default toString() values"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and are matched against the current command\u0027s details using the String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * method contains(String)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String allTasks \u003d tasks.toIndexedString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        StringBuilder foundTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (String task : allTasks.split(\"\\n\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (task.contains(this.details)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                foundTasks.append(task.concat(\"\\n\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean hasNoMatchingTasks \u003d foundTasks.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (hasNoMatchingTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return \"Hmm... you have no tasks containing this description!\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"Did you mean to find something else?\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return foundTasks.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 50
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A ListCommand contains instructions to list all existing tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new ListCommand, which requires no other details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Displays the current list of tasks on the given user interface, or"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * if the list is empty, displays an alternative message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            response \u003d \"You have no tasks now. Hooray!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            response \u003d tasks.toIndexedString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert !response.equals(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(response);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 40
    }
  },
  {
    "path": "src/main/java/duke/command/PriorityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Priority;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a PriorityCommand with the given details, which should include"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * a task number and a Priority level."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Details of this command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public PriorityCommand(String details) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Finds the task specified by the current PriorityCommand\u0027s details, then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * assigns it a priority level according to the priority specified in this"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * command\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If task index is invalid, list fails to be saved"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                       to storage, etc."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // parse details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] indivDetails \u003d details.split(\" +\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int taskIndex \u003d getTaskIndex(indivDetails[0], tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Task selectedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Priority newPriority \u003d Parser.parsePriority(indivDetails[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // set priority level and show response"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        selectedTask.setPriority(newPriority);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String setPriorityMessage \u003d \"Okay! I\u0027ve set this task\u0027s priority to \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + newPriority.toString() + \":\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"  \" + selectedTask.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(setPriorityMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // try to save to storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save(tasks, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            System.err.print(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return setPriorityMessage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 58
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A TodoCommand contains instructions to create a new Todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a new TodoCommand with the given command details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param details Command details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public TodoCommand(String details) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo using the details specified in the current"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * TodoCommand, then adds it to the task list. The superclass method"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * execute(TaskList, TextUi, Storage) is called as part of the process."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage Hard disk storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing Duke\u0027s response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(new Todo(details));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.DateParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Deadlines are special Tasks that have a due date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Due date of task. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private LocalDateTime dueDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description and due date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Task to be completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param dueDateTime Due date for the Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Deadline(String description, String dueDateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.dueDateTime \u003d DateParser.parse(dueDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description, due date and status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Task to be completed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param dueDateTime Due date for the Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether the Deadline is completed or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param priority Level of priority for the Deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Deadline(String description, String dueDateTime, boolean isDone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    Priority priority) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.dueDateTime \u003d DateParser.parse(dueDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"D\", representing the type Deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return The letter \"D\" in a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Deadline, including its due"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * date or time, in an appropriate format for data storage. The due date is"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * formatted according to the default DateTimeFormatter given by DateParser."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String representing the current Deadline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.formatAsData() + \" | \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + dueDateTime.format(DateParser.getDefaultFormat());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and deadline. The deadline is formatted according to the default"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * DateTimeFormatter given by DateParser."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String describing the Deadline."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + dueDateTime.format(DateParser.getDefaultFormat()) + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.DateParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Events are Tasks that have a specific starting time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Starting time of the event. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description and start time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Description of Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time Starting time of the Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.time \u003d DateParser.parse(time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description, start time and status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Description of Event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time Start time of the Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether the Event is done or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param priority Level of priority for the Event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Event(String description, String time, boolean isDone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                 Priority priority) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.time \u003d DateParser.parse(time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"E\", representing the type Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return The letter \"E\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Event, including its time, in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * an appropriate format for data storage. The time is formatted according"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * to the default DateTimeFormatter given by DateParser."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String representing the current Event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.formatAsData() + \" | \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + time.format(DateParser.getDefaultFormat());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and time. The time is formatted according to the default"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * DateTimeFormatter given by DateParser."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String describing the Event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + time.format(DateParser.getDefaultFormat()) + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Provides four possible Priority levels for Tasks: High, Medium, Low and None."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The String representations of Priority levels are, respectively:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * \"Important!!\", \"Quite important\", \"Not very important\", and \"None\"."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    NONE(\"None\", 0),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    LOW(\"Not very important\", 1),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    MEDIUM(\"Quite important\", 2),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    HIGH(\"Important!!\", 3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private int importance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Priority(String descriptor, int importance) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns an integer representation of the Priority level. Integer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * representations of priority levels range from 0 (NONE) to 3 (HIGH)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Integer representing the level of Priority."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public int asInteger() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return this.importance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a user-friendly String representation of a Priority."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing a description of the current Priority."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return this.descriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Tasks are the main data of the Duke application, describing something that"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * needs to be done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether the given String is the status icon for a done Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param icon A string containing a valid done or undone icon."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return true if the icon represents a \"done\" status, and false otherwise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static boolean checkStatus(String icon) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert icon.equals(\"+\") || icon.equals(\" \"); // assume no change to icons"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String doneIcon \u003d new Task().getStatusIcon();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return icon.equals(doneIcon);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Description of task. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Whether the task has been completed. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Priority level of task. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new done Task with an empty description, for the convenient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * checking of status icons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Task() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(\"\", true, Priority.NONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new undone Task with the given description. By default, Tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * are created with Priority level NONE."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Description of the Task. Description length should"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    be at most 50 characters (for now)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(description, false, Priority.NONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Task with the given description, isDone status and level of"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Priority."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Description of the Task. Description length should"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    be at most 50 characters (for now)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether the Task has been completed or not."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param priority Level of priority for the Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task(String description, boolean isDone, Priority priority) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a plus symbol or space according to the isDone status of the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return The status icon associated with the current task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isDone ? \"+\" : \"-\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // return isDone ? \"\\u2713\" : \"\\u2718\"; // return tick or X symbols"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a String of length 1 that indicates the current Task type."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String indicating Task type."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"-\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether the current Task has a priority level above \"None\"."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return True if this Task has a priority level above \"None\", and false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *         otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private boolean hasPriority() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return this.priority !\u003d Priority.NONE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Gets the current Task priority level."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Priority level of the current Task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Priority getPriority() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the current Task priority to the given priority level."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param priority Priority level of the task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has been completed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has not been completed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Task in an appropriate"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * format for data storage."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String representing the current Task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String delimiter \u003d \" | \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return getType() + delimiter + getStatusIcon() + delimiter"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + priority.asInteger() + delimiter + description;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the description of the Task along with an indication of its"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * isDone status and priority (if any)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing the status and description of the current"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *         Task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String priorityString \u003d hasPriority()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ? \"[\" + getPriority().toString() + \"] \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + priorityString + description;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 151
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The TaskList class wraps a List of Tasks and provides a method to display"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * all tasks as a formatted list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TaskList { // TODO: extend List\u003cTask\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** List of tasks. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Creates a new, empty TaskList. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new TaskList from the given List of Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks     List of Tasks to be used in the new TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns number of tasks in the current list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  Size of TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the Task at the given index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param index     Index of Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return          Task at the given index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a Task to the TaskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param newTask   Task to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Removes a Task from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param index     Index of Task to be removed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return          The removed Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether the TaskList is empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  True if the task list is empty and false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a String of all tasks as a one-indexed list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String containing all tasks as a one-indexed list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toIndexedString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            output \u003d output.concat(i + \". \" + this.get(i - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a String representing all of the tasks as a formatted list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representation of task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String output \u003d tasks.stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .map(task -\u003e task.formatAsData() + \"\\n\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .reduce(\"\", String::concat);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 101
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A Todo is a basic Task that simply describes what needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Task to be completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description and status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description Task to be completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone Whether the Task has been completed or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param priority Level of priority for this Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Todo(String description, boolean isDone, Priority priority) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"T\", representing the type Todo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String of the letter \"T\"."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * description."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String describing the Todo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 48
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A custom control using FXML that represents a dialog box consisting of an"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * ImageView and a Label. The ImageView represents the speaker\u0027s face and the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Label contains text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a dialog box with a Label on the left and ImageView on the right."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text String of text to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param img Image to be displayed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and the Label"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * is on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ObservableList\u003cNode\u003e childNodes \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Collections.reverse(childNodes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.getChildren().setAll(childNodes);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a new duke.DialogBox with the given Label on the left and the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * given ImageView on the right."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text String containing text."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param image Image containing display picture."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a new duke.DialogBox with the given Label on the right and the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * given ImageView on the left."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text String containing text."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param image Image containing display picture."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 85
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Dog.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Snowball.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Initialises the scroll pane\u0027s vvalue property  and adds a welcome message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * to the dialogue container."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DialogBox.getDukeDialog(SpeechMaker.getWelcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the given Duke as the Duke instance for the current MainWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param duke The instance of Duke to be used."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Duke\u0027s response, then adds them to the dialog container. Clears user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String dukeText \u003d duke.getResponse(userInput.getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DialogBox.getUserDialog(userText, userImage),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/SpeechMaker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The SpeechMaker class is a container for Snowball\u0027s text messages and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * responses."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class SpeechMaker {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Message to introduce Snowball. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String SELF_INTRODUCTION_MESSAGE \u003d \"Hello! My name is Snowball. \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"I\u0027m here to help you organise your tasks!\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Help message showing a list of basic commands. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Here are some instructions you can give me:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"~ list - show all tasks\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"~ todo [description] - make a new todo\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"~ event [description] /at DD-MM-YY hh:mm - add a new event at this time\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"~ deadline [description] /by DD-MM-YY hh:mm - add a new deadline to be completed by this time\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Message to say goodbye. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a welcome message consisting of Snowball\u0027s self-introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and a help message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing a self-introduction and help message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static String getWelcomeMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return SELF_INTRODUCTION_MESSAGE + \"\\n\" + HELP_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns an apology followed by the given message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param message Message describing the reason for apology."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return String containing apology message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static String getApology(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"Sorry, \" + message;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 43
    }
  },
  {
    "path": "src/main/java/duke/util/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Handles the parsing of dates from String formats into Date objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Array of date formats that the application is able to parse. A valid date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * can take any of the following formats:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 1. EEE, d MMM yy, HH:mm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 2. d-MM-yyyy HH:mm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 3. dMMyy HHmm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 4. ISO date time (yyyy-MM-ddTHH:mm:ss)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * where EEE is the day of week (e.g. Mon, Fri)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final DateTimeFormatter[] DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DateTimeFormatter.ofPattern(\"EEE, d MMM yy, HH:mm\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DateTimeFormatter.ofPattern(\"d-MM-yy HH:mm\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DateTimeFormatter.ofPattern(\"dMMyy HHmm\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DateTimeFormatter.ISO_DATE_TIME"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the default format to be used in formatting dates."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  The default DateTimeFormatter to be used."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static DateTimeFormatter getDefaultFormat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return DATE_FORMATS[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a Date corresponding to the date represented by the given String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * If the input format is invalid (does not match any of the date formats"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * specified in DateParser.DATE_FORMATS), returns the Date representing the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current instant."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param date String representing a date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Date corresponding to the given date String, or the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *         current instant."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static LocalDateTime parse(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (DateTimeFormatter format : DATE_FORMATS) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return LocalDateTime.parse(date, format);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // do nothing and try the next format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return LocalDateTime.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 56
    }
  },
  {
    "path": "src/main/java/duke/util/HardDiskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * An implementation of Storage that stores and loads data on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class HardDiskStorage implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** File to read and write from. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static File dataFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a Storage object that can read and write from a hard disk file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath Relative path to data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public HardDiskStorage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dataFile \u003d new File(System.getProperty(\"user.dir\") + filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Loads tasks from a data file and returns a list containing the tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * If file is not found or cannot be read, a DukeException is thrown."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return List of tasks from data file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If file does not exist, tasks cannot be loaded, etc."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String task \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String[] details \u003d task.split(\" \\\\| \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                boolean isDone \u003d Task.checkStatus(details[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                int priorityNumber \u003d Integer.parseInt(details[2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Priority taskPriority \u003d Priority.values()[priorityNumber];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                switch (details[0]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Todo(details[3], isDone, taskPriority));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Event(details[3], details[4], isDone, taskPriority));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Deadline(details[3], details[4], isDone, taskPriority));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Task(\"This task could not be parsed \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"from the given data file.\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"No such file was found.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Stores the tasks in the given list to the hard disk file. If necessary,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * a new file and its parent directories are created before storing the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks to be written."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException If file cannot be created, file cannot be written,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                     etc."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void store(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            dataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert dataFile.exists();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(dataFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        fileWriter.write(tasks.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 97
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.PriorityCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The Parser class is in charge of handling user-given commands. It ensures"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * that only valid inputs are processed and produces the relevant Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Array of valid command types. Valid types are:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 1. done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 2. undone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 3. priority"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 4. delete"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 5. todo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 6. event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 7. deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 8. find"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 9. list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 10. bye"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String[] VALID_COMMANDS \u003d {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \"done\", \"undone\", \"priority\", \"delete\", \"todo\", \"event\", \"deadline\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \"find\", \"list\", \"bye\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the input string and returns a Command corresponding to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * required action."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input String representation of the desired command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Command corresponding to the input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If input is invalid, etc."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String trimmedInput \u003d input.strip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String commandType \u003d trimmedInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String commandArgs \u003d input.substring(commandType.length()).strip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        validate(commandType, trimmedInput.length());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return makeCommand(commandType, commandArgs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the input string and returns a Priority corresponding to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * priority specified in the string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * \u003cp\u003eAliases for Priority MEDIUM are \"quite\" and \"mid\". Alias for Priority"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * NONE is \"no\"."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input String containing the name or alias of a priority level."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Priority level as specified in the input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If given priority level is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Priority parsePriority(String input) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String trimmedInput \u003d input.strip();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        switch (trimmedInput) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"quite\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"mid\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"no\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"none\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Priority.NONE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I don\u0027t recognise that priority level...\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks that a given command type is valid and that the input length"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * indicates a non-empty command description (or details)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param commandType Type of command to be checked."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param inputLength Length of input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException An exception with a message describing Duke\u0027s"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                       response to the problem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void validate(String commandType, int inputLength)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String lowerCaseType \u003d commandType.toLowerCase();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean isInvalidType \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (String type : VALID_COMMANDS) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (lowerCaseType.equals(type)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                isInvalidType \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (isInvalidType) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I don\u0027t know what that means... :(\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean isCommandWithNoArgs \u003d lowerCaseType.equals(\"list\") || lowerCaseType.equals(\"bye\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean isTooShort \u003d !isCommandWithNoArgs \u0026\u0026 inputLength \u003c lowerCaseType.length() + 2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (isTooShort) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            switch (lowerCaseType) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"undone\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"what\u0027s the task number again?\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"priority\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"which task are you assigning a priority to?\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find a task to delete.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I can\u0027t see the description of your todo.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I need to know the event description.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I didn\u0027t catch what you need to do.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I need something to find!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            default: // should not reach here"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean hasExtraWords \u003d isCommandWithNoArgs \u0026\u0026 inputLength \u003e lowerCaseType.length();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (hasExtraWords) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"did you mean to type another command?\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Use better control flow (not exceptions)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a Command based on the given type and arguments."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param type String of a valid command type."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param commandArgs String of arguments to be included in the Command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return New Command of the given type with the given arguments."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If an exception is thrown by a Command constructor"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                       while creating a new Command, or the given command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                       type is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static Command makeCommand(String type, String commandArgs) throws"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Make Parser parse the command arguments too"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String lowerCaseType \u003d type.toLowerCase();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        switch (lowerCaseType) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DoneCommand(commandArgs, true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"undone\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DoneCommand(commandArgs, false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new PriorityCommand(commandArgs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DeleteCommand(commandArgs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new TodoCommand(commandArgs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new EventCommand(commandArgs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DeadlineCommand(commandArgs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new FindCommand(commandArgs);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // command type should have been checked before calling this method"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I don\u0027t know what that means... :(\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 188
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * The Storage interface specifies the ability to load and store a list of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * tasks from a storage facility."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Loads tasks from external storage to a new list, then returns that list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return List of tasks that were loaded from file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException If tasks cannot be loaded from file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    List\u003cTask\u003e load() throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Writes the tasks in the given list into external storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks List of tasks to be written."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException If file cannot be found, etc."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void store(TaskList tasks) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 31
    }
  },
  {
    "path": "src/main/java/duke/util/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * This class handles all activities relating to the user interface, including"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * formatting or displaying input and output."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /* STATIC VARIABLES */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Horizontal line of width 60 characters. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Four space indentation. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /* METHODS TO DISPLAY OUTPUT */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with indentation of five spaces."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text Single line of text to be printed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void show(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(INDENT + \" \" + text);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a horizontal line with indentation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with appropriate indentation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text Formatted text with appropriate line breaks. Maximum width"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *             of each line is 58 characters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showText(String text) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] lines \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            show(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a message indicating that tasks were not loaded from storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showText(\"Sorry, I could not retrieve your previous tasks.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 56
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"600.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         style\u003d\"-fx-padding: 15.0 5.0 5.0 15.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "               style\u003d\"-fx-font-family: \u0027DejaVu Sans\u0027, Arial, Helvetica, sans-serif; -fx-padding: 10 10 10 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "               -fx-background-color: #CDEDFD; -fx-background-radius: 10 10 10 10\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"79.0\" fitWidth\u003d\"79.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            prefHeight\u003d\"700.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"658.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"524.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"524.0\" layoutY\u003d\"658.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"657.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"588.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 24
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private class StorageStub implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean isWorking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        StorageStub(boolean isWorking) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.isWorking \u003d isWorking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void store(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!this.isWorking) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new IOException(\"write error\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void save_workingStorage_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ListCommand().save(tasks, new StorageStub(true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void save_badStorage_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ListCommand().save(tasks, new StorageStub(false));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertTrue(e.getMessage()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    .startsWith(\"oops! I encountered an error when saving your tasks.\\n\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void getTaskIndex_validInputString_returnZeroIndexedInt() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(0, new ByeCommand().getTaskIndex(\"1\", 3));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void getTaskIndex_inputNotNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ByeCommand().getTaskIndex(\"abc\", 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I couldn\u0027t find the task you requested!\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void getTaskIndex_inputNumberExceedsIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ByeCommand().getTaskIndex(\"23\", 3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I couldn\u0027t find the task you requested!\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 90
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.util.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private class StorageStub implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void store(TaskList tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void execute_validCommand_taskAdded() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        TextUi ui \u003d new TextUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // run tests"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new DeadlineCommand(\"work /by Thu\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // assertions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(\"[D][ ] work (by: Thu, 01 Jan 70, 00:00)\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                tasks.get(0).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 49
    }
  },
  {
    "path": "src/test/java/duke/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertNull(Parser.parse(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I don\u0027t know what that means... :(\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // random string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertNull(Parser.parse(\"test\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I don\u0027t know what that means... :(\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_validCommands_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // commands with no details"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ListCommand().getDetails(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"list\").getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ByeCommand().getDetails(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"bye\").getDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // done and undo commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Parser.parse(\"done 4\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Parser.parse(\"undo 4\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Parser.parse(\"done 4\").isDone());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Parser.parse(\"undo 4\").isDone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // commands with task index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DoneCommand(\"4\", true).getDetails(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"done 4\").getDetails());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DeleteCommand(\"4\").getDetails(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"delete 4\").getDetails());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // commands to add tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DeadlineCommand(\"work /by now\").getDetails(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"deadline work /by now\").getDetails());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new EventCommand(\"meeting /at 3PM\").getDetails(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"event meeting /at 3PM\").getDetails());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new TodoCommand(\"work\").getDetails(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"todo work\").getDetails());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_leadingAndTrailingWhitespace_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ListCommand().getDetails(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"   list   \").getDetails());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new TodoCommand(\"work\").getDetails(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"  todo work  \").getDetails());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 77
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "undo 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dorcastan": 36
    }
  }
]
