[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Deadline(String desc, String details) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc + details);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        taskType \u003d \"D\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 6
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void greet() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "        String logo \u003d \"      ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                + \"     |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                + \"     | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                + \"     | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\\n\" + logo + \"\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"     Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"     What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void evaluate(String instruction) throws VoidDukeCommand, InvalidDukeCommand, WrongDukeCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Scanner input \u003d new Scanner(instruction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (input.hasNext()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            command \u003d input.next();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new VoidDukeCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     The command \\\"list\\\" should not have anything after!\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            \"     Please remove any trailing white spaces/additional words!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    listTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     The command \\\"bye\\\" should not have anything after!\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            \"     Do you really intend to quit?\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    exit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    int taskNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        taskNumber \u003d Integer.parseInt(input.next());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String errorMessage \u003d \"     That\u0027s not a valid Integer!\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                \"     Please ensure that you have correctly entered a non-negative Integer that is within range and not anything else!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    markAsDone(taskNumber);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     Please input a non-negative Integer after the \\\"done\\\" command!\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            \"     Also do ensure that the Integer is not out of range!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    int taskNumber;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        taskNumber \u003d Integer.parseInt(input.next());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String errorMessage \u003d \"     That\u0027s not a valid Integer!\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                                \"     Please ensure that you have correctly entered a non-negative Integer that is within range and not anything else!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    delete(taskNumber);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     Please input a non-negative Integer after the \\\"delete\\\" command!\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            \"     Also do ensure that the Integer is not out of range!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String details \u003d input.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    add(new ToDo(details));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String details \u003d input.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    if (!details.contains(\"/by \")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String errorMessage \u003d \"     Sorry but I can\u0027t seem to detect the due date of the task!\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        Scanner temp \u003d new Scanner(details).useDelimiter(\"/by \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String agenda \u003d temp.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        if (agenda.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            throw new WrongDukeCommand(\"     You\u0027ve missed out on the details of the deadline!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String date;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        if (temp.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            date \u003d \"(by: \" + temp.next() + \")\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            String errorMessage \u003d \"     Sorry but I can\u0027t seem to detect the due date of the task!\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        add(new Deadline(agenda, date));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (input.hasNext()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String details \u003d input.nextLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    if (!details.contains(\"/at \")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String errorMessage \u003d \"     Sorry but I can\u0027t seem to detect the date/time of the event!\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        Scanner temp \u003d new Scanner(details).useDelimiter(\"/at \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String agenda \u003d temp.next();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        if (agenda.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            throw new WrongDukeCommand(\"     You\u0027ve missed out on the details of the event!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String date;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        if (temp.hasNext()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            date \u003d \"(at: \" + temp.next() + \")\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            String errorMessage \u003d \"     Sorry but I can\u0027t seem to detect the date/time of the event!\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                            throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        add(new Event(agenda, date));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String errorMessage \u003d \"     OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    throw new WrongDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                throw new InvalidDukeCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\\n\");        "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void add(Task task) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"       \" + task +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"\\n     Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void delete(int taskNumber) throws WrongDukeCommand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     Please input a positive Integer!\\n\" + "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \"     Also do ensure that the Integer you\u0027ve entered is within range!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     You don\u0027t have any tasks yet!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     I can\u0027t delete a non-existent task...\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Task removedTask \u003d tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            System.out.println(\"     Noted. I\u0027ve removed this task:\\n\" + "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \"       \" + removedTask + "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \"\\n     Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void listTasks() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            System.out.println(\"     There are no task(s) to list!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                System.out.println(\"     \" + i + \". \" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void markAsDone(int taskNumber) throws WrongDukeCommand {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     Please input a positive Integer!\\n\" + "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    \"     Also do ensure that the Integer you\u0027ve entered is within range!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     You don\u0027t have any tasks yet!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     You don\u0027t have that many tasks!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Task task \u003d tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (task.isDone) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new WrongDukeCommand(\"     Task has already been marked done!\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        task.isDone \u003d true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"       \" + task);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void exit() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void exitWithoutInstructions() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\\n\\n\" +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"     Looks like there isn\u0027t anything for me to do...\\n\" +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"     Call me again when you need me!\\n\" + "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void idle() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        System.out.println(\"     I can\u0027t do anything for you if you don\u0027t tell me what to do... :/\\n\" +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 236,
      "Jeffry Lum": 5,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Event(String desc, String details) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc + details);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        taskType \u003d \"E\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 6
    }
  },
  {
    "path": "src/main/java/InvalidDukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class InvalidDukeCommand extends IllegalArgumentException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 3
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        duke.greet();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String instruction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            instruction \u003d sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            instruction \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            duke.exitWithoutInstructions();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        while (instruction !\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                duke.evaluate(instruction);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } catch (VoidDukeCommand e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                duke.idle();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } catch (InvalidDukeCommand e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                System.out.println(\"     OOPS!!! I\u0027m sorry but I don\u0027t know what that means :-(\\n\" + "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } catch (WrongDukeCommand e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                System.out.println(e.getMessage() + \"\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (instruction.equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            instruction \u003d sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 38
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        description \u003d desc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return isDone ? \"x\" : \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return \"[\" + taskType + \"]\" + \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 19
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public ToDo(String desc) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        taskType \u003d \"T\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 6
    }
  },
  {
    "path": "src/main/java/VoidDukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class VoidDukeCommand extends NoSuchElementException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 6
    }
  },
  {
    "path": "src/main/java/WrongDukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class WrongDukeCommand extends IllegalArgumentException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public WrongDukeCommand(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 7
    }
  }
]
