[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "run{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 32,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "D | 1 | a | 2020-12-12T18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "T | 0 | p"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E | 0 | buy fruit | 2020-01-20T12:04"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "D | 0 | d | 2020-01-23T09:03"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 4
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class to launch the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param args not used."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 14
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.handler.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing the javafx application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final String FILEPATH \u003d \"/Users/jiangyuxin/Documents/sem1/cs2103/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Duke duke \u003d new Duke(FILEPATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * The main entry point for JavaFX applications."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param stage the stage to set set scene."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                duke.parse(\"bye\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().init(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 40
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing an add command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add the task to the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Add, tasks.getSize(), task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 31
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * An abstract class representing a command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the index of the task is out of range."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract CommandResult execute(TaskList tasks) throws IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing the result of executing a command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Task[] tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int taskListSize;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command and an array of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array of tasks generated by executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, Task... tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command, the total number of tasks, and an array of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the size of the task list that the user has."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array of tasks generated by executing the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, int taskListSize, Task... tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(commandType, tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.taskListSize \u003d taskListSize;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command and an array list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array list of tasks generated by executing the command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(commandType, tasks.toArray(new Task[tasks.size()]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command, the total number of tasks, and an array list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the size of the task list that the user has."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array list of tasks generated by executing the command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, int taskListSize, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(commandType, taskListSize, tasks.toArray(new Task[tasks.size()]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the type of command that this result is produced by."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the type of command that this result is produced by."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an array of tasks that are produced by executing the command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return an array of tasks that are produced by executing the command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task[] getTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the size of the task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return taskListSize;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 86
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Types of command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * It includes todo, event and deadline command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Add,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Delete command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Delete,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Find command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Find,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * List command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    List,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Done command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Done,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Exit command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing an add deadline task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description and deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DeadlineCommand(String description, LocalDateTime dateTime)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new Deadline(description, dateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the index of the task to be deleted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the index of the task is out of range."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d tasks.removeTaskAtIndex(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new CommandResult(CommandType.Delete, tasks.getSize(), task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalIndexOfTaskException(\"Please provide an valid index of the task.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 37
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a done command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the index of the task which is done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task which is done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the index of the task is out of range."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d tasks.setTaskAtIndexDone(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new CommandResult(CommandType.Done,tasks.getSize(), task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalIndexOfTaskException(\"Please provide an valid index of the task.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 37
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing add a event task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the time at which the event happens."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventCommand(String description, LocalDateTime dateTime)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new Event(description, dateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing an exit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Exit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 20
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a find command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param keyword the keyword to be searched."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the keyword is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public FindCommand(String keyword) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (task.toString().toLowerCase().indexOf(keyword) !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Find, matchingTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a list command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ListCommand(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.List, tasks.getTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing add a todo task command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ToDoCommand(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new ToDo(description));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the command is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalCommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalCommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the task description is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalDescriptionException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalDescriptionException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalIndexOfTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the task index is illegal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalIndexOfTaskException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalIndexOfTaskException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/handler/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class manages duke operation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the file path for storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filePath the file path for storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Loads tasks from the disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws FileNotFoundException If the file from which to load task is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void loadTasks() throws FileNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Stores all tasks in the task list to disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException If an input or output exception occurred."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void storeTasks() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Parses the command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandString command to be parsed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the response to the command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String parse(String commandString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command command \u003d parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            CommandResult result \u003d command.execute(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (result.getCommandType() \u003d\u003d CommandType.Exit) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    storeTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    return ui.showStoringError(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return ui.composeResult(result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return ui.showParsingError(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 71
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a parser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getFirstWord(String string) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfSpace \u003d string.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return string.substring(0, indexOfSpace);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String removeFirstWord(String string) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfSpace \u003d string.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return string.substring(indexOfSpace + 1).stripLeading();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the command by parsing the command string that typed by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandString the command typed by the user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the command by parsing the command string that typed by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description of the task is illegal."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalCommandException If the command is illegal."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Command parseCommand(String commandString)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException, IllegalCommandException, IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String stringWithoutLeadingSpaces \u003d commandString.stripLeading();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String commandType \u003d getFirstWord(stringWithoutLeadingSpaces);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String description \u003d removeFirstWord(stringWithoutLeadingSpaces);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        //Ignore words after the exit or list command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalIndexOfTaskException(\"Please provide a valid index.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DoneCommand(Integer.parseInt(description));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalIndexOfTaskException(\"Please provide a valid index.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(description));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ToDoCommand(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new FindCommand(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseDeadlineTask(description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseEventTask(description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalCommandException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DeadlineCommand parseDeadlineTask(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfTime \u003d description.indexOf(\"/by\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfTime \u003d\u003d -1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The format of deadline description is wrong.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assert indexOfTime \u003c\u003d description.length() \u0026\u0026 indexOfTime + 3 \u003c\u003d description.length() :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        \"String length: \" + description.length() + \" seperator index: \" + indexOfTime;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String taskDescription \u003d description.substring(0, indexOfTime).strip();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d description.substring(indexOfTime + 3).strip();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new DeadlineCommand(taskDescription, parseDateTime(dateTime));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private EventCommand parseEventTask(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfTime \u003d description.indexOf(\"/at\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfTime \u003d\u003d -1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The format of deadline description is wrong.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assert indexOfTime \u003c\u003d description.length() \u0026\u0026 indexOfTime + 3 \u003c\u003d description.length() :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        \"String length: \" + description.length() + \" seperator index: \" + indexOfTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String taskDescription \u003d description.substring(0, indexOfTime).strip();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d description.substring(indexOfTime + 3).strip();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new EventCommand(taskDescription, parseDateTime(dateTime));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDate parseDate(String dateString) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dateString.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Date cannot be empty.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] dayMonthYear \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dayMonthYear.length !\u003d 3) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Format of date is wrong.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalDate date \u003d LocalDate.of(Integer.parseInt(dayMonthYear[2]),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                Integer.parseInt(dayMonthYear[1]),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                Integer.parseInt(dayMonthYear[0]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalTime parseTime(String timeString) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (timeString.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Time cannot be empty.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] hourMinute \u003d timeString.split(\":\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (hourMinute.length !\u003d 2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Format of time is wrong.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalTime time \u003d LocalTime.of("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                Integer.parseInt(hourMinute[0]),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                Integer.parseInt(hourMinute[1]));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime parseDateTime(String dateTimeString) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateString \u003d getFirstWord(dateTimeString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String timeString \u003d removeFirstWord(dateTimeString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalDate date \u003d parseDate(dateString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalTime time \u003d parseTime(timeString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 143
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class dealing with storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final String doneString \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the path of file that stores data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filePath the path of file that stores data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a list of tasks that are stored in disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws FileNotFoundException If the file specified by the filePath is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Scanner in \u003d new Scanner(f);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String[] str \u003d in.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                switch (str[0]) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    task \u003d new ToDo(str[2]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    task \u003d new Event(str[2], LocalDateTime.parse(str[3]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    task \u003d new Deadline(str[2], LocalDateTime.parse(str[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                if (str[1].equals(doneString)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    task.setDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                list.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Stores tasks in a task list into the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException If an input or output exception occurred."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void store(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fw.write(tasks.getTaskAtIndex(i + 1).toStringForFile() + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 83
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a task with a deadline. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for the deadline task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param by the deadline of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Deadline(String description, LocalDateTime by) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return super.toStringForFile() + \" | \" + by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representaion of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task consisting of the task type,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d formatter.format(by);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a event task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for the event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param time the time at which the event starts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event(String description, LocalDateTime time) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return super.toStringForFile() + \" | \" + time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representaion of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task consisting of the task type,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d formatter.format(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class that represents a task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for Task Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The description of a \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    + getClass().getSimpleName().toLowerCase() + \" cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an icon showing the status of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return tick icon if the task is done otherwise X icon."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Set the status of the task to be done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"%s | %d | %s\", getClass().getSimpleName().substring(0,1), isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the task, consisting of status icon"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 56
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Create an empty task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying tasks in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the size of the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the task at certain index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Index starts from 1."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task at the index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task getTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets status of the task at index as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task at the index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index given is out of range."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task setTaskAtIndexDone(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.get(index - 1).setDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Removes the task at the index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task to be removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task that was removed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task removeTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add task to the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a list of tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a list of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 80
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a todo task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor of the toDo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ToDo(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the task, consisting of the type of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         the task and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jyx11011": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a dialog box."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final double CIRCLE_RADIUS \u003d 30;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ImageView userPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        cropImage(image);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void cropImage(Image image) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        double centerX \u003d image.getWidth() / 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        double centerY \u003d image.getHeight() / 2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        double radius \u003d Math.min(centerX, centerY) * 0.5;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Rectangle2D viewPort \u003d new Rectangle2D(centerX - radius, centerY - radius, radius * 2, radius * 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setImage(image);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setViewport(viewPort);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setFitWidth(CIRCLE_RADIUS * 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Circle circle \u003d new Circle(CIRCLE_RADIUS, CIRCLE_RADIUS, CIRCLE_RADIUS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setClip(circle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a user dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text text in the dialog box."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param image user image for the text."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a user dialog box."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogBox.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a duke dialog box."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text text in the dialog box."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param image duke image for the text."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a duke dialog box."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 83
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.handler.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing the main window of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the main window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        sendButton.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the main window with duke handler."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param duke the duke handler to handle request."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void init(Duke duke) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            duke.loadTasks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addDukeDialogBox(Ui.showLoadingError(e));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addDukeDialogBox(Ui.greet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds a duke dialog box to main window."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text the text to be shown in the dialog box."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addDukeDialogBox(String text) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(text, dukeImage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds a user dialog box to main window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text the text to be shown in the dialog box."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addUserDialogBox(String text) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(text, userImage));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        addUserDialogBox(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        addDukeDialogBox(duke.parse(input));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Exits the application after 3 seconds."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        sendButton.setDisable(true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(3));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 101
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class deals with user interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string to be printed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text an array of strings to be composed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string to be printed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static String composeBlock(String... text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assert text.length \u003e 0 : \"empty dialog box\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        StringBuilder strb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (String line: text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            strb.append(line + \"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return strb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the command result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param result a command result to be shown in UI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the command result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String composeResult(CommandResult result) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (result.getCommandType()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Exit:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return sayGoodBye();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Add:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showAddedTask(result.getTasks()[0], result.getTaskListSize());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Delete:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showRemovedTask(result.getTasks()[0], result.getTaskListSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Find:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showMatchingTasks(result.getTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case List:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showTasks(result.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Done:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showDoneTask(result.getTasks()[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assert false : \"unknown result type\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string to greet the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string to greet the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String question \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(greeting, question);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string of all tasks in the task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks the task list to be shown."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string of all tasks in the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showTasks(Task[] tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[tasks.length + 1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + tasks[i];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(text);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of a message that the task has been marked as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been marked as done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of a message that the task has been marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showDoneTask(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"Nice! I\u0027ve marked this task as done:\", \"  \" + task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of a message that the task has been removed from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been removed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the number of tasks in the task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of a message that the task has been removed from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showRemovedTask(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"Noted. I\u0027ve removed this task:\", \"  \" + task,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                String.format(\"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        taskListSize, taskListSize \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the message that the task has been added to the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the number of tasks in the task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the message that the task has been added to the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showAddedTask(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"Got it. I\u0027ve added this task:\", \"  \" + task,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                String.format(\"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        taskListSize, taskListSize \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of all tasks that matches a keyword typed by the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskList a list tasks that matches a keyword."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of all tasks that matches a keyword typed by the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showMatchingTasks(Task[] taskList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[taskList.length + 1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.length; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + taskList[i];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(text);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of saying good bye to the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of saying good bye to the user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String sayGoodBye() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of errors that occurs when parsing commands."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when parsing commands."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of errors that occurs when parsing commands."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showParsingError(Exception exception) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"OPPS!!! \" + exception.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of errors that occurs when loading tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when loading tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of errors that occurs when loading tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static String showLoadingError(Exception exception) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"OPPS!!! Fails to load your tasks.\", exception.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of errors that occurs when storing tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when storing tasks."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of errors that occurs when storing tasks."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showStoringError(IOException exception) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"OPPS!!! Fails to store your tasks.\", exception.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 156
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.shape.Ellipse?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"Infinity\" styleClass\u003d\"dialogBox\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cImageView fx:id\u003d\"userPicture\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"mainWindow\" prefHeight\u003d\"600.0\" prefWidth\u003d\"450.0\" minHeight\u003d\"100\" minWidth\u003d\"300\" stylesheets\u003d\"@duke.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" maxWidth\u003d\"Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"65.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" prefHeight\u003d\"41.0\" prefWidth\u003d\"65.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"41.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[E][\\u2718] test (at: 01 Mar 2020 12:00)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new Event(\"test\", LocalDateTime.of(2020, 3, 1, 12, 0)).toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"\", new Event(\"\", LocalDateTime.of(2020, 1, 1, 1, 1)).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a event cannot be empty.\",e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 29
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversionForFile() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"T | 0 | test\", task.toStringForFile());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[\\u2718] test\", task.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void statusIcon_notDone_cross() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"\\u2718\", task.getStatusIcon());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void statusIcon_done_tick() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"\\u2713\", task.getStatusIcon());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d new Task(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 46
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /* Comment out the test case because the unicode does not comply with style guide."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", new ToDo(\"test\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"\", new ToDo(\"\").toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a todo cannot be empty.\",e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if ! javac -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 34
    }
  }
]
