[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "test {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "run {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 26,
      "-": 15
    }
  },
  {
    "path": "src/main/Data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "event done make some money"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": "12th of December 1999, 5am"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "todo pending make some cash"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "todo pending get some cash"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "todo pending eat some food"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "todo pending actually eat the money"
      }
    ],
    "authorContributionMap": {
      "robytanama": 6
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * The main class of the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The storage containing the file to be modified in the hard drive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The ui to print out the messages."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in a filepath containing list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param filepath The filepath of the list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used for when there are any errors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Duke(String filepath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            this.taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } catch (FileNotFoundException error) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.ui \u003d new UI(taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The main logic of the program that keeps taking user input until the program is exited."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used for when there are any errors."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void run() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printIntro();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.loadTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        boolean programRunning \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        while (programRunning) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                String input \u003d ui.readLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                Command inputCommand \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                inputCommand.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                ui.printError(error);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        new Duke(\"src/main/Data/Duke.txt\").run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 64,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.time.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents command to add new deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in main message of the deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The main message of the deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public AddDeadlineCommand(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] inputMessage \u003d input.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String mainInput \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int marker \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d 0; i \u003c inputMessage.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (i + 1 \u003e\u003d inputMessage.length) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                throw new DukeException(\"     Please provide more information\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (inputMessage[i + 1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                mainInput +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                marker \u003d i + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                mainInput +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                mainInput +\u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String tempInfo \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d marker + 1; i \u003c inputMessage.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (i \u003d\u003d inputMessage.length - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                tempInfo +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                tempInfo +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                tempInfo +\u003d \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] dateAndTime \u003d tempInfo.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (date.length !\u003d 3 || dateAndTime.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Invalid date and time format!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (date[0].equals(\"\") || date[1].equals(\"\") || date[2].equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Invalid date and time format!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Date inputDate \u003d new Date(day, month, year);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Time inputTime \u003d new Time(Integer.parseInt(dateAndTime[1]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!inputDate.isValid()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Sorry! Invalid date format\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!inputTime.isValid()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Sorry! Invalid time format\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String extraInfo \u003d inputDate + \", \" + inputTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (extraInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Please provide date and time of the deadline\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!inputMessage[marker].equals(\"/by\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Wrong syntax, should be using /by for deadline\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.addDeadline(new Deadline(mainInput, extraInfo));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.updateTaskList(listOfTasks.getTasks());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.writeToFile();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printTaskAdd(listOfTasks.get(listOfTasks.size() - 1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 82
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.time.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represent the command to add a new event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in main message of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The main message of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public AddEventCommand(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] inputMessage \u003d input.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String mainInput \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int marker \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d 0; i \u003c inputMessage.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (i + 1 \u003e\u003d inputMessage.length) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                throw new DukeException(\"     Please provide more information\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (inputMessage[i + 1].equals(\"/at\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                mainInput +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                marker \u003d i + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                mainInput +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                mainInput +\u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String tempInfo \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d marker + 1; i \u003c inputMessage.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (i \u003d\u003d inputMessage.length - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                tempInfo +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                tempInfo +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                tempInfo +\u003d \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] dateAndTime \u003d tempInfo.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (date.length !\u003d 3 || dateAndTime.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Invalid date and time format!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (date[0].equals(\"\") || date[1].equals(\"\") || date[2].equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Invalid date and time format!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Date inputDate \u003d new Date(day, month, year);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Time inputTime \u003d new Time(Integer.parseInt(dateAndTime[1]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!inputDate.isValid()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Sorry! Invalid date format\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!inputTime.isValid()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Sorry! Invalid time format\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String extraInfo \u003d inputDate + \", \" + inputTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (extraInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Please provide date and time of the deadline\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!inputMessage[marker].equals(\"/at\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Wrong syntax, should be using /at for deadline\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.addEvent(new Event(input, extraInfo));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.updateTaskList(listOfTasks.getTasks());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.writeToFile();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printTaskAdd(listOfTasks.get(listOfTasks.size() - 1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 82
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represent command to add a new todo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the main message of the todo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The main message of the todo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public AddTodoCommand(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] inputMessage \u003d input.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (inputMessage.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     OOPS!! The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String item \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d 0; i \u003c inputMessage.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (i \u003d\u003d inputMessage.length - 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                item +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                item +\u003d inputMessage[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                item +\u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Todo newTodo \u003d new Todo(item);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.addTodo(newTodo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.updateTaskList(listOfTasks.getTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.writeToFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printTaskAdd(newTodo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 43
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represent the command to exit the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in empty string to create the object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message Usually is an empty string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public ByeCommand(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 25
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Abstract class to represent all the commands available in this program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * String that contains the main message of the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the main mesage of the command. Can be empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The main message of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Command(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.input \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to obtain the main message of the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return String of the main message of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to execute the command and modify the list of tasks accordingly."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param listOfTasks List of tasks to be modified according to the input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param storage Used to modify the files in the hard drive."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param ui Prints out all the messages."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception For when there are any errors when executing the method."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public abstract void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents the command to delete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Index of the file that is to be deleted from the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private int indexToDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes the index of the task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message String of the index of the task to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public DeleteCommand(String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.indexToDelete \u003d Integer.parseInt(message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (indexToDelete \u003e listOfTasks.size() || indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Such task does not exist!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Task toBeDeleted \u003d listOfTasks.get(indexToDelete - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.removeTask(toBeDeleted);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.updateTaskList(listOfTasks.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.writeToFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printTaskDelete(toBeDeleted);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represent the command of finishing a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Index of the task to be completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes the index of the task to be completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message String of the index of the task to be completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public DoneCommand(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.index \u003d Integer.parseInt(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (index \u003e listOfTasks.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Such task does not exist!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.get(index - 1).completeTask();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.updateTaskList(listOfTasks.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        storage.writeToFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printTaskDone(listOfTasks.get(index - 1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents that command to print an error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The UI needed to print the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private UI errorPrinter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the error message as String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public ErrorCommand(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        throw new DukeException(getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents command to find tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The tasks to be printed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private TaskList toBePrinted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The keyword to find in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the keyword to find."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public FindCommand(String message) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        toBePrinted \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (listOfTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     The list is empty!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ArrayList\u003cTask\u003e tempList \u003d listOfTasks.getTasks();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (Task task : tempList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (task.toString().contains(getMessage())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                toBePrinted.addTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (toBePrinted.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     The list contain no such keyword!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        UI printer \u003d new UI(toBePrinted);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printer.printList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents the command to print out the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in empty String to create the object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message Usually is an empty string as it is not used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public ListCommand(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute(TaskList listOfTasks, Storage storage, UI ui) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (listOfTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     The list is empty!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ui.printList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that contains exceptions specific to this program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The error message to be printed out."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param message The error message to be printed out."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 25
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.ErrorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that takes in a String and parse it to return a valid command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to take in a string input and returns a command if the input is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param input Input made by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The command corresponding to the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used to handle any exception that occurs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static Command parse(String input) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] inputArray \u003d input.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String constructedString \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d 1; i \u003c inputArray.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (i \u003d\u003d inputArray.length - 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                constructedString +\u003d inputArray[i];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                constructedString +\u003d inputArray[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                constructedString +\u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String command \u003d inputArray[0].toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new AddTodoCommand(constructedString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new AddEventCommand(constructedString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new AddDeadlineCommand(constructedString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new ByeCommand(constructedString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new ListCommand(constructedString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new DoneCommand(constructedString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new DeleteCommand(constructedString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case \"find\" :"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new FindCommand(constructedString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new ErrorCommand(\"     OOPS!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 59
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents the files in the hard drive to be modified or accessed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Reader needed to read the file in hard drive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private BufferedReader br;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to access the file in the hard drive with given filepath."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private FileReader fr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Main list of tasks of the program to be written into or accessed from hard drive."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private ArrayList\u003cTask\u003e inputList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Filepath of the file in the hard drive."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the filepath of the data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param path The filepath of the data as String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used to handle exception that occurs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Storage(String path) throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.filepath \u003d path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.inputList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            this.fr \u003d new FileReader(filepath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } catch (FileNotFoundException error) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            writeToFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            this.fr \u003d new FileReader(filepath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to get the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The main list of tasks as ArrayList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this.inputList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to update the main task list every time there is a change."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param updatedList The new list to replace the old one."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void updateTaskList(ArrayList\u003cTask\u003e updatedList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.inputList \u003d updatedList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to load the list of tasks from hard drive into the program to be modified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used to handle exception that occurs when the method is running."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void loadTasks() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String next \u003d br.readLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        while (next !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String[] input \u003d next.split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String status \u003d input[1];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String type \u003d input[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String extraInfo \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            for (int i \u003d 2; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                if (i \u003d\u003d input.length - 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    description +\u003d input[i];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    description +\u003d input[i];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    description +\u003d \" \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                inputList.add(new Todo(description));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                extraInfo \u003d br.readLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                inputList.add(new Event(description, extraInfo));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                extraInfo \u003d br.readLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                inputList.add(new Deadline(description, extraInfo));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (status.equals(\"done\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                inputList.get(inputList.size() - 1).completeTask();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            next \u003d br.readLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to update the hard drive with the most current list of tasks."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used to handle any exception that occurs."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void writeToFile() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (Task task : inputList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String status \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (task.getStatus()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                status \u003d \"done\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                status \u003d \"pending\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (task.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                output \u003d \"todo \" + status + \" \" + task.getDescription();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                fw.write(output + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else if (task.getType().equals(\"event\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                output \u003d \"event \" + status + \" \" + task.getDescription();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                fw.write(output + \"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                fw.write(task.getExtraInfo() + \"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else if (task.getType().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                output \u003d \"deadline \" + status + \" \" + task.getDescription();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                fw.write(output + \"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                fw.write(task.getExtraInfo() + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                throw new DukeException(\"     Invalid file type!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 141
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents a deadline task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the description and the date and time of the deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param description The main message of the deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param extraInfo The date and time of the deadline in exact format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Deadline(String description, String extraInfo) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.extraInfo \u003d extraInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.type \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.extraInfo + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 23
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents an event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in description and date and time of the event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param description The main message of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param extraInfo The date and time of the event in exact format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Event(String description, String extraInfo) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.extraInfo \u003d extraInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.type \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.extraInfo + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 23
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * The class that is used to represent various tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The type of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The main message of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Indicates the completion status of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Extra information of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected String extraInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the main message of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param description The main description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.extraInfo \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to return the type of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The type of task in String form."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to obtain the task completion status."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return True if the task is completed, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to obtain the main message of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to obtain any extra information of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The extra information of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String getExtraInfo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this.extraInfo;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to return the status icon based on completion status."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return Icon which relies on the completion status."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return (isDone ? \"V\" : \"X\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to mark a task as complete."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the main message of todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param description The description of the todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.type \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 21
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The array list of list of the tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the storage object containing the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param storage The storage containing the list in the hard drive."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws Exception Used to handle exception that occurs when constructing the class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public TaskList(Storage storage) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks \u003d storage.getList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in nothing for when there is no file yet in the hard drive."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to check if the list of tasks is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return True if the list is empty, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return listOfTasks.isEmpty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to indicate the size of the list of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The size of the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to return the list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return ArrayList of the list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this.listOfTasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to obtain the task using a given index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The task corresponding to the index given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return listOfTasks.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to delete a task from the list of tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task The task that the user wants to delete."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void removeTask(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.remove(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to add a general task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task The task that is to be added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to add a new Todo task into the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task A new todo task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void addTodo(Todo task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to add a new Event task into the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task A new Event task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void addEvent(Event task) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to add a new Deadline task into the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task A new Deadline task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void addDeadline(Deadline task) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 109
    }
  },
  {
    "path": "src/main/java/duke/time/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents a date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The day of the year."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The month of the year."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The year."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The output of the day in String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String dayOutput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The output of the month in String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String monthOutput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The output of the year in String."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String yearOutput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * To check if the format of the date is valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private boolean validFormat \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the day month and year to format it properly."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param day The day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws DukeException Error for when the input is not correct."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Date(int day, int month, int year) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String dayString \u003d String.valueOf(day);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String monthString \u003d String.valueOf(month);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String yearString \u003d String.valueOf(year);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (dayString.length() \u003e 2 || monthString.length() \u003e 2 || yearString.length() !\u003d 4) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            validFormat \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            dayOutput \u003d \"1st\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            dayOutput \u003d \"2nd\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            dayOutput \u003d \"3rd\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            dayOutput \u003d dayString + \"th\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"January\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"February\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"March\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"April\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"May\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"June\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"July\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"August\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"September\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"October\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"November\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            monthOutput \u003d \"December\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Invalid month entered!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        yearOutput \u003d yearString;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (day \u003c 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Negative date does not exist!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (monthOutput.equals(\"February\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (day \u003e 28) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                throw new DukeException(\"     February only has 28 days!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else if (monthOutput.equals(\"April\") || monthOutput.equals(\"June\") || monthOutput.equals(\"September\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || monthOutput.equals(\"November\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (day \u003e 30) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                throw new DukeException(\"     That month only has 30 days!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (day \u003e 31) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                throw new DukeException(\"     That month only has 31 days!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to check whether the format is valid or not."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return True if it is valid, false otherwise."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return validFormat;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this.dayOutput + \" of \" + monthOutput + \" \" + yearOutput;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 147
    }
  },
  {
    "path": "src/main/java/duke/time/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents the time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The time in number form."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected int time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The time formatted correctly as output."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected String outputTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * To indicate whether the format of the time is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    protected boolean validFormat \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in the time to format it correctly."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param time The time in number form."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws DukeException Error when the input is wrong."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Time(int time) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String timeString \u003d String.valueOf(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (timeString.length() \u003e 4) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            validFormat \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String format \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (time \u003e\u003d 1200) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            format \u003d \"pm\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            format \u003d \"am\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int hours \u003d time / 100;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        hours \u003d hours % 12;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        int minutes \u003d time % 100;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (minutes \u003e 60) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new DukeException(\"     Invalid minute format!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String hour \u003d String.valueOf(hours);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String minute \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (minutes !\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            minute \u003d \".\" + minutes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        outputTime \u003d hour + minute + format;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * To check if the time format is valid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return True if it is valid, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return validFormat;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return outputTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 67
    }
  },
  {
    "path": "src/main/java/duke/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Class that represents all the methods used to print out messages."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The main list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * The reader used to read the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructor that takes in list of tasks to be printed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param list The main list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public UI(TaskList list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.taskList \u003d list;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to read the user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return The user input in String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws IOException Used for when the reader has any errors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String readLine() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return reader.readLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print the lines for partition."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out an empty line."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printBlank() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task The main list of tasks to be printed out."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"       \" + task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Prints the introduction of the program during startub."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printIntro() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     What can I do for you?\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out error messages."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param error The error message to be printed out."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printError(DukeException error) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out indication that a new task has been added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task The task that is added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printTaskAdd(Task task) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printTask(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (taskList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            System.out.println(\"     Now you have \" + taskList.size() + \" task in the list\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            System.out.println(\"     Now you have \" + taskList.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out indication that a task has been deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task The task that is deleted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printTaskDelete(Task task) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     Noted. I have removed this task:\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printTask(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (taskList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            System.out.println(\"     Now you have \" + taskList.size() + \" task in the list\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            System.out.println(\"     Now you have \" + taskList.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out indication that the task has been completed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param task The task that is completed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printTaskDone(Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printTask(task);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out the list of tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            System.out.println(\"     \" + i + \". \" + taskList.get(i - 1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to print out the message when quitting the program."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        printBlank();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 163
    }
  },
  {
    "path": "src/main/text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "todo eat food"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": "todo wash clothes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "deadline get money /by tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "deadline get item /by sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "event breakinus welcome tea /at tuesday 2pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "robytanama": 9
    }
  },
  {
    "path": "src/main/text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "robytanama": 21
    }
  },
  {
    "path": "src/test/java/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.time.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void DateTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            Date date \u003d new Date(1, 2, 1999);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            assertEquals(\"1st of February 1999\", date.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            assertEquals(true, date.isValid());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            System.out.println(\"     Caught!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 10
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void TodoTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Todo todo \u003d new Todo(\"make some money\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(\"[T][X] make some money\", todo.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(\"todo\", todo.getType());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 13
    }
  }
]
