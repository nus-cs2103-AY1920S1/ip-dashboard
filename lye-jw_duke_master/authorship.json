[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 22,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 dukeCommand could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@rem Get dukeCommand-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@rem Slurp the dukeCommand line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@rem Setup the dukeCommand line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 4,
      "-": 80
    }
  },
  {
    "path": "src/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo FIRST"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline SECOND /by 20/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline THIRD /by 20/12/2019 0600 PM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline FOURTH /by 20/12/2019 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline FIFTH /by 20/12/2019 next week"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event SIXTH /at 10/12/2019 0600"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event SEVENTH /at 10/12/2019 06:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event EIGHTH /at 10/12/2019 6 PM"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 6"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline dsafdsf/by dafdsf"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event dhfgaf /atsgringsfg"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 3 5 6"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 4 6 6"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 31
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Parser.setFilePath(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new Duke(\"D:/Users/USER/Documents/0. NUS/NUS Y2S1/CS2103T/Individual Project/duke/data/duke.txt\").run();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                String fullCommand \u003d ui.readLineInput();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                if (c !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                ui.printError(de.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 47,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DukeException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 8
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String addType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public AddCommand(String addType, String userInput, String[] inputSplit, String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.addType \u003d addType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        switch (addType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (inputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if no description after \"todo\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"\\n     :( OOPS!!! The description of a todo cannot be empty.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Todo todo \u003d new Todo(userInput.replace(\"todo \", \"\"), 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks.addToList(todo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String writeStringT \u003d todo.getType() + \" \" + 0 + \" \" + todo.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.writeToFile(filePath, writeStringT, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printAddNotification(todo.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (!userInput.contains(\" /by \")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception for invalid deadline format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine + \"\\n     :( OOPS!!! For deadline please use the format\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"               \\\"deadline description /by end time\\\"\\n\" + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String[] splitStringD \u003d userInput.split(\" /by \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Date inputDateD \u003d Parser.convertToDate(splitStringD[1], Parser.dateFormats);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String inputDateStrD \u003d inputDateD \u003d\u003d null ? splitStringD[1]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    : new SimpleDateFormat(\"dd MMM yyyy, hh:mm a\").format(inputDateD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Deadline deadline \u003d new Deadline(splitStringD[0].replace(\"deadline \", \"\"), 0,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    inputDateStrD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks.addToList(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String writeStringD \u003d deadline.getType() + \" 0\" + \" \" + deadline.getDescription() + \" | \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + deadline.getEndTime() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.writeToFile(filePath, writeStringD, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printAddNotification(deadline.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (!userInput.contains(\" /at \")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception for invalid deadline format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine + \"\\n     :( OOPS!!! For event please use the format\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"               \\\"event description /at period\\\"\\n\" + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String[] splitStringE \u003d userInput.split(\" /at \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Date inputDateE \u003d Parser.convertToDate(splitStringE[1], Parser.dateFormats);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String inputDateStrE \u003d inputDateE \u003d\u003d null ? splitStringE[1]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    : new SimpleDateFormat(\"dd MMM yyyy, hh:mm a\").format(inputDateE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Event event \u003d new Event(splitStringE[0].replace(\"event \", \"\"), 0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    inputDateStrE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks.addToList(event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String writeStringE \u003d event.getType() + \" 0\" + \" \" + event.getDescription() + \" | \" + event.getEventPeriod()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.writeToFile(filePath, writeStringE, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printAddNotification(event.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 81
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String[] inputSplit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Command(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.inputSplit \u003d inputSplit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DeleteCommand(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (inputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if there is no task number or multiple words after \"delete\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"\\n     :( OOPS!!! Please specify number of a single task to delete.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int specifiedDel \u003d Integer.parseInt(inputSplit[1]); // will throw NumberFormatException if not int"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (specifiedDel \u003c 1 || specifiedDel \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if task number is beyond current number of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"\\n     :( OOPS!!! Please specify valid task number.\\n\" + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task delTask \u003d tasks.getElement(specifiedDel - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            tasks.deleteFromList(specifiedDel - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printDeleteNotification(delTask.toString(), tasks.getSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Write to file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.overwriteFile(tasks.toArrayList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(ui.separationLine + \"\\n     :( OOPS!!! Please specify task number as one integer only.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public DoneCommand(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (inputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if there is no task number or multiple words after \"done\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"\\n     :( OOPS!!! Please specify number of a single task to mark as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int specifiedDone \u003d Integer.parseInt(inputSplit[1]); // throws NumberFormatException if not int"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (specifiedDone \u003c 1 || specifiedDone \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Exception if task number is beyond current number of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                throw new DukeException(ui.separationLine"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + \"\\n     :( OOPS!!! Please specify valid task number.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Task doneTask \u003d tasks.getElement(specifiedDone - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            doneTask.setDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printDoneNotification(doneTask.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Write to file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            storage.overwriteFile(tasks.toArrayList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            ui.printError(ui.separationLine + \"\\n     :( OOPS!!! Please specify task number as one integer only.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ExitCommand(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ListCommand(String filePath, String[] inputSplit) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(filePath, inputSplit);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ui.printTaskList(tasks.toArrayList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 17
    }
  },
  {
    "path": "src/main/java/duke/helper/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static ArrayList\u003cSimpleDateFormat\u003e dateFormats \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy HH:mm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy hh:mm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy hh:mm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy hh:mm\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy h a\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy h a\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy h a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy hhmm a\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy hhmm a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy hhmm a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy HHmm\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy HHmm\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy HHmm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy Hmm\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy Hmm\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy Hmm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy hhmm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy hhmm\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy hhmm\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd MMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd MMMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd/M/yyyy\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd-M-yyyy\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd.M.yyyy\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new SimpleDateFormat(\"dd MMMM yyyy\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static Command parse(String userInput) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (\"bye\".equals(userInput)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new ExitCommand(filePath, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String[] inputSplit \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        switch (inputSplit[0]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new ListCommand(filePath, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new DoneCommand(filePath, inputSplit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"todo\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"deadline\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new AddCommand(\"event\", userInput, inputSplit, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new DeleteCommand(filePath, inputSplit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            // Exception if invalid instruction"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new DukeException(ui.separationLine"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\n     :( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + ui.separationLine + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static Date convertToDate(String dateString, ArrayList\u003cSimpleDateFormat\u003e dateFormats) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        for (SimpleDateFormat sdf : dateFormats) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                sdf.setLenient(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                date \u003d sdf.parse(dateString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // Continue checking for matching date format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (date !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static void setFilePath(String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Parser.filePath \u003d filePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 97
    }
  },
  {
    "path": "src/main/java/duke/helper/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        File listFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        listFile.createNewFile(); // Directory data needs to exist already"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(listFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String type \u003d fileScanner.next();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            int isDone \u003d Integer.parseInt(fileScanner.next());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String remaining \u003d fileScanner.nextLine().trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String[] remainingSplit \u003d remaining.split(\" \\\\| \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                tasks.add(new Todo(remaining, isDone));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                tasks.add(new Deadline(remainingSplit[0], isDone, remainingSplit[1]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                tasks.add(new Event(remainingSplit[0], isDone, remainingSplit[1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void writeToFile(String filePath, String textToAdd, boolean isAppend) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            FileWriter fw \u003d isAppend ? new FileWriter(filePath, true) : new FileWriter(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new Ui().printError(\"Failed to save changes to file. Please try again.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void overwriteFile(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String saveToFile \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        for (Task t : listOfTasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            saveToFile +\u003d String.format(\"%s %d %s\", t.getType(), t.getIsDone(), t.getDescription());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (\"D\".equals(t.getType())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                saveToFile +\u003d \" | \" + ((Deadline) t).getEndTime();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } else if (\"E\".equals(t.getType())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                saveToFile +\u003d \" | \" + ((Event) t).getEventPeriod();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            saveToFile +\u003d \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        writeToFile(filePath, saveToFile, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 72
    }
  },
  {
    "path": "src/main/java/duke/helper/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String separationLine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        separationLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String logo \u003d \"      ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n\" + logo + \"\\n     Hello! I\u0027m Duke\\n     What can I do for you?\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + separationLine + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String readLineInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(\"Error loading from file. Initiating with empty Task list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printError(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.err.println(message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.out.println(\"     \" + (tasks.indexOf(task) + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printDoneNotification(String doneTask) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n     Nice! I\u0027ve marked this task as done:\\n       \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + doneTask + \"\\n\" + separationLine + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printAddNotification(String addTask, int listSize) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       \" + addTask"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"\\n     Now you have \" + listSize + \" tasks in the list.\" + \"\\n\" + separationLine + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printDeleteNotification(String delTask, int listSize) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n     Noted. I\u0027ve removed this task:\\n       \" + delTask"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"\\n     Now you have \" + listSize + \" tasks in the list.\" + \"\\n\" + separationLine + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.out.println(separationLine + \"\\n     Bye. Hope to see you again soon!\\n\" + separationLine);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Deadline(String description, int isDone, String endTime) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + endTime + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String eventPeriod;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Event(String description, int isDone, String eventPeriod) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.eventPeriod \u003d eventPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getEventPeriod() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return eventPeriod;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventPeriod + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    protected int isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Task(String description, int isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.isDone \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public int getIsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String doneSymbol \u003d isDone \u003d\u003d 1 ? \"[+]\" : \"[ ]\"; // \"[\\u2713]\" : \"[\\u2718]\"; don\u0027t display properly in console"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return doneSymbol + \" \" + description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 34
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private ArrayList\u003cTask\u003e taskStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.taskStore \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskStore) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.taskStore \u003d taskStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ArrayList\u003cTask\u003e toArrayList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return taskStore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void addToList(Task addTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        taskStore.add(addTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void deleteFromList(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        taskStore.remove(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Task getElement(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return taskStore.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return taskStore.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public Todo(String description, int isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 14
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 10
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String separationLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_todo_success() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Different systems use different lineSeparator (with println)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expected \u003d separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       [T][ ] home work\\n     \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"Now you have 1 tasks in the list.\\n\" + separationLine + \"\\n\" + System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new AddCommand(\"todo\", \"todo home work\", new String[]{\"todo\", \"home work\"}, \"\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_deadline_success() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expected \u003d separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       [D][ ] home work \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"(by: 20 Oct 2019, 06:00 PM)\\n     Now you have 1 tasks in the list.\\n\" + separationLine + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new AddCommand(\"deadline\", \"deadline home work /by 20/10/2019 1800\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new String[]{\"deadline\", \"home\", \"work\", \"/by\", \"20/10/2019\", \"1800\"}, \"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_event_success() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expected \u003d separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       [E][ ] Birthday party \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"(at: 21 Nov 2019, 06:45 PM)\\n     Now you have 1 tasks in the list.\\n\" + separationLine + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new AddCommand(\"event\", \"event Birthday party /at 21.11.2019 0645 PM\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new String[]{\"event\", \"Birthday\", \"party\"}, \"\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_todoEmptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new AddCommand(\"todo\", \"todo\", new String[]{\"todo\"}, \"\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String wrongExpected \u003d separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       [T][ ] \\n     \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"Now you have 1 tasks in the list.\\n\" + separationLine + \"\\n\" + System.lineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(wrongExpected, outContent.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine + \"\\n     \\u2639 OOPS!!! The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\n\" + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_deadlineWrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new AddCommand(\"deadline\", \"deadline WORK/by 20/10/2019 1800\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    new String[]{\"deadline\", \"WORK/by\", \"20/10/2019\", \"1800\"}, \"\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String wrongExpected \u003d separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       [D][ ] WORK \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"(by: 20 Oct 2019, 06:00 PM)\\n     Now you have 1 tasks in the list.\\n\" + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(wrongExpected, outContent.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine + \"\\n     \\u2639 OOPS!!! For deadline please use the format\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"               \\\"deadline description /by end time\\\"\\n\" + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeAdd_eventWrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new AddCommand(\"event\", \"event Celebration /at21/11/2019 0645 PM\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    new String[]{\"event\", \"Celebration\"}, \"\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String wrongExpected \u003d separationLine + \"\\n     Got it. I\u0027ve added this task:\\n       [E][ ] Birthday party\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \" (at: 21 Nov 2019, 06:45 PM)\\n     Now you have 1 tasks in the list.\\n\" + separationLine + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(wrongExpected, outContent.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine + \"\\n     \\u2639 OOPS!!! For event please use the format\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"               \\\"event description /at period\\\"\\n\" + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 107
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String separationLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDelete_validInput_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new Todo(\"deleteTest\", 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expected \u003d separationLine + \"\\n     Noted. I\u0027ve removed this task:\\n       [T][+] deleteTest\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"\\n     Now you have 0 tasks in the list.\" + \"\\n\" + separationLine + \"\\n\" + System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new DeleteCommand(\"\", new String[]{\"delete\", \"1\"})"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(temp), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDelete_noTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DeleteCommand(\"\", new String[]{\"delete\"})"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\n     \\u2639 OOPS!!! Please specify number of a single task to delete.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDelete_itemNotInt_noOutputOutsideExecute() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new DeleteCommand(\"\", new String[]{\"delete\", \"first item\"})"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"\", outContent.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDelete_intBeyondList_exceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DeleteCommand(\"\", new String[]{\"delete\", \"100\"})"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine + \"\\n     \\u2639 OOPS!!! Please specify valid task number.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 71
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String separationLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDone_validInput_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new Todo(\"doneTest\", 0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expected \u003d separationLine + \"\\n     Nice! I\u0027ve marked this task as done:\\n       [T][+] doneTest\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"\\n\" + separationLine + \"\\n\" + System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new DoneCommand(\"\", new String[]{\"done\", \"1\"})"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(temp), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDone_noTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DoneCommand(\"\", new String[]{\"done\"})"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"\\n     \\u2639 OOPS!!! Please specify number of a single task to mark as done.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDone_itemNotInt_noOutputOutsideExecute() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new DoneCommand(\"\", new String[]{\"done\", \"first item\"})"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"\", outContent.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeDone_intBeyondList_exceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new DoneCommand(\"\", new String[]{\"done\", \"100\"})"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    .execute(new TaskList(), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d separationLine + \"\\n     \\u2639 OOPS!!! Please specify valid task number.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + separationLine + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 71
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.helper.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private String separationLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void executeList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new Todo(\"todo list test\", 0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new Deadline(\"deadline list test\", 1, \"tonight\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            add(new Event(\"event list test\", 0, \"the weekend\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expected \u003d separationLine + \"\\n     Here are the tasks in your list:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     1.[T][ ] todo list test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     2.[D][+] deadline list test (by: tonight)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \"     3.[E][ ] event list test (at: the weekend)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + separationLine + \"\\n\" + System.lineSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        new ListCommand(\"\", null).execute(new TaskList(temp), new Ui(), new Storage(\"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 34
    }
  },
  {
    "path": "src/test/java/duke/helper/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Parser.parse(\"Random gibberish\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String correctExpected \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"     \\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"    ____________________________________________________________\" + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertEquals(correctExpected, de.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 23
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[D][ ] deadline String test (by: 20 Oct 2019, 06:00 PM)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new Deadline(\"deadline String test\", 0, \"20 Oct 2019, 06:00 PM\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 14
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[E][+] event String test (at: 20 Oct 2019, 4-6pm)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new Event(\"event String test\", 1, \"20 Oct 2019, 4-6pm\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 14
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[+] task String test\", new Task(\"task String test\", 1).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 13
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(\"[T][ ] todo String test\", new Todo(\"todo String test\", 0).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 13
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "      ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Got it. I\u0027ve added this dukeTask:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [T][ ] borrow book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Got it. I\u0027ve added this dukeTask:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [D][ ] return book (by: Sunday)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Got it. I\u0027ve added this dukeTask:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     1.[T][ ] borrow book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     2.[D][ ] return book (by: Sunday)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     3.[E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Nice! I\u0027ve marked this dukeTask as done:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     1.[T][ ] borrow book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     2.[D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     3.[E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Noted. I\u0027ve removed this dukeTask:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "       [D][+] return book (by: Sunday)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     1.[T][ ] borrow book"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     2.[E][ ] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 63
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "random string"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "deadline return book 2/by Sunday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "event project meeting 2 /atMon 4-6pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done everything"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done -2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 20"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "done 0 7 4 3 7"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete everything"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete -2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "delete 9 5 3 7 9"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 27
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the dukeTask `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another dukeTask. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the dukeCommand `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":bulb: Simply run the dukeCommand `gradlew {taskName}` in the terminal and Gradle will run the dukeTask! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` dukeCommand."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the dukeCommand will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Now you can run the dukeCommand `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the dukeCommand `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        └─seedu/duke/duke.DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/duke.DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 8,
      "-": 162
    }
  }
]
