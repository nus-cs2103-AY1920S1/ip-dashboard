[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//sourceSets.main.resources { srcDirs \u003d [\"src/main/java\"]; include \"**/*.*\" }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 42
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1
    }
  },
  {
    "path": "src/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "       [T][✗] borrow book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     1.[T][✗] borrow book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "       [D][✗] return book (by: Sunday)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Now you have 1 tasks in the list."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23
    }
  },
  {
    "path": "src/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deadline return book /by Sunday"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.StorageInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * duke.Main class used to drive the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author Wilfred Bradley Tan, A0185405E."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Object used to execute commands. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** User interface to display feedback and instructions to user. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private UiManager ui \u003d new UiManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Storage object to facilitate loading and saving of tasks. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StorageInterface storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** List of tasks added by the user. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Initiates the system by requesting for user input. Executes the next command after parsed //     * by the Parser and fed to the command object. Error messages will be shown if invalid commands are given. //     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (duke.task.Task t : taskList.getTasks()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                logger.info(\"loaded tasks\" + t.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(Message.loadingError());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getResponse(String userInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"reached\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (duke.task.Task t : taskList.getTasks()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                logger.info(\"responded things \" + t.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            output \u003d command.execute(taskList).getUserFeedback();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            output \u003d Message.error(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 58,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UiManager ui \u003d new UiManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ui.start(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Command class that executes parsed commands given to it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Drives the system by processing the given commands and doing the corresponding actions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList which carries out tasks which edit the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when invalid or incomplete commands are given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public abstract CommandResult execute(TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String userFeedback;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult(String userFeedback, boolean isExit) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.userFeedback \u003d userFeedback;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult(String userFeedback) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.userFeedback \u003d userFeedback;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getUserFeedback() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.userFeedback;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description portion of the input. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DeadlineCommand(String desc, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deadline \u003d new Deadline(desc, date, time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.addSuccess(deadline, taskList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DeleteCommand(int deleteIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.deleteIndex \u003d deleteIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deletedTask \u003d taskList.get(deleteIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.delete(deleteIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.deleteSuccess(deletedTask, taskList));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task doneTask \u003d taskList.get(doneIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.setDone(doneTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.doneSuccess(doneTask));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description portion of the input. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EventCommand(String desc, LocalDate startDate, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task event \u003d new Event(desc, startDate, startTime, endTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.addSuccess(event, taskList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ExitCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.exit(), isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 14
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList filteredList \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.findSuccess(filteredList));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 20
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showList(taskList));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 13
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description portion of the input. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TodoCommand(String desc) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task todo \u003d new Todo(desc);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.add(todo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.addSuccess(todo, taskList));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24
    }
  },
  {
    "path": "src/main/java/duke/command/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Command package which contains classes that can be used to execute commands received by the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * DukeException class which can be thrown when exceptions related to Duke are raised. Will eventually be caught by"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Duke Object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a DukeException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param errorMessage Custom error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param err Throwable which is raised by the exception caught."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DukeException(String errorMessage, Throwable err) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(errorMessage, err);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Exception package which contains custom exceptions for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.exception;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Parser class used to process Strings into variables that the Command object can execute."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses user input into a Command object containing its required components such as description, date and time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      according to the command given."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userInput Input provided by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when there is an invalid format provided. For example,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      missing date / time or incorrect date / time format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Scanner sc \u003d new Scanner(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String commandString \u003d sc.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (commandString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String keyword \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new FindCommand(keyword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command. Please input at least 1 keyword!\", e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String desc \u003d sc.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new TodoCommand(desc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command. Please include a description!\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String[] descriptionAndDate \u003d sc.nextLine().split(\"/\", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String[] dateTimeArr \u003d descriptionAndDate[1].split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String desc \u003d descriptionAndDate[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(dateTimeArr[0], dateFormatter());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(dateTimeArr[1], timeFormatter());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String[] timeRange \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                if (commandString.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return new DeadlineCommand(desc, date, time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    LocalTime endTime \u003d LocalTime.parse(timeRange[1], timeFormatter());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return new EventCommand(desc, date, time, endTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NoSuchElementException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command, please include a date and time\", e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                int deleteIndex \u003d sc.nextInt();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new DeleteCommand(deleteIndex - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Please enter the command in this format: delete [index]\", e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                int doneIndex \u003d sc.nextInt();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new DoneCommand(doneIndex - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Please enter the command in this format: done [index]\", e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!! I\u0027m sorry, but I don\u0027t know what that means :-(\", null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses Strings into Task objects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskData String in the format type|isDone|desc|startDate(optional)|startTime(optional)|endTime(optional)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException Exception is thrown when an invalid task is loaded."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Task parseStringToTask(String taskData) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String desc;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        LocalDate newStartDate;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        LocalTime newStartTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        LocalTime newEndTime;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String[] dataArr \u003d taskData.split(\"[|]\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        type \u003d dataArr[0];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        isDone \u003d (dataArr[1].equals(\"1\")) ? true : false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        desc \u003d dataArr[2];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask \u003d new Todo(desc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask.setDone(isDone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartDate \u003d LocalDate.parse((dataArr[3]), dateFormatter());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartTime \u003d LocalTime.parse((dataArr[4]), timeFormatter());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask \u003d new Deadline(desc, newStartDate, newStartTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask.setDone(isDone);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartDate \u003d LocalDate.parse((dataArr[3]), dateFormatter());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartTime \u003d LocalTime.parse((dataArr[4]), timeFormatter());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newEndTime \u003d LocalTime.parse((dataArr[5]), timeFormatter());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask \u003d new Event(desc, newStartDate, newStartTime, newEndTime);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask.setDone(isDone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(\"invalid task loaded\", 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * DateTimeFormatter which can be used to validate the formats of date strings."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return DateTimeFormatter to validate date formats."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DateTimeFormatter dateFormatter() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][dd/MM/yy][dd-MM-yyyy]\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"[dd-MM-yy]\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * DateTimeFormatter which can be used to validate the formats of time strings."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return DateTimeFormatter to validate time formats."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DateTimeFormatter timeFormatter() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"[HHmm][HH:mm][H]\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 161
    }
  },
  {
    "path": "src/main/java/duke/parser/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Parser package which contains classes which can process user input into objects that can be used by Command objects."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.parser;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Storage class which handles the loading and saving of Task data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Storage implements StorageInterface {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Filepath to load from and save to. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String DEFAULT_PATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Storage object with the default file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.file \u003d new File(DEFAULT_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Storage object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param filePath File path to load to and save from."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Loads a file and parses the data into Tasks which are stored in a TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Tasklist that contains the loaded tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IOException Exception is thrown when an invalid file path is provided."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"load called in Storage\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            InputStreamReader isr \u003d new InputStreamReader(fis, \"UTF-8\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                Task newTask \u003d Parser.parseStringToTask(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(\"Failed to parse String to task\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Saves the data of the TaskList in a text file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that is to be saved."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String formattedData \u003d formatData(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                writer.append(formattedData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                writer.append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(\"invalid filePath\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Formats the data of a Task in the format of type|isDone|desc|startDate(optional)|startTime(optional)|endTime"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * (optional)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param currTask Task that will be formatted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String of the formatted Task data."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String formatData(Task currTask) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String data \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        data +\u003d currTask.getType() + \"|\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        data +\u003d currTask.getDone() ? \"1|\" : \"0|\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        data +\u003d currTask.getDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currTask instanceof Deadline) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            data +\u003d \"|\" + ((Deadline) currTask).getDate().format(dateFormatter)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"|\" + ((Deadline) currTask).getTime().format(timeFormatter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currTask instanceof Event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            data +\u003d \"|\" + ((Event) currTask).getStartDate().format(dateFormatter)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"|\" + ((Event) currTask).getStartTime().format(timeFormatter)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"|\" + ((Event) currTask).getEndTime().format(timeFormatter);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 124
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public interface StorageInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void save(TaskList taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 14
    }
  },
  {
    "path": "src/main/java/duke/storage/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Storage package which contains classes that handle the loading and saving of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.storage;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Deadline class indicated with type \"D\" which contains a date and time on top of other Task components."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Date of the Deadline. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time of the Deadline. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param date Date of the Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param time Time of the Deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Deadline(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the type followed by status icon, description, date and time of Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + date + \" \" + time + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the date of the Deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Date of the Deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the time of the Deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Time of the Deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Event class indicated with type \"E\" which contains a start date, start time and end time on top of the other"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * components that Task has."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Date when the event starts. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time when the event starts. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time when the event ends. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises and Event object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startDate Date when the Event starts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startTime Time when the Event starts."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param endTime Time when the Event ends."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Event(String description, LocalDate startDate, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the date when the Event starts."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Start date of Event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the time when the Event starts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Start time of the Event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the time when the Event ends."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return End time of the Event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the type followed by status icon, description, start date, start time and end time of the Event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + startDate + \" \" + startTime"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"-\" + endTime + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Task class which can be extended to create sub tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Type of Task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description of Task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Boolean indicated whether Task is done or not. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Task object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the status icon of the task. Shows a tick if done and an \"x\" if Task is not done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Status icon of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Task as done or not depending on the argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isDone boolean to determine whether Task is marked as done or not."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the type of the Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Type of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the description of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Description of the Task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the status of the Task (i.e. whether done or not)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Status of the Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the status icon followed by description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Todo class indicated with type \"T\" which contains a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Todo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Todo class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the type followed by status icon and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[\" + this.type + \"]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 25
    }
  },
  {
    "path": "src/main/java/duke/task/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Task package which contains the various types of tasks that the user can create."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.StorageInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TaskList class which handles the commands related to the task list such as add and remove."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** List of tasks. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StorageInterface storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises the TaskList object with an empty task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Finds a task from the taskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param keyword Keyword that user is searching for in task\u0027s description. For example, \"test string\" contains"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *                the \"test\" keyword."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return TaskList that contains the tasks that were found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e filteredList \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                tasks.stream().filter(t -\u003e t.getDescription().contains(keyword))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new TaskList(filteredList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param task Task that is to be added to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when an invalid task is added. For example, an incomplete command or"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      tasks with null description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add(Task task) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            requireNonNull(task.getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"Sorry, that\u0027s an incomplete command. Failed to add task.\", null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Removes the task from the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param index Index of the task to be removed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when an invalid index is provided i.e. IndexOutOfBoundsException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That index is out of range! Task not deleted.\", e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the task as done in the Storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param task Task which will be set as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when an invalid index is provided i.e. IndexOutOfBoundsException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setDone(Task task) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That index is out of range! Task not marked as done.\", e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the TaskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the size of the task list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Integer indicating the size of the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the task from the index stated."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param index Index of the task to be retrieved."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Task which is retrieved."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That index is out of range! Task not marked as done.\", e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 120
    }
  },
  {
    "path": "src/main/java/duke/tasklist/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Tasklist package which contains classes that handle actions pertaining to modifying or querying the tasklist."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.tasklist;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 62
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.DialogBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"/view/MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public MainWindow(Stage primaryStage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fxmlLoader.setLocation(getFxmlFileUrl(FXML));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fxmlLoader.setRoot(primaryStage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        duke \u003d new Duke();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    DialogBox.getDukeDialog(\"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            + \"What can I do for you?\", dukeImage)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 97
    }
  },
  {
    "path": "src/main/java/duke/ui/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a welcome message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String welcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"    Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"    What can I do for you?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a good bye message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String exit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"    Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that is to be shown."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Throws an exception if it is an invalid list or there exists and invalid task in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            list +\u003d (i + 1) + \". \" + taskList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a formatted error message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param errorMessage Error message that will be printed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String error(String errorMessage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows the loading error message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String loadingError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"No existing data. Duke initialised with an empty TaskList\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows the invalid input error message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String invalidInputError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"☹ OOPS!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String findSuccess(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + showList(taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message when a task has been successfully added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param addedTask Task that is to be added."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that the Task is to be added to."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String addSuccess(Task addedTask, TaskList taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + addedTask + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Now you have \" + taskList.getSize() + \" tasks in this list.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message when a task has been successfully deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param deletedTask Task that is to be deleted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that the Task is to be deleted from."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String deleteSuccess(Task deletedTask, TaskList taskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + deletedTask + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Now you have \" + taskList.getSize() + \" tasks in this list.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message when a task is successfully marked as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param doneTask Task that is to be marked as done."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String doneSuccess(Task doneTask) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + doneTask;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 95
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Ui class which generates feedback to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UiManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23
    }
  },
  {
    "path": "src/main/java/duke/ui/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Ui package which contains classes that provide feedback to users."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "       \u003cScene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "           \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                       prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                           prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                           onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                           prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                       \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                           \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                       \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "       \u003c/Scene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 30
    }
  },
  {
    "path": "src/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 34
    }
  },
  {
    "path": "src/test/java/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import storage.StorageInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StorageStub implements StorageInterface {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList load() throws IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 15
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Storage Test class to test the functionality of the Storage class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Absolute file path used to test loading and saving functionality. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FILEPATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of formatting a Todo into the format used for saving / loading."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void formatData_todo_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task todoStub \u003d new Todo(\" testString\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"T|0| testString\", new Storage(FILEPATH).formatData(todoStub));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of formatting a Deadline into the format used for saving / loading."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void formatData_deadline_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deadlineStub \u003d new Deadline(\" testString \", dateStub(), timeStub());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"D|0| testString |26/11/1996|1234\", new Storage(FILEPATH).formatData(deadlineStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of formatting a Event into the format used for saving / loading."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void formatData_event_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task eventStub \u003d new Event(\" testString \", dateStub(), timeStub(), timeStub());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"E|0| testString |26/11/1996|1234|1234\", new Storage(FILEPATH).formatData(eventStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalDate constant which can be used for testing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalDate stub used for testing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalDate dateStub() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalDate.parse(\"26/11/1996\", formatter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalTime constant which can be used for testing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalTime stub used for testing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalTime timeStub() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalTime.parse(\"1234\", formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 67
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import storage.StorageInterface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TaskListTest class used to test the functionality of TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Storage stub with hard-coded file paths to pass as parameter for test methods. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StorageInterface storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an ArrayList with the provided task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param task Task that the ArrayList will be created with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return ArrayList of the task provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e createList(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of adding Todo / Deadline / Event tasks to a TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is raised when an invalid task is added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add_tasks_success() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task todoStub \u003d new Todo(\" testString\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e testTodoList \u003d createList(todoStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList todoTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        todoTaskList.add(todoStub, storageStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(testTodoList, todoTaskList.getTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deadlineStub \u003d new Deadline(\" testString \", dateStub(), timeStub());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e testDeadlineList \u003d createList(deadlineStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList deadlineTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        deadlineTaskList.add(deadlineStub, storageStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(testDeadlineList, deadlineTaskList.getTasks());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task eventStub \u003d new Event(\" testString \", dateStub(), timeStub(), timeStub());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e testEventList \u003d createList(eventStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList eventTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        eventTaskList.add(eventStub, storageStub);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(testEventList, eventTaskList.getTasks());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalDate constant which can be used for testing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalDate stub used for testing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalDate dateStub() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalDate.parse(\"26/11/1996\", formatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalTime constant which can be used for testing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalTime stub used for testing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalTime timeStub() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalTime.parse(\"1234\", formatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 79
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//public class UiTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    public void setUpStreams() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    @AfterEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    public void restoreStreams() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setOut(originalOut);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setErr(originalErr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24
    }
  },
  {
    "path": "tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "T|1| hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "D|0| hello |25/11/1996|1234"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "D|0| hello |26/11/1996|1200"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "D|0| hello |26/11/1996|1200"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external commandBuilder` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 169
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 106
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `duke.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `duke.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(DukeStub.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Now, we can go back to the `duke.Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(DukeStub.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 240
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   Why does `duke.Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   The `duke.Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Let\u0027s create a new `duke.Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "**duke.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class duke.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Application.launch(duke.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "-": 285
    }
  }
]
