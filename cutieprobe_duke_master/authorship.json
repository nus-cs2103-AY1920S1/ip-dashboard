[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    mainClassName \u003d \"duke.ui.Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "cutieprobe": 35
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " 1. Ensure that you have Java Version 11 installed on your computer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " 2. Download the latest jar file [here](https://github.com/cutieprobe/duke/releases)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "## Working Screenshot"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "![working screenshot](https://raw.githubusercontent.com/cutieprobe/duke/master/docs/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "1. Manage tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "2. Customize commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### Feature 1: Manage Tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Add, remove, search and view various types of tasks to manage your daily life."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### Feature 2: Customize Commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Add customized shorter aliases for commands to enjoy more efficient typing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `todo` - Add a todo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `t`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Add a new todo task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`todo kfc interview`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "       [T][✘] kfc interview"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `deadline` - Add a deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `dd`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Add a new deadline task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`deadline Duke project /by 30/09/2019 23:59`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "       [D][✘] duke project (by: 30/09/2019 23:59)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `event` - Add a event"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `e`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Add a new event task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`event GER1000 meeting /at 02/10/2019 14:30`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "       [E][✘] ger1000 meeting (at: 02/10/2019 14:30)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `list` - List all tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `l`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "List all tasks in the task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "          1.[T][✘] duke project"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "          2.[D][✓] kfc interview (by: 01/10/2019 23:59)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "          3.[E][✘] eat ice cream (at: 01/10/2019 04:00)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "          4.[T][✘] gym! gym! gym!"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `done` - Mark a task as done"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `dn`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Mark an existing task as done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     [T][✓] duke project"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `delete` - Delete a task"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `de`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Delete an existing task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     [D][✓] kfc interview (by: 01/10/2019 23:59)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `find` - Search for tasks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `t`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Search for all tasks matching the keyword."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "          1.[E][✘] ger1000 meeting (at: 02/10/2019 14:30)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `bye` - Exit the application"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `b`, `exit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Exit the application."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `alias add` - Add an alias to a keyword"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `aa`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Add an alias to a command keyword."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`alias add ls list`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"ls\" is now mapped to \"list\"."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `alias delete` - Delete an alias"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `t`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Delete an alias so that it is no longer mapped to its keyword."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`alias delete l list`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"l\" is no longer mapped to \"list\"."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `alias view` - View an alias"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `t`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "View an alias and the keyword mapped it is mapped to."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`alias view t`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"t\" is an alias for \"todo\"."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `alias list` - List all aliases of a keyword"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `al`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "View all aliases mapped to a keyword."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`alias list bye`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Here are the aliases for \"bye\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     b, exit"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "### `alias all` - List all aliases and their keywords"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Default alias: `aall`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "View all aliases and their respective keywords."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`alias all`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     Here are the available aliases (left) and their mapped keywords (right):"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"aa\": \"alias add\"."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"aall\": \"alias all\"."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"ad\": \"alias delete\"."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"al\": \"alias list\"."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"av\": \"alias view\"."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"b\": \"bye\"."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"dd\": \"deadline\"."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"de\": \"delete\"."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"dn\": \"done\"."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"e\": \"event\"."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"exit\": \"bye\"."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"f\": \"find\"."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"l\": \"list\"."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     \"t\": \"todo\"."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "cutieprobe": 240
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "cutieprobe": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Start the gui application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param stage stage object of the application"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        mainWindow \u003d new MainWindow(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        mainWindow.setGui(stage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Label initialMessageLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            model \u003d storage.loadData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showGreeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showException(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            model \u003d new Model();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String initialMessage \u003d ui.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            assert !initialMessage.isEmpty() : \"Empty message at the start!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            initialMessageLabel \u003d new Label(initialMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            mainWindow.displayMessage(initialMessageLabel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Start executing the duke project."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String process(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Command command \u003d parser.parse(model, input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            command.execute(model, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return ui.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 63
    }
  },
  {
    "path": "src/main/java/duke/commands/AddAliasCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class AddAliasCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public AddAliasCommand(String alias, String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add an alias to a command keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Aliases aliases \u003d model.getAliases();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (aliases.containsAlias(alias)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(String.format(\"The alias is already mapped to %s!\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    aliases.getKeyword(alias)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!Aliases.KEYWORDS.contains(keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(String.format(\"The keyword %s does not exist!\", keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        aliases.addAlias(alias, keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showAddAlias(alias, keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage.saveData(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Perform a command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public abstract void execute(Model model, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 18
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a deadline command instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information of the deadline task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param by deadline of the deadline task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public DeadlineCommand(String description, String by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a deadline task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Task deadline \u003d new Deadline(this.description, this.by);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showAddTask(deadline, taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage.saveData(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteAliasCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class DeleteAliasCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public DeleteAliasCommand(String alias) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Delete an alias mapped to a keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Aliases aliases \u003d model.getAliases();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!aliases.containsAlias(alias)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The alias does not exist!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String keyword \u003d aliases.getKeyword(alias);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        aliases.removeAlias(alias);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showDeleteAlias(alias, keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage.saveData(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a delete command instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param taskIndex index of the task to be deleted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Delete a task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Task task \u003d taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            taskList.removeTask(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showDelete(task, taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            storage.saveData(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a done command instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param taskIndex index of the task to be marked as done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Task task \u003d taskList.getTask(this.taskIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showDone(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage.saveData(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create an event command instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information about the event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param at date and time of the event in string format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public EventCommand(String description, String at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create an event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Task event \u003d new Event(this.description, this.at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showAddTask(event, taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage.saveData(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Exit the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        new java.util.Timer().schedule("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                new java.util.TimerTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                        System.exit(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                500"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Find a task containing the given keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        List\u003cTask\u003e selectedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(this.keyword)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                selectedTasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (selectedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showNoMatchingTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showMatchingTasks(selectedTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/ListAllAliasesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ListAllAliasesCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * List all available aliases and their mapped keywords in Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Aliases aliases \u003d model.getAliases();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (aliases.getAllAliases().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showNoAliases();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showAllAliases(aliases);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * list all tasks in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showNoTask();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showTasks(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/ListMatchingAliasesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ListMatchingAliasesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public ListMatchingAliasesCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * View all aliases mapped to a keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Aliases aliases \u003d model.getAliases();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!Aliases.KEYWORDS.contains(keyword)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The keyword does not exist!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        List\u003cString\u003e matchingAliases \u003d aliases.getAliases(keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (matchingAliases.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showNoMatchingAliases(keyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ui.showMatchingAliases(matchingAliases, keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a to-do command instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information about the todo task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a to-do task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Task todo \u003d new Todo(this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showAddTask(todo, taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        storage.saveData(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/ViewAliasCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ViewAliasCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public ViewAliasCommand(String alias) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * View an alias and the keyword it is mapped to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model model of the Duke project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param ui an instance of the Ui class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param storage an instance of the storage class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when executing the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void execute(Model model, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Aliases aliases \u003d model.getAliases();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!aliases.containsAlias(alias)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The alias does not exist!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ui.showViewAlias(alias, aliases.getKeyword(alias));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 31
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a new Duke exception."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param message Description of the exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 11
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Model implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Aliases aliases \u003d new Aliases();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Aliases getAliases() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return aliases;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 19
    }
  },
  {
    "path": "src/main/java/duke/parser/Aliases.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Aliases implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e KEYWORDS \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            \"bye\", \"list\", \"done\", \"delete\", \"todo\", \"deadline\", \"event\", \"find\", \"alias add\", \"alias delete\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            \"alias view\", \"alias list\", \"alias all\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private HashMap\u003cString, String\u003e aliases \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"b\",\"bye\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"exit\",\"bye\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"l\",\"list\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"dn\",\"done\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"de\",\"delete\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"t\",\"todo\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"dd\",\"deadline\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"e\",\"event\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"f\",\"find\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"aa\",\"alias add\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"ad\",\"alias delete\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"av\",\"alias view\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"al\",\"alias list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(\"aall\",\"alias all\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add a new alias for a keyword."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias alias of the keyword"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword the full keyword mapped by the alias"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addAlias(String alias, String keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        aliases.put(alias, keyword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Check whether the alias exit in the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias the alias to be checked"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a boolean indicating whether the alias exists"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public boolean containsAlias(String alias) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return aliases.containsKey(alias);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get a keyword using its alias."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias alias of the keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return full keyword mapped by the alias"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getKeyword(String alias) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return aliases.get(alias);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Remove an alias from the application."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias the alias to be removed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void removeAlias(String alias) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        aliases.remove(alias);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get all aliases available in the project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a set containing all aliases"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getAllAliases() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return aliases.keySet();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get all aliases mapped to the given keyword."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword keyword used to map alias"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a List of String containing all aliases mapped to the keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public List\u003cString\u003e getAliases(String keyword) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        List\u003cString\u003e matchingAliases \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String alias: aliases.keySet()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (aliases.get(alias).equals(keyword)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                matchingAliases.add(alias);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return matchingAliases;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 90
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.AddAliasCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.DeleteAliasCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.ListAllAliasesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.ListMatchingAliasesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.commands.ViewAliasCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String[] getCommandTokens(String input) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            input \u003d input.trim().toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String[] tokens \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String command \u003d tokens[0].trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // If the command is \"bye\" or \"list\"."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return new String[]{command, \"\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String arguments \u003d tokens[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (command.equals(\"alias\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                tokens \u003d input.split(\" \", 3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                command \u003d command + \u0027 \u0027 + tokens[1].trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                if (tokens.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    return new String[]{command, \"\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                arguments \u003d tokens[2].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new String[]{command, arguments};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The command is invalid!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseDone(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new DoneCommand(Integer.parseInt(arguments) - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseDelete(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(arguments) - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseTodo(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new TodoCommand(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseDeadline(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String[] taskDetails \u003d arguments.split(\"/by\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String description \u003d taskDetails[0].trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String by \u003d taskDetails[1].trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new DukeException(\"The task description cannot be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else if (by.isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new DukeException(\"The task deadline cannot be empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new DeadlineCommand(description, by);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The task description and deadline cannot be empty.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseEvent(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String[] taskDetails \u003d arguments.split(\"/at\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String description \u003d taskDetails[0].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String at \u003d taskDetails[1].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new DukeException(\"The task description cannot be empty.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else if (at.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new DukeException(\"The task date/time cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new EventCommand(description, at);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The task description and deadline cannot be empty.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseFind(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The task keyword cannot be empty.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new FindCommand(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseAddAlias(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String[] tokens \u003d arguments.split(\" \", 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Please supply the keyword mapped to the alias\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String alias \u003d tokens[0].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String keyword \u003d tokens[1].trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new AddAliasCommand(alias, keyword);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseDeleteAlias(String arguments) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new DeleteAliasCommand(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseViewAlias(String arguments) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new ViewAliasCommand(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseListMatchingAliases(String arguments) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new ListMatchingAliasesCommand(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Command parseListAllAliases() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new ListAllAliasesCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Translate the input into commands."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param input the text users type in"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the command of the user"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if error occurs when parsing input"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Command parse(Model model, String input) throws DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Aliases aliases \u003d model.getAliases();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String[] commandTokens \u003d this.getCommandTokens(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String keyword \u003d commandTokens[0];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String arguments \u003d commandTokens[1];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!Aliases.KEYWORDS.contains(keyword) \u0026\u0026 aliases.containsAlias(keyword)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            keyword \u003d aliases.getKeyword(keyword);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseDone(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseDelete(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseTodo(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseDeadline(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseEvent(arguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseFind(arguments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"alias add\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseAddAlias(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"alias delete\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseDeleteAlias(arguments);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"alias view\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseViewAlias(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"alias list\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseListMatchingAliases(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case \"alias all\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return parseListAllAliases();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Please enter a valid command!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 180
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private static final String FILEPATH \u003d System.getProperty(\"user.dir\") + \"/dukeData/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Retrieve data from the storage file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the task list stored in data file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when loading data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Model loadData() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(FILEPATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (file.available() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return new Model();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ObjectInputStream object \u003d new ObjectInputStream(file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Model model \u003d (Model) object.readObject();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            object.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The data file is not found.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The data file is corrupted.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The data file is empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Store data into the storage file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param model the model of Duke application"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur when saving data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void saveData(Model model) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            // Create the file if it does not exist."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            File dataFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            dataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            FileOutputStream file \u003d new FileOutputStream(dataFile, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ObjectOutputStream object \u003d new ObjectOutputStream(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            object.writeObject(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            object.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"The data file is not found.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Cannot save data to the file.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a deadline task instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information about the deadline task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param by the deadline in string format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur in parsing the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.by \u003d dateTimeFormatter.parse(by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Incorrect date/time format for the task.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Generate the text representation of the deadline task in display format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the representation of the deadline task in display format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTimeFormatter.format(by) + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 35
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create an Event instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information about th event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param at the date and time of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws DukeException if errors occur in parsing the datetime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.at \u003d dateTimeFormatter.parse(at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new DukeException(\"Incorrect Date/time format for the task.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Generate the text representation of the event in display format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the representation of the event in display format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTimeFormatter.format(at) + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 35
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    protected static final SimpleDateFormat dateTimeFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a Task instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information about the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get status icon according the to isDone status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a status icon indicating whether the task is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Mark the task as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get the isDone status of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return whether the task is done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Generate the text representation of the task in display format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the representation of the task in display format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.getDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 60
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add a task to the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param task the task to be added into the task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get a task from the task list by index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the task of the given index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Remove a task from the task list by index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param index the index of the task in the task list to be removed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Get length of the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the length of the task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 42
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a Todo instance."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param description information about the todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Generate the text representation of the todo task in display format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the representation of the todo task in display format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 21
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Circle clip;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private DialogBox(Label l, ImageView iv, boolean isDuke) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        clip \u003d new Circle(30, 30, 30);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        iv.setClip(clip);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        displayPicture.setFitWidth(60.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        displayPicture.setFitHeight(60.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.setSpacing(10);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Color color \u003d isDuke ? Color.LIGHTYELLOW : Color.LIGHTGREEN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        BackgroundFill bf \u003d new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Background background \u003d new Background(bf);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.setBackground(background);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a user dialog box."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param l text label"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param iv image of the sender"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a DialogBox for user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new DialogBox(l, iv, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Create a duke dialog box."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param l text label"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param iv image of the sender"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a DialogBox for duke"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        var db \u003d new DialogBox(l, iv, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 73
    }
  },
  {
    "path": "src/main/java/duke/ui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 13
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * A gui for duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Image puppy \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            \"/images/puppy.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Image kitten \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            \"/images/kitten.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public MainWindow(Duke duke) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Set up the gui of the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param stage stage object passed down from Duke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void setGui(Stage stage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        // The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sendButton \u003d new Button(\"send\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stage.setMinWidth(500.0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        mainLayout.setPrefSize(500.0, 600.0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane.setPrefSize(485, 530);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer.setSpacing(20);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        userInput.setPrefWidth(440.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sendButton.setPrefWidth(60.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Show the greeting/error message to the user at the start of the application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param text the text message displayed to the user"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void displayMessage(Label text) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(text, new ImageView(kitten)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Label userText \u003d new Label(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Label dukeText \u003d new Label(duke.process(input));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(puppy)),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(kitten))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 118
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.parser.Aliases;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private static final StringBuilder INDENT \u003d new StringBuilder(\" \".repeat(5));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add exception message to output string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param e a Duke exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showException(DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"Oops! %s\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add greeting message to output string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"What can I do for you?\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        assert this.content.toString().equals(\"     Hello! I\u0027m Duke\\n     What can I do for you?\") : \"Welcome \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                + \"message is wrong!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add message to output string when there is no task in the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showNoTask() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"There is currently no task in the list!\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add message and task information to output string when there are tasks in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.content.append(INDENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.content.append(String.format(\"     %d.%s\\n\", i + 1, taskList.getTask(i)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add exit message to output string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add done message to output string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param task a task to be marked as done"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showDone(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(task + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add delete message to output string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param task a task to be deleted from the task list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showDelete(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(task + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"Now you have %d tasks in the list.\\n\", taskList.getSize()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add add-task message to output string."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param task a task to be added into the task list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showAddTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"  %s\\n\", task));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"Now you have %d tasks in the list.\\n\", taskList.getSize()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add message to output string when there is no task matching the given keyword."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showNoMatchingTask() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"There is no matching task in the list!\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add message and task information of all matching tasks to output string when there are tasks in the task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showMatchingTasks(List\u003cTask\u003e selectedTasks) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (int i \u003d 0; i \u003c selectedTasks.size(); i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.content.append(INDENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.content.append(String.format(\"     %d.%s\\n\", i + 1, selectedTasks.get(i)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add add-alias message to output string."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias alias entered by the user"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword keyword mapped to the alias"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showAddAlias(String alias, String keyword) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"\\\"%s\\\" is now mapped to \\\"%s\\\".\\n\", alias, keyword));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add delete alias message to output string."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias alias entered by the user"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword keyword mapped to the alias"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showDeleteAlias(String alias, String keyword) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"\\\"%s\\\" is no longer mapped to \\\"%s\\\".\\n\", alias, keyword));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add view alias message to output string."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param alias alias entered by the user"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword keyword mapped to the alias"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showViewAlias(String alias, String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"\\\"%s\\\" is an alias for \\\"%s\\\".\\n\", alias, keyword));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add list aliases message to output string."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param aliases the aliases object of the application"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showAllAliases(Aliases aliases) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"Here are the available aliases (left) and their mapped keywords (right):\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        List\u003cString\u003e allAliases \u003d new ArrayList\u003c\u003e(aliases.getAllAliases());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Collections.sort(allAliases);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String alias: allAliases) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.content.append(INDENT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            this.content.append(String.format(\"\\\"%s\\\": \\\"%s\\\".\\n\", alias, aliases.getKeyword(alias)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add list aliases message to output string when there is no alias available."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showNoAliases() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\"There is no alias available, try create some!\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add list matching aliases message to output string."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param matchingAliases aliases mapped to the keyword"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword keyword entered by the user"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showMatchingAliases(List\u003cString\u003e matchingAliases, String keyword) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"Here are the aliases for \\\"%s\\\":\\n\", keyword));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.join(\", \", matchingAliases));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add message to output string when there is no alias mapped the given keyword."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param keyword keyword entered by the user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void showNoMatchingAliases(String keyword) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(INDENT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content.append(String.format(\"There is no alias available for \\\"%s\\\", try create some!\\n\", keyword));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Convert the message to a string."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return a String containing all response displayed to user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String output \u003d content.toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 207
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 19
    }
  },
  {
    "path": "src/test/java/tasks/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addTask_todoTask_pass() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Task todo \u003d new Todo(\"A sample todo task.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        assertEquals(taskList.getTask(0), todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 18
    }
  },
  {
    "path": "src/test/java/tasks/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void markAsDone_todo_pass() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Todo todo \u003d new Todo(\"A todo task.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        assertTrue(todo.getIsDone());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "deadline CS2103 iP /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "event birthday party /at tmr 6pm-8pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "blah"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "deadline presentation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "deadline /by this week"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "event watch movie"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "event /at 12 Sept"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "done 12"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "done nani"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "if [ ! -d \"../bin\" ]; then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]; then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "fi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java; then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "fi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "# clear the duke data file, run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "echo -n \u003e ../data/duke.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "if diff ACTUAL.TXT EXPECTED.TXT; then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "else"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 30
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Next, we create another Java class, `duke.ui.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "The `duke.ui.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class duke.ui.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Run `duke.ui.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "cutieprobe": 4
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Let’s create our custom control `duke.ui.DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class duke.ui.DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public duke.ui.DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            new duke.ui.DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            new duke.ui.DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "## Iteration 3 – Adding custom behavior to duke.ui.DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `duke.ui.DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public static duke.ui.DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    return new duke.ui.DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public static duke.ui.DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    var db \u003d new duke.ui.DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `duke.ui.DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            duke.ui.DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            duke.ui.DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "   * Add padding between each duke.ui.DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 228,
      "cutieprobe": 15
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "   Why does `Main` need to know that `duke.ui.DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "**duke.ui.DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "1. Let’s repeat the process for `duke.ui.DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "   The main difference here is that duke.ui.DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "   ![Settings for duke.ui.DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                duke.ui.DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                duke.ui.DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "For our custom `duke.ui.DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "**duke.ui.DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class duke.ui.DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private duke.ui.DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/duke.ui.DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static duke.ui.DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new duke.ui.DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static duke.ui.DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        var db \u003d new duke.ui.DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "When we create a new instance of `duke.ui.DialogBox`, we set both the controller and root Node to `duke.ui.DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "From this point onwards we can interact with `duke.ui.DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "The last change that we have to make is to point our `duke.ui.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "In `duke.ui.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 274,
      "cutieprobe": 20
    }
  }
]
