[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 9
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    abstract String execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 5
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a DeadlineCommand with a given description and deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param by Task deadline date in format of \"dd/mm/yyyy hhmm\" e.g. \"31/12/2019 2359\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DeadlineCommand(String description, String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) throws DukeInvalidDateException, DukeIoException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Task t \u003d new DeadlineTask(description, by);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"  \" + t + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 28
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a DeadlineTask with a given description and deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param by Task deadline date in format of \"dd/mm/yyyy hhmm\" e.g. \"31/12/2019 2359\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DeadlineTask(String description, String by) throws DukeInvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "            this.by \u003d format.parse(by);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeInvalidDateException(by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"D\\t\" + (this.isDone ? \"1\\t\" : \"0\\t\") + this.description + \"\\t\" + dateFormat.format(this.by) + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 33
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private int deleteIdx;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a DeleteCommand with a given task index to delete."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param idx Index of task to be deleted"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DeleteCommand(int idx) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.deleteIdx \u003d idx;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) throws DukeInvalidTaskException, DukeIoException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (deleteIdx \u003c 1 || deleteIdx \u003e tasks.size()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeInvalidTaskException(deleteIdx);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String result \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"  \" + tasks.remove(deleteIdx) + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 26
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 45
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private int doneIdx;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a DoneCommand with a given task index to be marked as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param idx Index of task to be marked as done"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DoneCommand(int idx) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.doneIdx \u003d idx;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) throws DukeInvalidTaskException, DukeIoException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (doneIdx \u003c 1 || doneIdx \u003e tasks.size()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeInvalidTaskException(doneIdx);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        tasks.get(doneIdx).markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n  \" + tasks.get(doneIdx);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaMith.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this(\"./data/duketasks.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates an instance of Duke, a task manager."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param filePath location of the text file to read/write tasks to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "     *                 If the file exists, it will load tasks from it and write to it whenever users update the tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "     *                 If the file does not exist, it will create the file to write to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "            this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Initiates the program loop where users can key in commands to interact with Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liakify"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liakify"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liakify"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liakify"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liakify"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liakify"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liakify"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liakify"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liakify"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liakify"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liakify"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liakify"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liakify"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liakify"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liakify"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liakify"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liakify"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liakify"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liakify"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liakify"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liakify"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liakify"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liakify"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liakify"
        },
        "content": "        //Welcome text"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Label dukeWelcomeText \u003d new Label(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liakify"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(dukeWelcomeText, new ImageView(duke)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liakify"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liakify"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liakify"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liakify"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liakify"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liakify"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liakify"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return c.execute(tasks, storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 146,
      "-": 2
    }
  },
  {
    "path": "src/main/java/DukeEmptyDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeEmptyDateException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DukeEmptyDateException(String cmd) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return oops + \"The date of a \" + cmd + \" cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 12
    }
  },
  {
    "path": "src/main/java/DukeEmptyDescException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeEmptyDescException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DukeEmptyDescException(String cmd) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return oops + \"The description of a \" + cmd + \" cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 12
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    protected String oops \u003d \"OOPS!!! \";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return oops + \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 8
    }
  },
  {
    "path": "src/main/java/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"An error occurred with reading / writing to the storage file.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 6
    }
  },
  {
    "path": "src/main/java/DukeInvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeInvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DukeInvalidDateException(String date) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return this.date + \" is an invalid date format!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 12
    }
  },
  {
    "path": "src/main/java/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DukeInvalidTaskException(String task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DukeInvalidTaskException(int task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.task \u003d Integer.toString(task);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return oops + \"Task \" + task + \" does not exist.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 16
    }
  },
  {
    "path": "src/main/java/DukeInvalidTaskFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeInvalidTaskFormatException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    DukeInvalidTaskFormatException(String task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return oops + \"\\\"\" + task + \"\\\" is an invalid task format.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 12
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates an EventCommand with a given description and event date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param at Event date in format of \"dd/mm/yyyy hhmm\" e.g. \"31/12/2019 2359\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    EventCommand(String description, String at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) throws DukeInvalidDateException, DukeIoException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Task t \u003d new EventTask(description, at);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"  \" + t + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 28
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates an EventTask with a given description and event date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param at Event date in format of \"dd/mm/yyyy hhmm\" e.g. \"31/12/2019 2359\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    EventTask(String description, String at) throws DukeInvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "            this.at \u003d format.parse(at);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeInvalidDateException(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"E\\t\" + (this.isDone ? \"1\\t\" : \"0\\t\") + this.description + \"\\t\" + dateFormat.format(this.at) + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 33
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String string;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a FindCommand object to find tasks that contain a given string."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param string The string to search for"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    FindCommand(String string) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.string \u003d string;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String result \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (tasks.get(i).getDescription().contains(string)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "                result +\u003d \"\\n\" + i + \". \" + tasks.get(i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 25
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 9
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 7
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * A method that parses user input lines and converts them into executable Command objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param s A String that contains the user input line"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @return A Command object representing the command as parsed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    static Command parse(String s) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String[] arg \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "        switch (arg[0]) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg.length \u003c 2 || arg[1].trim().length() \u003c 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new DukeEmptyDescException(arg[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "            int idx;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "                idx \u003d Integer.parseInt(arg[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new DukeInvalidTaskException(arg[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "                return new DoneCommand(idx);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "            } else { //Command must be \"delete\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "                return new DeleteCommand(idx);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg.length \u003c 2 || arg[1].trim().length() \u003c 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new DukeEmptyDescException(arg[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "                return new TodoCommand(arg[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "            } else if (arg[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "                String[] temp \u003d arg[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "                if (temp.length \u003c 2 || temp[1].trim().length() \u003c 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "                    throw new DukeEmptyDateException(arg[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "                return new DeadlineCommand(temp[0], temp[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "            } else { //Task must be \"event\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "                String[] temp \u003d arg[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "                if (temp.length \u003c 2 || temp[1].trim().length() \u003c 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "                    throw new DukeEmptyDateException(arg[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "                return new EventCommand(temp[0], temp[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg.length \u003c 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new DukeEmptyDescException(arg[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return new FindCommand(arg[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 62
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Scanner fileSc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a Storage object which handles file I/O for reading/saving tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param filePath The location of the text file to be used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "     *                 If the file does not exist, it will create the file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    Storage(String filePath) throws DukeIoException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "                this.fileSc \u003d new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "                this.fileSc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeIoException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "    ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "        while (fileSc.hasNextLine()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "            tasks.add(parseFileLine(fileSc.nextLine()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "    void writeToFile(TaskList tasks) throws DukeIoException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "                bw.write(tasks.get(i).toFileString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeIoException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Task parseFileLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String[] arg \u003d line.split(\"\\t\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (arg.length \u003c 3) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeInvalidTaskFormatException(line);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": "        switch (arg[0]) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "            t \u003d new TodoTask(arg[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg.length \u003c 4) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new DukeInvalidTaskFormatException(line);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "            t \u003d new DeadlineTask(arg[2], arg[3]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (arg.length \u003c 4) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new DukeInvalidTaskFormatException(line);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": "            t \u003d new EventTask(arg[2], arg[3]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liakify"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liakify"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new DukeInvalidTaskFormatException(line);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (arg[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 83
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    protected SimpleDateFormat dateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Task constructor used by classes extending Task. Cannot be called directly as Task is abstract."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public abstract String toFileString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 36
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a TaskList which stores Tasks. A TaskList with n items indexes tasks from 1 to n."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param tasks An ArrayList of tasks which will be used to populate the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    int size() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean add(Task t) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return tasks.add(t);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    Task get(int idx) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return tasks.get(idx - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    Task remove(int idx) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return tasks.remove(idx - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String result \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "            result +\u003d \"\\n\" + (i + 1) +  \". \" + tasks.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 38
    }
  },
  {
    "path": "src/main/java/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "    TodoCommand(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "    String execute(TaskList tasks, Storage storage) throws DukeIoException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Task t \u003d new TodoTask(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"  \" + t + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        result +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 21
    }
  },
  {
    "path": "src/main/java/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Creates a TodoTask with a given description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "    TodoTask(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"T\\t\" + (this.isDone ? \"1\\t\" : \"0\\t\") + this.description + \"\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 20
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liakify": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liakify": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 10
    }
  }
]
